
Final Project Pixy2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005244  08005244  00015244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b8  080052b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080052b8  080052b8  000152b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052c0  080052c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052c0  080052c0  000152c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052c4  080052c4  000152c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000070  08005338  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08005338  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012dfd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000261f  00000000  00000000  00032e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  000354c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  000365c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a63  00000000  00000000  00037610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ce6  00000000  00000000  00051073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009549b  00000000  00000000  00065d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb1f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d40  00000000  00000000  000fb244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800522c 	.word	0x0800522c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800522c 	.word	0x0800522c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <_ZN5Pixy2C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
#include <stdio.h>
#include <string.h>
#include <numeric>

// Constructor only requires a few of the class attributes
	Pixy2::Pixy2(SPI_HandleTypeDef* hspi,GPIO_TypeDef* GPIOx,uint16_t GPIO_Pin){
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	807b      	strh	r3, [r7, #2]
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2200      	movs	r2, #0
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3308      	adds	r3, #8
 80005a2:	2228      	movs	r2, #40	; 0x28
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 f9d8 	bl	800495c <memset>
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	3330      	adds	r3, #48	; 0x30
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
		spi	  	  = hspi;											// pointer to spi object
 80005b6:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <_ZN5Pixy2C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft+0x50>)
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	6013      	str	r3, [r2, #0]
		SS_Port	  = GPIOx;											// pointer to ss port
 80005bc:	4a06      	ldr	r2, [pc, #24]	; (80005d8 <_ZN5Pixy2C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft+0x54>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6013      	str	r3, [r2, #0]
		SS_Pin    = GPIO_Pin;										// pointer to ss pin
 80005c2:	4a06      	ldr	r2, [pc, #24]	; (80005dc <_ZN5Pixy2C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft+0x58>)
 80005c4:	887b      	ldrh	r3, [r7, #2]
 80005c6:	8013      	strh	r3, [r2, #0]

	}
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4618      	mov	r0, r3
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000270 	.word	0x20000270
 80005d8:	20000274 	.word	0x20000274
 80005dc:	20000278 	.word	0x20000278

080005e0 <_ZN5Pixy28getBlockEhh>:
// Updates block data for pixy2 object
	void Pixy2::getBlock(uint8_t sigmap,uint8_t maxblocks){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	70fb      	strb	r3, [r7, #3]
 80005ec:	4613      	mov	r3, r2
 80005ee:	70bb      	strb	r3, [r7, #2]
		uint8_t blocReq[] = {0xae,0xc1,32,2,sigmap,maxblocks};		// block request data
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	809a      	strh	r2, [r3, #4]
 80005fa:	23ae      	movs	r3, #174	; 0xae
 80005fc:	733b      	strb	r3, [r7, #12]
 80005fe:	23c1      	movs	r3, #193	; 0xc1
 8000600:	737b      	strb	r3, [r7, #13]
 8000602:	2320      	movs	r3, #32
 8000604:	73bb      	strb	r3, [r7, #14]
 8000606:	2302      	movs	r3, #2
 8000608:	73fb      	strb	r3, [r7, #15]
 800060a:	78fb      	ldrb	r3, [r7, #3]
 800060c:	743b      	strb	r3, [r7, #16]
 800060e:	78bb      	ldrb	r3, [r7, #2]
 8000610:	747b      	strb	r3, [r7, #17]
		Length = 20;												// length of response
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2214      	movs	r2, #20
 8000616:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(SS_Port,SS_Pin,GPIO_PIN_RESET);			// drive ss pin low to enable communication
 8000618:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <_ZN5Pixy28getBlockEhh+0xf8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a2f      	ldr	r2, [pc, #188]	; (80006dc <_ZN5Pixy28getBlockEhh+0xfc>)
 800061e:	8811      	ldrh	r1, [r2, #0]
 8000620:	2200      	movs	r2, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f001 f924 	bl	8001870 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(spi,(uint8_t*) &blocReq,6);				// transmit block request return data is put in Data
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <_ZN5Pixy28getBlockEhh+0x100>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f107 010c 	add.w	r1, r7, #12
 8000630:	2206      	movs	r2, #6
 8000632:	4618      	mov	r0, r3
 8000634:	f001 ff5c 	bl	80024f0 <HAL_SPI_Transmit_IT>
		int16_t n;
		for(n=0;n<99;n++){											// iterate over all elements in Data
 8000638:	2300      	movs	r3, #0
 800063a:	82fb      	strh	r3, [r7, #22]
 800063c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000640:	2b62      	cmp	r3, #98	; 0x62
 8000642:	dc45      	bgt.n	80006d0 <_ZN5Pixy28getBlockEhh+0xf0>
			if(Data[n] == 0xaf && Data[n+1] == 0xc1){				// check for first occurrence of  0xaec1
 8000644:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000648:	4a26      	ldr	r2, [pc, #152]	; (80006e4 <_ZN5Pixy28getBlockEhh+0x104>)
 800064a:	5cd3      	ldrb	r3, [r2, r3]
 800064c:	2baf      	cmp	r3, #175	; 0xaf
 800064e:	d138      	bne.n	80006c2 <_ZN5Pixy28getBlockEhh+0xe2>
 8000650:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000654:	3301      	adds	r3, #1
 8000656:	4a23      	ldr	r2, [pc, #140]	; (80006e4 <_ZN5Pixy28getBlockEhh+0x104>)
 8000658:	5cd3      	ldrb	r3, [r2, r3]
 800065a:	2bc1      	cmp	r3, #193	; 0xc1
 800065c:	d131      	bne.n	80006c2 <_ZN5Pixy28getBlockEhh+0xe2>
				StartByte = n;										// set as start byte
 800065e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	601a      	str	r2, [r3, #0]
				int16_t csum = std::accumulate(Data+StartByte+6,Data+StartByte+20,0);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	3306      	adds	r3, #6
 800066c:	4a1d      	ldr	r2, [pc, #116]	; (80006e4 <_ZN5Pixy28getBlockEhh+0x104>)
 800066e:	1898      	adds	r0, r3, r2
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3314      	adds	r3, #20
 8000676:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <_ZN5Pixy28getBlockEhh+0x104>)
 8000678:	4413      	add	r3, r2
 800067a:	2200      	movs	r2, #0
 800067c:	4619      	mov	r1, r3
 800067e:	f000 f899 	bl	80007b4 <_ZSt10accumulateIPhiET0_T_S2_S1_>
 8000682:	4603      	mov	r3, r0
 8000684:	82bb      	strh	r3, [r7, #20]
				if(csum == (Data[StartByte+5]<<8)+Data[StartByte+4]){
 8000686:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	3305      	adds	r3, #5
 8000690:	4914      	ldr	r1, [pc, #80]	; (80006e4 <_ZN5Pixy28getBlockEhh+0x104>)
 8000692:	5ccb      	ldrb	r3, [r1, r3]
 8000694:	021b      	lsls	r3, r3, #8
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	6809      	ldr	r1, [r1, #0]
 800069a:	3104      	adds	r1, #4
 800069c:	4811      	ldr	r0, [pc, #68]	; (80006e4 <_ZN5Pixy28getBlockEhh+0x104>)
 800069e:	5c41      	ldrb	r1, [r0, r1]
 80006a0:	440b      	add	r3, r1
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d10b      	bne.n	80006be <_ZN5Pixy28getBlockEhh+0xde>
					memcpy(&Block,&Data[n],Length);					// copy the data to Block for stability
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f103 0008 	add.w	r0, r3, #8
 80006ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80006b0:	4a0c      	ldr	r2, [pc, #48]	; (80006e4 <_ZN5Pixy28getBlockEhh+0x104>)
 80006b2:	1899      	adds	r1, r3, r2
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	461a      	mov	r2, r3
 80006ba:	f004 f941 	bl	8004940 <memcpy>
				}
				n = 100;											// exit out of for loop early
 80006be:	2364      	movs	r3, #100	; 0x64
 80006c0:	82fb      	strh	r3, [r7, #22]
		for(n=0;n<99;n++){											// iterate over all elements in Data
 80006c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	3301      	adds	r3, #1
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	82fb      	strh	r3, [r7, #22]
 80006ce:	e7b5      	b.n	800063c <_ZN5Pixy28getBlockEhh+0x5c>
			}
		}

	}
 80006d0:	bf00      	nop
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000274 	.word	0x20000274
 80006dc:	20000278 	.word	0x20000278
 80006e0:	20000270 	.word	0x20000270
 80006e4:	2000027c 	.word	0x2000027c

080006e8 <_ZN5Pixy29setCoordsEv>:
// Sets coordinates from last captured block
	void Pixy2::setCoords(){
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
		// Be sure there isn't an error state (0x0101)
		if(!(Block[8]==1 && Block[9]==1 && Block[10]==1 && Block[11]==1)){
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	7c1b      	ldrb	r3, [r3, #16]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d10b      	bne.n	8000710 <_ZN5Pixy29setCoordsEv+0x28>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	7c5b      	ldrb	r3, [r3, #17]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d107      	bne.n	8000710 <_ZN5Pixy29setCoordsEv+0x28>
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	7c9b      	ldrb	r3, [r3, #18]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d103      	bne.n	8000710 <_ZN5Pixy29setCoordsEv+0x28>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	7cdb      	ldrb	r3, [r3, #19]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d010      	beq.n	8000732 <_ZN5Pixy29setCoordsEv+0x4a>
			// If not, set coords from fetched block data
			Coords[0] = (Block[9]<<8)+Block[8];
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	7c5b      	ldrb	r3, [r3, #17]
 8000714:	021b      	lsls	r3, r3, #8
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	7c12      	ldrb	r2, [r2, #16]
 800071a:	441a      	add	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	631a      	str	r2, [r3, #48]	; 0x30
			Coords[1] = (Block[11]<<8)+Block[10];
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	7cdb      	ldrb	r3, [r3, #19]
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	7c92      	ldrb	r2, [r2, #18]
 800072a:	441a      	add	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	635a      	str	r2, [r3, #52]	; 0x34
 8000730:	e008      	b.n	8000744 <_ZN5Pixy29setCoordsEv+0x5c>
		} else{
			// otherwise return -1 for an error
			Coords[0] = -1;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f04f 32ff 	mov.w	r2, #4294967295
 8000738:	631a      	str	r2, [r3, #48]	; 0x30
			Coords[1] = -1;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f04f 32ff 	mov.w	r2, #4294967295
 8000740:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
 8000742:	bf00      	nop
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <HAL_SPI_TxCpltCallback>:




	void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef* hspi){			// Transmit callback function
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
		if(hspi == Pixy2::spi){
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_SPI_TxCpltCallback+0x24>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	429a      	cmp	r2, r3
 8000760:	d104      	bne.n	800076c <HAL_SPI_TxCpltCallback+0x1c>
			HAL_SPI_Receive_IT(hspi,(uint8_t*) &(Pixy2::Data),100);	// Start a receive command and put return data in Data
 8000762:	2264      	movs	r2, #100	; 0x64
 8000764:	4904      	ldr	r1, [pc, #16]	; (8000778 <HAL_SPI_TxCpltCallback+0x28>)
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f001 ff4c 	bl	8002604 <HAL_SPI_Receive_IT>
		}
	}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000270 	.word	0x20000270
 8000778:	2000027c 	.word	0x2000027c

0800077c <HAL_SPI_RxCpltCallback>:
	void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef* hspi){			// Receive callback function
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
		if (hspi == Pixy2::spi){
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_SPI_RxCpltCallback+0x2c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	429a      	cmp	r2, r3
 800078c:	d107      	bne.n	800079e <HAL_SPI_RxCpltCallback+0x22>
			HAL_GPIO_WritePin(Pixy2::SS_Port,Pixy2::SS_Pin,GPIO_PIN_SET);	// Write ss pin high to disable communication
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <HAL_SPI_RxCpltCallback+0x30>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <HAL_SPI_RxCpltCallback+0x34>)
 8000794:	8811      	ldrh	r1, [r2, #0]
 8000796:	2201      	movs	r2, #1
 8000798:	4618      	mov	r0, r3
 800079a:	f001 f869 	bl	8001870 <HAL_GPIO_WritePin>
		}
	}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000270 	.word	0x20000270
 80007ac:	20000274 	.word	0x20000274
 80007b0:	20000278 	.word	0x20000278

080007b4 <_ZSt10accumulateIPhiET0_T_S2_S1_>:
   *  @return  The final sum.
   */
  template<typename _InputIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      for (; __first != __last; ++__first)
 80007c0:	68fa      	ldr	r2, [r7, #12]
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d009      	beq.n	80007dc <_ZSt10accumulateIPhiET0_T_S2_S1_+0x28>
	__init = _GLIBCXX_MOVE_IF_20(__init) + *__first;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	607b      	str	r3, [r7, #4]
      for (; __first != __last; ++__first)
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	3301      	adds	r3, #1
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	e7f1      	b.n	80007c0 <_ZSt10accumulateIPhiET0_T_S2_S1_+0xc>
      return __init;
 80007dc:	687b      	ldr	r3, [r7, #4]
    }
 80007de:	4618      	mov	r0, r3
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
	...

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b090      	sub	sp, #64	; 0x40
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f2:	f000 fc7f 	bl	80010f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f6:	f000 f83b 	bl	8000870 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f000 fa07 	bl	8000c0c <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 80007fe:	f000 f97b 	bl	8000af8 <_ZL12MX_TIM2_Initv>
  MX_USART1_UART_Init();
 8000802:	f000 f9d5 	bl	8000bb0 <_ZL19MX_USART1_UART_Initv>
  MX_I2C1_Init();
 8000806:	f000 f8a5 	bl	8000954 <_ZL12MX_I2C1_Initv>
  MX_SPI2_Init();
 800080a:	f000 f8d7 	bl	80009bc <_ZL12MX_SPI2_Initv>
  MX_TIM1_Init();
 800080e:	f000 f911 	bl	8000a34 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */
  // Instance of camera object
  Pixy2 Camera = Pixy2(&hspi2,GPIOB,GPIO_PIN_12);
 8000812:	1d38      	adds	r0, r7, #4
 8000814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000818:	4a10      	ldr	r2, [pc, #64]	; (800085c <main+0x70>)
 800081a:	4911      	ldr	r1, [pc, #68]	; (8000860 <main+0x74>)
 800081c:	f7ff feb2 	bl	8000584 <_ZN5Pixy2C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	HAL_Delay(250);							// Delay 250 ms for user readability
 8000820:	20fa      	movs	r0, #250	; 0xfa
 8000822:	f000 fcd9 	bl	80011d8 <HAL_Delay>
	Camera.getBlock(0b00000001,1);			// Get 1 block with label 1
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2201      	movs	r2, #1
 800082a:	2101      	movs	r1, #1
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fed7 	bl	80005e0 <_ZN5Pixy28getBlockEhh>
	Camera.setCoords();						// Set coordinates from that block
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff57 	bl	80006e8 <_ZN5Pixy29setCoordsEv>
	// build string to print to uart
	int32_t len = sprintf(msg_buff, "X Position: %i;    Y Position: %i \r\n",Camera.Coords[0],Camera.Coords[1]);
 800083a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800083c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800083e:	4909      	ldr	r1, [pc, #36]	; (8000864 <main+0x78>)
 8000840:	4809      	ldr	r0, [pc, #36]	; (8000868 <main+0x7c>)
 8000842:	f004 f893 	bl	800496c <siprintf>
 8000846:	63f8      	str	r0, [r7, #60]	; 0x3c
	// print string to uart
	HAL_UART_Transmit(&huart1,(uint8_t*) &msg_buff,len,1000);
 8000848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800084a:	b29a      	uxth	r2, r3
 800084c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000850:	4905      	ldr	r1, [pc, #20]	; (8000868 <main+0x7c>)
 8000852:	4806      	ldr	r0, [pc, #24]	; (800086c <main+0x80>)
 8000854:	f003 f883 	bl	800395e <HAL_UART_Transmit>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000858:	e7e2      	b.n	8000820 <main+0x34>
 800085a:	bf00      	nop
 800085c:	40020400 	.word	0x40020400
 8000860:	200000e0 	.word	0x200000e0
 8000864:	08005244 	.word	0x08005244
 8000868:	2000020c 	.word	0x2000020c
 800086c:	200001c8 	.word	0x200001c8

08000870 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b094      	sub	sp, #80	; 0x50
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	2230      	movs	r2, #48	; 0x30
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f004 f86c 	bl	800495c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	4b2c      	ldr	r3, [pc, #176]	; (800094c <_Z18SystemClock_Configv+0xdc>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	4a2b      	ldr	r2, [pc, #172]	; (800094c <_Z18SystemClock_Configv+0xdc>)
 800089e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a2:	6413      	str	r3, [r2, #64]	; 0x40
 80008a4:	4b29      	ldr	r3, [pc, #164]	; (800094c <_Z18SystemClock_Configv+0xdc>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	4b26      	ldr	r3, [pc, #152]	; (8000950 <_Z18SystemClock_Configv+0xe0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a25      	ldr	r2, [pc, #148]	; (8000950 <_Z18SystemClock_Configv+0xe0>)
 80008ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008be:	6013      	str	r3, [r2, #0]
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <_Z18SystemClock_Configv+0xe0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008cc:	2301      	movs	r3, #1
 80008ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d6:	2302      	movs	r3, #2
 80008d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008e0:	2319      	movs	r3, #25
 80008e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008e4:	23c0      	movs	r3, #192	; 0xc0
 80008e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008ec:	2304      	movs	r3, #4
 80008ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f0:	f107 0320 	add.w	r3, r7, #32
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 f919 	bl	8001b2c <HAL_RCC_OscConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	bf14      	ite	ne
 8000900:	2301      	movne	r3, #1
 8000902:	2300      	moveq	r3, #0
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800090a:	f000 f9f7 	bl	8000cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090e:	230f      	movs	r3, #15
 8000910:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000912:	2302      	movs	r3, #2
 8000914:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800091a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2103      	movs	r1, #3
 800092a:	4618      	mov	r0, r3
 800092c:	f001 fb76 	bl	800201c <HAL_RCC_ClockConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	bf14      	ite	ne
 8000936:	2301      	movne	r3, #1
 8000938:	2300      	moveq	r3, #0
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000940:	f000 f9dc 	bl	8000cfc <Error_Handler>
  }
}
 8000944:	bf00      	nop
 8000946:	3750      	adds	r7, #80	; 0x50
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40007000 	.word	0x40007000

08000954 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <_ZL12MX_I2C1_Initv+0x5c>)
 800095a:	4a16      	ldr	r2, [pc, #88]	; (80009b4 <_ZL12MX_I2C1_Initv+0x60>)
 800095c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000960:	4a15      	ldr	r2, [pc, #84]	; (80009b8 <_ZL12MX_I2C1_Initv+0x64>)
 8000962:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <_ZL12MX_I2C1_Initv+0x5c>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000976:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000978:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <_ZL12MX_I2C1_Initv+0x5c>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <_ZL12MX_I2C1_Initv+0x5c>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000990:	4807      	ldr	r0, [pc, #28]	; (80009b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8000992:	f000 ff87 	bl	80018a4 <HAL_I2C_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	bf14      	ite	ne
 800099c:	2301      	movne	r3, #1
 800099e:	2300      	moveq	r3, #0
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80009a6:	f000 f9a9 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000008c 	.word	0x2000008c
 80009b4:	40005400 	.word	0x40005400
 80009b8:	000186a0 	.word	0x000186a0

080009bc <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <_ZL12MX_SPI2_Initv+0x70>)
 80009c2:	4a1b      	ldr	r2, [pc, #108]	; (8000a30 <_ZL12MX_SPI2_Initv+0x74>)
 80009c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <_ZL12MX_SPI2_Initv+0x70>)
 80009c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <_ZL12MX_SPI2_Initv+0x70>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <_ZL12MX_SPI2_Initv+0x70>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <_ZL12MX_SPI2_Initv+0x70>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <_ZL12MX_SPI2_Initv+0x70>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <_ZL12MX_SPI2_Initv+0x70>)
 80009e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <_ZL12MX_SPI2_Initv+0x70>)
 80009f0:	2220      	movs	r2, #32
 80009f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <_ZL12MX_SPI2_Initv+0x70>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <_ZL12MX_SPI2_Initv+0x70>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <_ZL12MX_SPI2_Initv+0x70>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <_ZL12MX_SPI2_Initv+0x70>)
 8000a08:	220a      	movs	r2, #10
 8000a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a0c:	4807      	ldr	r0, [pc, #28]	; (8000a2c <_ZL12MX_SPI2_Initv+0x70>)
 8000a0e:	f001 fce5 	bl	80023dc <HAL_SPI_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	bf14      	ite	ne
 8000a18:	2301      	movne	r3, #1
 8000a1a:	2300      	moveq	r3, #0
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8000a22:	f000 f96b 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000e0 	.word	0x200000e0
 8000a30:	40003800 	.word	0x40003800

08000a34 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a52:	4b27      	ldr	r3, [pc, #156]	; (8000af0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000a54:	4a27      	ldr	r2, [pc, #156]	; (8000af4 <_ZL12MX_TIM1_Initv+0xc0>)
 8000a56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a58:	4b25      	ldr	r3, [pc, #148]	; (8000af0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5e:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6c:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a72:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a78:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a7e:	481c      	ldr	r0, [pc, #112]	; (8000af0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000a80:	f002 fbae 	bl	80031e0 <HAL_TIM_Base_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	bf14      	ite	ne
 8000a8a:	2301      	movne	r3, #1
 8000a8c:	2300      	moveq	r3, #0
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8000a94:	f000 f932 	bl	8000cfc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4812      	ldr	r0, [pc, #72]	; (8000af0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000aa8:	f002 fcb0 	bl	800340c <HAL_TIM_SlaveConfigSynchro>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	bf14      	ite	ne
 8000ab2:	2301      	movne	r3, #1
 8000ab4:	2300      	moveq	r3, #0
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <_ZL12MX_TIM1_Initv+0x8c>
  {
    Error_Handler();
 8000abc:	f000 f91e 	bl	8000cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	4619      	mov	r1, r3
 8000acc:	4808      	ldr	r0, [pc, #32]	; (8000af0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000ace:	f002 fe8b 	bl	80037e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	bf14      	ite	ne
 8000ad8:	2301      	movne	r3, #1
 8000ada:	2300      	moveq	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 8000ae2:	f000 f90b 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	3720      	adds	r7, #32
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000138 	.word	0x20000138
 8000af4:	40010000 	.word	0x40010000

08000af8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afe:	f107 0308 	add.w	r3, r7, #8
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b14:	4b25      	ldr	r3, [pc, #148]	; (8000bac <_ZL12MX_TIM2_Initv+0xb4>)
 8000b16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b1c:	4b23      	ldr	r3, [pc, #140]	; (8000bac <_ZL12MX_TIM2_Initv+0xb4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b22:	4b22      	ldr	r3, [pc, #136]	; (8000bac <_ZL12MX_TIM2_Initv+0xb4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4799;
 8000b28:	4b20      	ldr	r3, [pc, #128]	; (8000bac <_ZL12MX_TIM2_Initv+0xb4>)
 8000b2a:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000b2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b30:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <_ZL12MX_TIM2_Initv+0xb4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b36:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <_ZL12MX_TIM2_Initv+0xb4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b3c:	481b      	ldr	r0, [pc, #108]	; (8000bac <_ZL12MX_TIM2_Initv+0xb4>)
 8000b3e:	f002 fb4f 	bl	80031e0 <HAL_TIM_Base_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	bf14      	ite	ne
 8000b48:	2301      	movne	r3, #1
 8000b4a:	2300      	moveq	r3, #0
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8000b52:	f000 f8d3 	bl	8000cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b5c:	f107 0308 	add.w	r3, r7, #8
 8000b60:	4619      	mov	r1, r3
 8000b62:	4812      	ldr	r0, [pc, #72]	; (8000bac <_ZL12MX_TIM2_Initv+0xb4>)
 8000b64:	f002 fb8b 	bl	800327e <HAL_TIM_ConfigClockSource>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	bf14      	ite	ne
 8000b6e:	2301      	movne	r3, #1
 8000b70:	2300      	moveq	r3, #0
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8000b78:	f000 f8c0 	bl	8000cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b84:	463b      	mov	r3, r7
 8000b86:	4619      	mov	r1, r3
 8000b88:	4808      	ldr	r0, [pc, #32]	; (8000bac <_ZL12MX_TIM2_Initv+0xb4>)
 8000b8a:	f002 fe2d 	bl	80037e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	bf14      	ite	ne
 8000b94:	2301      	movne	r3, #1
 8000b96:	2300      	moveq	r3, #0
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8000b9e:	f000 f8ad 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000180 	.word	0x20000180

08000bb0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bb6:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000bb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000be6:	4807      	ldr	r0, [pc, #28]	; (8000c04 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000be8:	f002 fe6c 	bl	80038c4 <HAL_UART_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	bf14      	ite	ne
 8000bf2:	2301      	movne	r3, #1
 8000bf4:	2300      	moveq	r3, #0
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000bfc:	f000 f87e 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200001c8 	.word	0x200001c8
 8000c08:	40011000 	.word	0x40011000

08000c0c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a31      	ldr	r2, [pc, #196]	; (8000cf0 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c2c:	f043 0304 	orr.w	r3, r3, #4
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a2a      	ldr	r2, [pc, #168]	; (8000cf0 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a23      	ldr	r2, [pc, #140]	; (8000cf0 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a1c      	ldr	r2, [pc, #112]	; (8000cf0 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c98:	4816      	ldr	r0, [pc, #88]	; (8000cf4 <_ZL12MX_GPIO_Initv+0xe8>)
 8000c9a:	f000 fde9 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca4:	4814      	ldr	r0, [pc, #80]	; (8000cf8 <_ZL12MX_GPIO_Initv+0xec>)
 8000ca6:	f000 fde3 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000caa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <_ZL12MX_GPIO_Initv+0xe8>)
 8000cc4:	f000 fc50 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <_ZL12MX_GPIO_Initv+0xec>)
 8000ce2:	f000 fc41 	bl	8001568 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3728      	adds	r7, #40	; 0x28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020800 	.word	0x40020800
 8000cf8:	40020400 	.word	0x40020400

08000cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <Error_Handler+0x8>
	...

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_I2C_MspInit+0x84>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d12c      	bne.n	8000dd4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9c:	2312      	movs	r3, #18
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da8:	2304      	movs	r3, #4
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	480c      	ldr	r0, [pc, #48]	; (8000de4 <HAL_I2C_MspInit+0x8c>)
 8000db4:	f000 fbd8 	bl	8001568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	; 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40005400 	.word	0x40005400
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020400 	.word	0x40020400

08000de8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a1d      	ldr	r2, [pc, #116]	; (8000e7c <HAL_SPI_MspInit+0x94>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d134      	bne.n	8000e74 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_SPI_MspInit+0x98>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a1b      	ldr	r2, [pc, #108]	; (8000e80 <HAL_SPI_MspInit+0x98>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_SPI_MspInit+0x98>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_SPI_MspInit+0x98>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <HAL_SPI_MspInit+0x98>)
 8000e30:	f043 0302 	orr.w	r3, r3, #2
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_SPI_MspInit+0x98>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e42:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e54:	2305      	movs	r3, #5
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4809      	ldr	r0, [pc, #36]	; (8000e84 <HAL_SPI_MspInit+0x9c>)
 8000e60:	f000 fb82 	bl	8001568 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2100      	movs	r1, #0
 8000e68:	2024      	movs	r0, #36	; 0x24
 8000e6a:	f000 fab4 	bl	80013d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000e6e:	2024      	movs	r0, #36	; 0x24
 8000e70:	f000 facd 	bl	800140e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e74:	bf00      	nop
 8000e76:	3728      	adds	r7, #40	; 0x28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40003800 	.word	0x40003800
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020400 	.word	0x40020400

08000e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a15      	ldr	r2, [pc, #84]	; (8000eec <HAL_TIM_Base_MspInit+0x64>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d10e      	bne.n	8000eb8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <HAL_TIM_Base_MspInit+0x68>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <HAL_TIM_Base_MspInit+0x68>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <HAL_TIM_Base_MspInit+0x68>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eb6:	e012      	b.n	8000ede <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec0:	d10d      	bne.n	8000ede <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_TIM_Base_MspInit+0x68>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a09      	ldr	r2, [pc, #36]	; (8000ef0 <HAL_TIM_Base_MspInit+0x68>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <HAL_TIM_Base_MspInit+0x68>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
}
 8000ede:	bf00      	nop
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40010000 	.word	0x40010000
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a1d      	ldr	r2, [pc, #116]	; (8000f88 <HAL_UART_MspInit+0x94>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d134      	bne.n	8000f80 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a1b      	ldr	r2, [pc, #108]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f20:	f043 0310 	orr.w	r3, r3, #16
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f60:	2307      	movs	r3, #7
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4809      	ldr	r0, [pc, #36]	; (8000f90 <HAL_UART_MspInit+0x9c>)
 8000f6c:	f000 fafc 	bl	8001568 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	2025      	movs	r0, #37	; 0x25
 8000f76:	f000 fa2e 	bl	80013d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f7a:	2025      	movs	r0, #37	; 0x25
 8000f7c:	f000 fa47 	bl	800140e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	; 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40011000 	.word	0x40011000
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020000 	.word	0x40020000

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <NMI_Handler+0x4>

08000f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe0:	f000 f8da 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <SPI2_IRQHandler+0x10>)
 8000fee:	f001 fc3b 	bl	8002868 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200000e0 	.word	0x200000e0

08000ffc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <USART1_IRQHandler+0x10>)
 8001002:	f002 fd3f 	bl	8003a84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200001c8 	.word	0x200001c8

08001010 <_sbrk>:
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	4a14      	ldr	r2, [pc, #80]	; (800106c <_sbrk+0x5c>)
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <_sbrk+0x60>)
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <_sbrk+0x22>
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <_sbrk+0x64>)
 800102e:	4a12      	ldr	r2, [pc, #72]	; (8001078 <_sbrk+0x68>)
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	429a      	cmp	r2, r3
 800103e:	d207      	bcs.n	8001050 <_sbrk+0x40>
 8001040:	f003 fc54 	bl	80048ec <__errno>
 8001044:	4603      	mov	r3, r0
 8001046:	220c      	movs	r2, #12
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	e009      	b.n	8001064 <_sbrk+0x54>
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <_sbrk+0x64>)
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20020000 	.word	0x20020000
 8001070:	00000400 	.word	0x00000400
 8001074:	200002e0 	.word	0x200002e0
 8001078:	200002f8 	.word	0x200002f8

0800107c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <SystemInit+0x20>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <SystemInit+0x20>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <Reset_Handler>:
 80010a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d8 <LoopFillZerobss+0x12>
 80010a4:	480d      	ldr	r0, [pc, #52]	; (80010dc <LoopFillZerobss+0x16>)
 80010a6:	490e      	ldr	r1, [pc, #56]	; (80010e0 <LoopFillZerobss+0x1a>)
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <LoopFillZerobss+0x1e>)
 80010aa:	2300      	movs	r3, #0
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:
 80010ae:	58d4      	ldr	r4, [r2, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:
 80010b4:	18c4      	adds	r4, r0, r3
 80010b6:	428c      	cmp	r4, r1
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <LoopFillZerobss+0x22>)
 80010bc:	4c0b      	ldr	r4, [pc, #44]	; (80010ec <LoopFillZerobss+0x26>)
 80010be:	2300      	movs	r3, #0
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:
 80010c6:	42a2      	cmp	r2, r4
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>
 80010ca:	f7ff ffd7 	bl	800107c <SystemInit>
 80010ce:	f003 fc13 	bl	80048f8 <__libc_init_array>
 80010d2:	f7ff fb8b 	bl	80007ec <main>
 80010d6:	4770      	bx	lr
 80010d8:	20020000 	.word	0x20020000
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000070 	.word	0x20000070
 80010e4:	080052c8 	.word	0x080052c8
 80010e8:	20000070 	.word	0x20000070
 80010ec:	200002f8 	.word	0x200002f8

080010f0 <ADC_IRQHandler>:
 80010f0:	e7fe      	b.n	80010f0 <ADC_IRQHandler>
	...

080010f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0d      	ldr	r2, [pc, #52]	; (8001134 <HAL_Init+0x40>)
 80010fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001102:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <HAL_Init+0x40>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <HAL_Init+0x40>)
 800110a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800110e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <HAL_Init+0x40>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a07      	ldr	r2, [pc, #28]	; (8001134 <HAL_Init+0x40>)
 8001116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f000 f94f 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	200f      	movs	r0, #15
 8001124:	f000 f808 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001128:	f7ff fdee 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023c00 	.word	0x40023c00

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_InitTick+0x54>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x58>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f967 	bl	800142a <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f000 f92f 	bl	80013d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	; (8001194 <HAL_InitTick+0x5c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000000 	.word	0x20000000
 8001190:	20000008 	.word	0x20000008
 8001194:	20000004 	.word	0x20000004

08001198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x20>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x24>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <HAL_IncTick+0x24>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000008 	.word	0x20000008
 80011bc:	200002e4 	.word	0x200002e4

080011c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <HAL_GetTick+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	200002e4 	.word	0x200002e4

080011d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff ffee 	bl	80011c0 <HAL_GetTick>
 80011e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f0:	d005      	beq.n	80011fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <HAL_Delay+0x44>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011fe:	bf00      	nop
 8001200:	f7ff ffde 	bl	80011c0 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	429a      	cmp	r2, r3
 800120e:	d8f7      	bhi.n	8001200 <HAL_Delay+0x28>
  {
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001252:	4a04      	ldr	r2, [pc, #16]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	60d3      	str	r3, [r2, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	2b00      	cmp	r3, #0
 8001294:	db0b      	blt.n	80012ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f003 021f 	and.w	r2, r3, #31
 800129c:	4907      	ldr	r1, [pc, #28]	; (80012bc <__NVIC_EnableIRQ+0x38>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	2001      	movs	r0, #1
 80012a6:	fa00 f202 	lsl.w	r2, r0, r2
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000e100 	.word	0xe000e100

080012c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db0a      	blt.n	80012ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	; (800130c <__NVIC_SetPriority+0x4c>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e8:	e00a      	b.n	8001300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4908      	ldr	r1, [pc, #32]	; (8001310 <__NVIC_SetPriority+0x50>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	3b04      	subs	r3, #4
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	761a      	strb	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
         );
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800138c:	d301      	bcc.n	8001392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138e:	2301      	movs	r3, #1
 8001390:	e00f      	b.n	80013b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <SysTick_Config+0x40>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139a:	210f      	movs	r1, #15
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f7ff ff8e 	bl	80012c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SysTick_Config+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <SysTick_Config+0x40>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff29 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e8:	f7ff ff3e 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff ff8e 	bl	8001314 <NVIC_EncodePriority>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff5d 	bl	80012c0 <__NVIC_SetPriority>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff31 	bl	8001284 <__NVIC_EnableIRQ>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffa2 	bl	800137c <SysTick_Config>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001450:	f7ff feb6 	bl	80011c0 <HAL_GetTick>
 8001454:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d008      	beq.n	8001474 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2280      	movs	r2, #128	; 0x80
 8001466:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e052      	b.n	800151a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0216 	bic.w	r2, r2, #22
 8001482:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001492:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	2b00      	cmp	r3, #0
 800149a:	d103      	bne.n	80014a4 <HAL_DMA_Abort+0x62>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d007      	beq.n	80014b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0208 	bic.w	r2, r2, #8
 80014b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0201 	bic.w	r2, r2, #1
 80014c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014c4:	e013      	b.n	80014ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014c6:	f7ff fe7b 	bl	80011c0 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b05      	cmp	r3, #5
 80014d2:	d90c      	bls.n	80014ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2220      	movs	r2, #32
 80014d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2203      	movs	r2, #3
 80014de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e015      	b.n	800151a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1e4      	bne.n	80014c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001500:	223f      	movs	r2, #63	; 0x3f
 8001502:	409a      	lsls	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d004      	beq.n	8001540 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2280      	movs	r2, #128	; 0x80
 800153a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e00c      	b.n	800155a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2205      	movs	r2, #5
 8001544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0201 	bic.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
 8001582:	e159      	b.n	8001838 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001584:	2201      	movs	r2, #1
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	429a      	cmp	r2, r3
 800159e:	f040 8148 	bne.w	8001832 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d005      	beq.n	80015ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d130      	bne.n	800161c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	2203      	movs	r2, #3
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f0:	2201      	movs	r2, #1
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	091b      	lsrs	r3, r3, #4
 8001606:	f003 0201 	and.w	r2, r3, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b03      	cmp	r3, #3
 8001626:	d017      	beq.n	8001658 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2203      	movs	r2, #3
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d123      	bne.n	80016ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	08da      	lsrs	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3208      	adds	r2, #8
 800166c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	08da      	lsrs	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3208      	adds	r2, #8
 80016a6:	69b9      	ldr	r1, [r7, #24]
 80016a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0203 	and.w	r2, r3, #3
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80a2 	beq.w	8001832 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b57      	ldr	r3, [pc, #348]	; (8001850 <HAL_GPIO_Init+0x2e8>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	4a56      	ldr	r2, [pc, #344]	; (8001850 <HAL_GPIO_Init+0x2e8>)
 80016f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fc:	6453      	str	r3, [r2, #68]	; 0x44
 80016fe:	4b54      	ldr	r3, [pc, #336]	; (8001850 <HAL_GPIO_Init+0x2e8>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800170a:	4a52      	ldr	r2, [pc, #328]	; (8001854 <HAL_GPIO_Init+0x2ec>)
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	3302      	adds	r3, #2
 8001712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	220f      	movs	r2, #15
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a49      	ldr	r2, [pc, #292]	; (8001858 <HAL_GPIO_Init+0x2f0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d019      	beq.n	800176a <HAL_GPIO_Init+0x202>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a48      	ldr	r2, [pc, #288]	; (800185c <HAL_GPIO_Init+0x2f4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d013      	beq.n	8001766 <HAL_GPIO_Init+0x1fe>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a47      	ldr	r2, [pc, #284]	; (8001860 <HAL_GPIO_Init+0x2f8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d00d      	beq.n	8001762 <HAL_GPIO_Init+0x1fa>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a46      	ldr	r2, [pc, #280]	; (8001864 <HAL_GPIO_Init+0x2fc>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d007      	beq.n	800175e <HAL_GPIO_Init+0x1f6>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a45      	ldr	r2, [pc, #276]	; (8001868 <HAL_GPIO_Init+0x300>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d101      	bne.n	800175a <HAL_GPIO_Init+0x1f2>
 8001756:	2304      	movs	r3, #4
 8001758:	e008      	b.n	800176c <HAL_GPIO_Init+0x204>
 800175a:	2307      	movs	r3, #7
 800175c:	e006      	b.n	800176c <HAL_GPIO_Init+0x204>
 800175e:	2303      	movs	r3, #3
 8001760:	e004      	b.n	800176c <HAL_GPIO_Init+0x204>
 8001762:	2302      	movs	r3, #2
 8001764:	e002      	b.n	800176c <HAL_GPIO_Init+0x204>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_GPIO_Init+0x204>
 800176a:	2300      	movs	r3, #0
 800176c:	69fa      	ldr	r2, [r7, #28]
 800176e:	f002 0203 	and.w	r2, r2, #3
 8001772:	0092      	lsls	r2, r2, #2
 8001774:	4093      	lsls	r3, r2
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800177c:	4935      	ldr	r1, [pc, #212]	; (8001854 <HAL_GPIO_Init+0x2ec>)
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	3302      	adds	r3, #2
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800178a:	4b38      	ldr	r3, [pc, #224]	; (800186c <HAL_GPIO_Init+0x304>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ae:	4a2f      	ldr	r2, [pc, #188]	; (800186c <HAL_GPIO_Init+0x304>)
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017b4:	4b2d      	ldr	r3, [pc, #180]	; (800186c <HAL_GPIO_Init+0x304>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017d8:	4a24      	ldr	r2, [pc, #144]	; (800186c <HAL_GPIO_Init+0x304>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017de:	4b23      	ldr	r3, [pc, #140]	; (800186c <HAL_GPIO_Init+0x304>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001802:	4a1a      	ldr	r2, [pc, #104]	; (800186c <HAL_GPIO_Init+0x304>)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_GPIO_Init+0x304>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800182c:	4a0f      	ldr	r2, [pc, #60]	; (800186c <HAL_GPIO_Init+0x304>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3301      	adds	r3, #1
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	2b0f      	cmp	r3, #15
 800183c:	f67f aea2 	bls.w	8001584 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3724      	adds	r7, #36	; 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	40013800 	.word	0x40013800
 8001858:	40020000 	.word	0x40020000
 800185c:	40020400 	.word	0x40020400
 8001860:	40020800 	.word	0x40020800
 8001864:	40020c00 	.word	0x40020c00
 8001868:	40021000 	.word	0x40021000
 800186c:	40013c00 	.word	0x40013c00

08001870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
 800187c:	4613      	mov	r3, r2
 800187e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001880:	787b      	ldrb	r3, [r7, #1]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800188c:	e003      	b.n	8001896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	041a      	lsls	r2, r3, #16
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	619a      	str	r2, [r3, #24]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e12b      	b.n	8001b0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d106      	bne.n	80018d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff fa44 	bl	8000d58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2224      	movs	r2, #36	; 0x24
 80018d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001908:	f000 fd40 	bl	800238c <HAL_RCC_GetPCLK1Freq>
 800190c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4a81      	ldr	r2, [pc, #516]	; (8001b18 <HAL_I2C_Init+0x274>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d807      	bhi.n	8001928 <HAL_I2C_Init+0x84>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4a80      	ldr	r2, [pc, #512]	; (8001b1c <HAL_I2C_Init+0x278>)
 800191c:	4293      	cmp	r3, r2
 800191e:	bf94      	ite	ls
 8001920:	2301      	movls	r3, #1
 8001922:	2300      	movhi	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	e006      	b.n	8001936 <HAL_I2C_Init+0x92>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4a7d      	ldr	r2, [pc, #500]	; (8001b20 <HAL_I2C_Init+0x27c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	bf94      	ite	ls
 8001930:	2301      	movls	r3, #1
 8001932:	2300      	movhi	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e0e7      	b.n	8001b0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4a78      	ldr	r2, [pc, #480]	; (8001b24 <HAL_I2C_Init+0x280>)
 8001942:	fba2 2303 	umull	r2, r3, r2, r3
 8001946:	0c9b      	lsrs	r3, r3, #18
 8001948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	430a      	orrs	r2, r1
 800195c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	4a6a      	ldr	r2, [pc, #424]	; (8001b18 <HAL_I2C_Init+0x274>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d802      	bhi.n	8001978 <HAL_I2C_Init+0xd4>
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	3301      	adds	r3, #1
 8001976:	e009      	b.n	800198c <HAL_I2C_Init+0xe8>
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800197e:	fb02 f303 	mul.w	r3, r2, r3
 8001982:	4a69      	ldr	r2, [pc, #420]	; (8001b28 <HAL_I2C_Init+0x284>)
 8001984:	fba2 2303 	umull	r2, r3, r2, r3
 8001988:	099b      	lsrs	r3, r3, #6
 800198a:	3301      	adds	r3, #1
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	430b      	orrs	r3, r1
 8001992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800199e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	495c      	ldr	r1, [pc, #368]	; (8001b18 <HAL_I2C_Init+0x274>)
 80019a8:	428b      	cmp	r3, r1
 80019aa:	d819      	bhi.n	80019e0 <HAL_I2C_Init+0x13c>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1e59      	subs	r1, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ba:	1c59      	adds	r1, r3, #1
 80019bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019c0:	400b      	ands	r3, r1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00a      	beq.n	80019dc <HAL_I2C_Init+0x138>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1e59      	subs	r1, r3, #1
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80019d4:	3301      	adds	r3, #1
 80019d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019da:	e051      	b.n	8001a80 <HAL_I2C_Init+0x1dc>
 80019dc:	2304      	movs	r3, #4
 80019de:	e04f      	b.n	8001a80 <HAL_I2C_Init+0x1dc>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d111      	bne.n	8001a0c <HAL_I2C_Init+0x168>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	1e58      	subs	r0, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6859      	ldr	r1, [r3, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	440b      	add	r3, r1
 80019f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019fa:	3301      	adds	r3, #1
 80019fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bf0c      	ite	eq
 8001a04:	2301      	moveq	r3, #1
 8001a06:	2300      	movne	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	e012      	b.n	8001a32 <HAL_I2C_Init+0x18e>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1e58      	subs	r0, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6859      	ldr	r1, [r3, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	0099      	lsls	r1, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a22:	3301      	adds	r3, #1
 8001a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf0c      	ite	eq
 8001a2c:	2301      	moveq	r3, #1
 8001a2e:	2300      	movne	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_I2C_Init+0x196>
 8001a36:	2301      	movs	r3, #1
 8001a38:	e022      	b.n	8001a80 <HAL_I2C_Init+0x1dc>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10e      	bne.n	8001a60 <HAL_I2C_Init+0x1bc>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1e58      	subs	r0, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6859      	ldr	r1, [r3, #4]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	440b      	add	r3, r1
 8001a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a54:	3301      	adds	r3, #1
 8001a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a5e:	e00f      	b.n	8001a80 <HAL_I2C_Init+0x1dc>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	1e58      	subs	r0, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6859      	ldr	r1, [r3, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	0099      	lsls	r1, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a76:	3301      	adds	r3, #1
 8001a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	6809      	ldr	r1, [r1, #0]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69da      	ldr	r2, [r3, #28]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001aae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6911      	ldr	r1, [r2, #16]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68d2      	ldr	r2, [r2, #12]
 8001aba:	4311      	orrs	r1, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695a      	ldr	r2, [r3, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0201 	orr.w	r2, r2, #1
 8001aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2220      	movs	r2, #32
 8001afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	000186a0 	.word	0x000186a0
 8001b1c:	001e847f 	.word	0x001e847f
 8001b20:	003d08ff 	.word	0x003d08ff
 8001b24:	431bde83 	.word	0x431bde83
 8001b28:	10624dd3 	.word	0x10624dd3

08001b2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e267      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d075      	beq.n	8001c36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b4a:	4b88      	ldr	r3, [pc, #544]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d00c      	beq.n	8001b70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b56:	4b85      	ldr	r3, [pc, #532]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d112      	bne.n	8001b88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b62:	4b82      	ldr	r3, [pc, #520]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b6e:	d10b      	bne.n	8001b88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b70:	4b7e      	ldr	r3, [pc, #504]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d05b      	beq.n	8001c34 <HAL_RCC_OscConfig+0x108>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d157      	bne.n	8001c34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e242      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b90:	d106      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x74>
 8001b92:	4b76      	ldr	r3, [pc, #472]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a75      	ldr	r2, [pc, #468]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e01d      	b.n	8001bdc <HAL_RCC_OscConfig+0xb0>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x98>
 8001baa:	4b70      	ldr	r3, [pc, #448]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a6f      	ldr	r2, [pc, #444]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b6d      	ldr	r3, [pc, #436]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a6c      	ldr	r2, [pc, #432]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e00b      	b.n	8001bdc <HAL_RCC_OscConfig+0xb0>
 8001bc4:	4b69      	ldr	r3, [pc, #420]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a68      	ldr	r2, [pc, #416]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b66      	ldr	r3, [pc, #408]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a65      	ldr	r2, [pc, #404]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d013      	beq.n	8001c0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff faec 	bl	80011c0 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff fae8 	bl	80011c0 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e207      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	4b5b      	ldr	r3, [pc, #364]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0xc0>
 8001c0a:	e014      	b.n	8001c36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fad8 	bl	80011c0 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff fad4 	bl	80011c0 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e1f3      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c26:	4b51      	ldr	r3, [pc, #324]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0xe8>
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d063      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c42:	4b4a      	ldr	r3, [pc, #296]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00b      	beq.n	8001c66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c4e:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d11c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c5a:	4b44      	ldr	r3, [pc, #272]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d116      	bne.n	8001c94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c66:	4b41      	ldr	r3, [pc, #260]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <HAL_RCC_OscConfig+0x152>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d001      	beq.n	8001c7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e1c7      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7e:	4b3b      	ldr	r3, [pc, #236]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4937      	ldr	r1, [pc, #220]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c92:	e03a      	b.n	8001d0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d020      	beq.n	8001cde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9c:	4b34      	ldr	r3, [pc, #208]	; (8001d70 <HAL_RCC_OscConfig+0x244>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca2:	f7ff fa8d 	bl	80011c0 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001caa:	f7ff fa89 	bl	80011c0 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e1a8      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc8:	4b28      	ldr	r3, [pc, #160]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4925      	ldr	r1, [pc, #148]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	600b      	str	r3, [r1, #0]
 8001cdc:	e015      	b.n	8001d0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cde:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <HAL_RCC_OscConfig+0x244>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fa6c 	bl	80011c0 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cec:	f7ff fa68 	bl	80011c0 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e187      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d036      	beq.n	8001d84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d016      	beq.n	8001d4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_RCC_OscConfig+0x248>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d24:	f7ff fa4c 	bl	80011c0 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2c:	f7ff fa48 	bl	80011c0 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e167      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x200>
 8001d4a:	e01b      	b.n	8001d84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_RCC_OscConfig+0x248>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d52:	f7ff fa35 	bl	80011c0 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d58:	e00e      	b.n	8001d78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d5a:	f7ff fa31 	bl	80011c0 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d907      	bls.n	8001d78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e150      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	42470000 	.word	0x42470000
 8001d74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d78:	4b88      	ldr	r3, [pc, #544]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1ea      	bne.n	8001d5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 8097 	beq.w	8001ec0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d96:	4b81      	ldr	r3, [pc, #516]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10f      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	4b7d      	ldr	r3, [pc, #500]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	4a7c      	ldr	r2, [pc, #496]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db0:	6413      	str	r3, [r2, #64]	; 0x40
 8001db2:	4b7a      	ldr	r3, [pc, #488]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc2:	4b77      	ldr	r3, [pc, #476]	; (8001fa0 <HAL_RCC_OscConfig+0x474>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d118      	bne.n	8001e00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dce:	4b74      	ldr	r3, [pc, #464]	; (8001fa0 <HAL_RCC_OscConfig+0x474>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a73      	ldr	r2, [pc, #460]	; (8001fa0 <HAL_RCC_OscConfig+0x474>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dda:	f7ff f9f1 	bl	80011c0 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de2:	f7ff f9ed 	bl	80011c0 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e10c      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df4:	4b6a      	ldr	r3, [pc, #424]	; (8001fa0 <HAL_RCC_OscConfig+0x474>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x2ea>
 8001e08:	4b64      	ldr	r3, [pc, #400]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0c:	4a63      	ldr	r2, [pc, #396]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6713      	str	r3, [r2, #112]	; 0x70
 8001e14:	e01c      	b.n	8001e50 <HAL_RCC_OscConfig+0x324>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x30c>
 8001e1e:	4b5f      	ldr	r3, [pc, #380]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e22:	4a5e      	ldr	r2, [pc, #376]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2a:	4b5c      	ldr	r3, [pc, #368]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2e:	4a5b      	ldr	r2, [pc, #364]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6713      	str	r3, [r2, #112]	; 0x70
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0x324>
 8001e38:	4b58      	ldr	r3, [pc, #352]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3c:	4a57      	ldr	r2, [pc, #348]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e3e:	f023 0301 	bic.w	r3, r3, #1
 8001e42:	6713      	str	r3, [r2, #112]	; 0x70
 8001e44:	4b55      	ldr	r3, [pc, #340]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e48:	4a54      	ldr	r2, [pc, #336]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e4a:	f023 0304 	bic.w	r3, r3, #4
 8001e4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d015      	beq.n	8001e84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7ff f9b2 	bl	80011c0 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e60:	f7ff f9ae 	bl	80011c0 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e0cb      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e76:	4b49      	ldr	r3, [pc, #292]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0ee      	beq.n	8001e60 <HAL_RCC_OscConfig+0x334>
 8001e82:	e014      	b.n	8001eae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e84:	f7ff f99c 	bl	80011c0 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7ff f998 	bl	80011c0 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e0b5      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea2:	4b3e      	ldr	r3, [pc, #248]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ee      	bne.n	8001e8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb4:	4b39      	ldr	r3, [pc, #228]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	4a38      	ldr	r2, [pc, #224]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80a1 	beq.w	800200c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eca:	4b34      	ldr	r3, [pc, #208]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d05c      	beq.n	8001f90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d141      	bne.n	8001f62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ede:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <HAL_RCC_OscConfig+0x478>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7ff f96c 	bl	80011c0 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eec:	f7ff f968 	bl	80011c0 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e087      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efe:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	019b      	lsls	r3, r3, #6
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	085b      	lsrs	r3, r3, #1
 8001f22:	3b01      	subs	r3, #1
 8001f24:	041b      	lsls	r3, r3, #16
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	061b      	lsls	r3, r3, #24
 8001f2e:	491b      	ldr	r1, [pc, #108]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f34:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <HAL_RCC_OscConfig+0x478>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7ff f941 	bl	80011c0 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f42:	f7ff f93d 	bl	80011c0 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e05c      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x416>
 8001f60:	e054      	b.n	800200c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <HAL_RCC_OscConfig+0x478>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7ff f92a 	bl	80011c0 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f70:	f7ff f926 	bl	80011c0 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e045      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x444>
 8001f8e:	e03d      	b.n	800200c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e038      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40007000 	.word	0x40007000
 8001fa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <HAL_RCC_OscConfig+0x4ec>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d028      	beq.n	8002008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d121      	bne.n	8002008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d11a      	bne.n	8002008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fd8:	4013      	ands	r3, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d111      	bne.n	8002008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fee:	085b      	lsrs	r3, r3, #1
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d107      	bne.n	8002008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800

0800201c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0cc      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002030:	4b68      	ldr	r3, [pc, #416]	; (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d90c      	bls.n	8002058 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203e:	4b65      	ldr	r3, [pc, #404]	; (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002046:	4b63      	ldr	r3, [pc, #396]	; (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d001      	beq.n	8002058 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0b8      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d020      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002070:	4b59      	ldr	r3, [pc, #356]	; (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	4a58      	ldr	r2, [pc, #352]	; (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800207a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002088:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4a52      	ldr	r2, [pc, #328]	; (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002092:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002094:	4b50      	ldr	r3, [pc, #320]	; (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	494d      	ldr	r1, [pc, #308]	; (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d044      	beq.n	800213c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d107      	bne.n	80020ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	4b47      	ldr	r3, [pc, #284]	; (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d119      	bne.n	80020fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e07f      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d003      	beq.n	80020da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d107      	bne.n	80020ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020da:	4b3f      	ldr	r3, [pc, #252]	; (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e06f      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ea:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e067      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020fa:	4b37      	ldr	r3, [pc, #220]	; (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f023 0203 	bic.w	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	4934      	ldr	r1, [pc, #208]	; (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	4313      	orrs	r3, r2
 800210a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800210c:	f7ff f858 	bl	80011c0 <HAL_GetTick>
 8002110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	e00a      	b.n	800212a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002114:	f7ff f854 	bl	80011c0 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002122:	4293      	cmp	r3, r2
 8002124:	d901      	bls.n	800212a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e04f      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212a:	4b2b      	ldr	r3, [pc, #172]	; (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 020c 	and.w	r2, r3, #12
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	429a      	cmp	r2, r3
 800213a:	d1eb      	bne.n	8002114 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800213c:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d20c      	bcs.n	8002164 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214a:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e032      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002170:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4916      	ldr	r1, [pc, #88]	; (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	490e      	ldr	r1, [pc, #56]	; (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021a2:	f000 f821 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 80021a6:	4602      	mov	r2, r0
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	490a      	ldr	r1, [pc, #40]	; (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	5ccb      	ldrb	r3, [r1, r3]
 80021b6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ba:	4a09      	ldr	r2, [pc, #36]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe ffb8 	bl	8001138 <HAL_InitTick>

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40023c00 	.word	0x40023c00
 80021d8:	40023800 	.word	0x40023800
 80021dc:	0800526c 	.word	0x0800526c
 80021e0:	20000000 	.word	0x20000000
 80021e4:	20000004 	.word	0x20000004

080021e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021ec:	b090      	sub	sp, #64	; 0x40
 80021ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	637b      	str	r3, [r7, #52]	; 0x34
 80021f4:	2300      	movs	r3, #0
 80021f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021f8:	2300      	movs	r3, #0
 80021fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002200:	4b59      	ldr	r3, [pc, #356]	; (8002368 <HAL_RCC_GetSysClockFreq+0x180>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b08      	cmp	r3, #8
 800220a:	d00d      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x40>
 800220c:	2b08      	cmp	r3, #8
 800220e:	f200 80a1 	bhi.w	8002354 <HAL_RCC_GetSysClockFreq+0x16c>
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x34>
 8002216:	2b04      	cmp	r3, #4
 8002218:	d003      	beq.n	8002222 <HAL_RCC_GetSysClockFreq+0x3a>
 800221a:	e09b      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800221c:	4b53      	ldr	r3, [pc, #332]	; (800236c <HAL_RCC_GetSysClockFreq+0x184>)
 800221e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002220:	e09b      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002222:	4b53      	ldr	r3, [pc, #332]	; (8002370 <HAL_RCC_GetSysClockFreq+0x188>)
 8002224:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002226:	e098      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002228:	4b4f      	ldr	r3, [pc, #316]	; (8002368 <HAL_RCC_GetSysClockFreq+0x180>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002230:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002232:	4b4d      	ldr	r3, [pc, #308]	; (8002368 <HAL_RCC_GetSysClockFreq+0x180>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d028      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800223e:	4b4a      	ldr	r3, [pc, #296]	; (8002368 <HAL_RCC_GetSysClockFreq+0x180>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	099b      	lsrs	r3, r3, #6
 8002244:	2200      	movs	r2, #0
 8002246:	623b      	str	r3, [r7, #32]
 8002248:	627a      	str	r2, [r7, #36]	; 0x24
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002250:	2100      	movs	r1, #0
 8002252:	4b47      	ldr	r3, [pc, #284]	; (8002370 <HAL_RCC_GetSysClockFreq+0x188>)
 8002254:	fb03 f201 	mul.w	r2, r3, r1
 8002258:	2300      	movs	r3, #0
 800225a:	fb00 f303 	mul.w	r3, r0, r3
 800225e:	4413      	add	r3, r2
 8002260:	4a43      	ldr	r2, [pc, #268]	; (8002370 <HAL_RCC_GetSysClockFreq+0x188>)
 8002262:	fba0 1202 	umull	r1, r2, r0, r2
 8002266:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002268:	460a      	mov	r2, r1
 800226a:	62ba      	str	r2, [r7, #40]	; 0x28
 800226c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800226e:	4413      	add	r3, r2
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002274:	2200      	movs	r2, #0
 8002276:	61bb      	str	r3, [r7, #24]
 8002278:	61fa      	str	r2, [r7, #28]
 800227a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800227e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002282:	f7fd fffd 	bl	8000280 <__aeabi_uldivmod>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4613      	mov	r3, r2
 800228c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800228e:	e053      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002290:	4b35      	ldr	r3, [pc, #212]	; (8002368 <HAL_RCC_GetSysClockFreq+0x180>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	099b      	lsrs	r3, r3, #6
 8002296:	2200      	movs	r2, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	617a      	str	r2, [r7, #20]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022a2:	f04f 0b00 	mov.w	fp, #0
 80022a6:	4652      	mov	r2, sl
 80022a8:	465b      	mov	r3, fp
 80022aa:	f04f 0000 	mov.w	r0, #0
 80022ae:	f04f 0100 	mov.w	r1, #0
 80022b2:	0159      	lsls	r1, r3, #5
 80022b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022b8:	0150      	lsls	r0, r2, #5
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	ebb2 080a 	subs.w	r8, r2, sl
 80022c2:	eb63 090b 	sbc.w	r9, r3, fp
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022da:	ebb2 0408 	subs.w	r4, r2, r8
 80022de:	eb63 0509 	sbc.w	r5, r3, r9
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	00eb      	lsls	r3, r5, #3
 80022ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022f0:	00e2      	lsls	r2, r4, #3
 80022f2:	4614      	mov	r4, r2
 80022f4:	461d      	mov	r5, r3
 80022f6:	eb14 030a 	adds.w	r3, r4, sl
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	eb45 030b 	adc.w	r3, r5, fp
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800230e:	4629      	mov	r1, r5
 8002310:	028b      	lsls	r3, r1, #10
 8002312:	4621      	mov	r1, r4
 8002314:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002318:	4621      	mov	r1, r4
 800231a:	028a      	lsls	r2, r1, #10
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002322:	2200      	movs	r2, #0
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	60fa      	str	r2, [r7, #12]
 8002328:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800232c:	f7fd ffa8 	bl	8000280 <__aeabi_uldivmod>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4613      	mov	r3, r2
 8002336:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCC_GetSysClockFreq+0x180>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	0c1b      	lsrs	r3, r3, #16
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	3301      	adds	r3, #1
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002348:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800234a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002350:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002352:	e002      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_RCC_GetSysClockFreq+0x184>)
 8002356:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800235a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800235c:	4618      	mov	r0, r3
 800235e:	3740      	adds	r7, #64	; 0x40
 8002360:	46bd      	mov	sp, r7
 8002362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	00f42400 	.word	0x00f42400
 8002370:	017d7840 	.word	0x017d7840

08002374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002378:	4b03      	ldr	r3, [pc, #12]	; (8002388 <HAL_RCC_GetHCLKFreq+0x14>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20000000 	.word	0x20000000

0800238c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002390:	f7ff fff0 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	0a9b      	lsrs	r3, r3, #10
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	4903      	ldr	r1, [pc, #12]	; (80023b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a2:	5ccb      	ldrb	r3, [r1, r3]
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40023800 	.word	0x40023800
 80023b0:	0800527c 	.word	0x0800527c

080023b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023b8:	f7ff ffdc 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 80023bc:	4602      	mov	r2, r0
 80023be:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	0b5b      	lsrs	r3, r3, #13
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	4903      	ldr	r1, [pc, #12]	; (80023d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ca:	5ccb      	ldrb	r3, [r1, r3]
 80023cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40023800 	.word	0x40023800
 80023d8:	0800527c 	.word	0x0800527c

080023dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e07b      	b.n	80024e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d108      	bne.n	8002408 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023fe:	d009      	beq.n	8002414 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]
 8002406:	e005      	b.n	8002414 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe fcda 	bl	8000de8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800244a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002498:	ea42 0103 	orr.w	r1, r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	0c1b      	lsrs	r3, r3, #16
 80024b2:	f003 0104 	and.w	r1, r3, #4
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	f003 0210 	and.w	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	69da      	ldr	r2, [r3, #28]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	4613      	mov	r3, r2
 80024fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_SPI_Transmit_IT+0x20>
 800250c:	2302      	movs	r3, #2
 800250e:	e06f      	b.n	80025f0 <HAL_SPI_Transmit_IT+0x100>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <HAL_SPI_Transmit_IT+0x34>
 800251e:	88fb      	ldrh	r3, [r7, #6]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002528:	e05d      	b.n	80025e6 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d002      	beq.n	800253c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8002536:	2302      	movs	r3, #2
 8002538:	75fb      	strb	r3, [r7, #23]
    goto error;
 800253a:	e054      	b.n	80025e6 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2203      	movs	r2, #3
 8002540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	88fa      	ldrh	r2, [r7, #6]
 8002554:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	88fa      	ldrh	r2, [r7, #6]
 800255a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4a1f      	ldr	r2, [pc, #124]	; (80025fc <HAL_SPI_Transmit_IT+0x10c>)
 8002580:	645a      	str	r2, [r3, #68]	; 0x44
 8002582:	e002      	b.n	800258a <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4a1e      	ldr	r2, [pc, #120]	; (8002600 <HAL_SPI_Transmit_IT+0x110>)
 8002588:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002592:	d10f      	bne.n	80025b4 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80025c2:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ce:	2b40      	cmp	r3, #64	; 0x40
 80025d0:	d008      	beq.n	80025e4 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	e000      	b.n	80025e6 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 80025e4:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	371c      	adds	r7, #28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	08002d11 	.word	0x08002d11
 8002600:	08002ccb 	.word	0x08002ccb

08002604 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	4613      	mov	r3, r2
 8002610:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d110      	bne.n	8002640 <HAL_SPI_Receive_IT+0x3c>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002626:	d10b      	bne.n	8002640 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2204      	movs	r2, #4
 800262c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f882 	bl	8002740 <HAL_SPI_TransmitReceive_IT>
 800263c:	4603      	mov	r3, r0
 800263e:	e076      	b.n	800272e <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_SPI_Receive_IT+0x4a>
 800264a:	2302      	movs	r3, #2
 800264c:	e06f      	b.n	800272e <HAL_SPI_Receive_IT+0x12a>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d002      	beq.n	8002668 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8002662:	2302      	movs	r3, #2
 8002664:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002666:	e05d      	b.n	8002724 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_SPI_Receive_IT+0x70>
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d102      	bne.n	800267a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002678:	e054      	b.n	8002724 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2204      	movs	r2, #4
 800267e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	88fa      	ldrh	r2, [r7, #6]
 8002692:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	88fa      	ldrh	r2, [r7, #6]
 8002698:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <HAL_SPI_Receive_IT+0x134>)
 80026be:	641a      	str	r2, [r3, #64]	; 0x40
 80026c0:	e002      	b.n	80026c8 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4a1d      	ldr	r2, [pc, #116]	; (800273c <HAL_SPI_Receive_IT+0x138>)
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026d0:	d10f      	bne.n	80026f2 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002700:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270c:	2b40      	cmp	r3, #64	; 0x40
 800270e:	d008      	beq.n	8002722 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e000      	b.n	8002724 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8002722:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800272c:	7dfb      	ldrb	r3, [r7, #23]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	08002c85 	.word	0x08002c85
 800273c:	08002c3b 	.word	0x08002c3b

08002740 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_SPI_TransmitReceive_IT+0x20>
 800275c:	2302      	movs	r3, #2
 800275e:	e075      	b.n	800284c <HAL_SPI_TransmitReceive_IT+0x10c>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800276e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002776:	7dbb      	ldrb	r3, [r7, #22]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d00d      	beq.n	8002798 <HAL_SPI_TransmitReceive_IT+0x58>
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002782:	d106      	bne.n	8002792 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <HAL_SPI_TransmitReceive_IT+0x52>
 800278c:	7dbb      	ldrb	r3, [r7, #22]
 800278e:	2b04      	cmp	r3, #4
 8002790:	d002      	beq.n	8002798 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002792:	2302      	movs	r3, #2
 8002794:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002796:	e054      	b.n	8002842 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <HAL_SPI_TransmitReceive_IT+0x6a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <HAL_SPI_TransmitReceive_IT+0x6a>
 80027a4:	887b      	ldrh	r3, [r7, #2]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d102      	bne.n	80027b0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027ae:	e048      	b.n	8002842 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d003      	beq.n	80027c4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2205      	movs	r2, #5
 80027c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	887a      	ldrh	r2, [r7, #2]
 80027d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	887a      	ldrh	r2, [r7, #2]
 80027da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	887a      	ldrh	r2, [r7, #2]
 80027e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d006      	beq.n	8002804 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4a17      	ldr	r2, [pc, #92]	; (8002858 <HAL_SPI_TransmitReceive_IT+0x118>)
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4a17      	ldr	r2, [pc, #92]	; (800285c <HAL_SPI_TransmitReceive_IT+0x11c>)
 8002800:	645a      	str	r2, [r3, #68]	; 0x44
 8002802:	e005      	b.n	8002810 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4a16      	ldr	r2, [pc, #88]	; (8002860 <HAL_SPI_TransmitReceive_IT+0x120>)
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4a15      	ldr	r2, [pc, #84]	; (8002864 <HAL_SPI_TransmitReceive_IT+0x124>)
 800280e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800281e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282a:	2b40      	cmp	r3, #64	; 0x40
 800282c:	d008      	beq.n	8002840 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	e000      	b.n	8002842 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8002840:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800284a:	7dfb      	ldrb	r3, [r7, #23]
}
 800284c:	4618      	mov	r0, r3
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	08002b7d 	.word	0x08002b7d
 800285c:	08002bdd 	.word	0x08002bdd
 8002860:	08002ab9 	.word	0x08002ab9
 8002864:	08002b1d 	.word	0x08002b1d

08002868 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	099b      	lsrs	r3, r3, #6
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10f      	bne.n	80028ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	099b      	lsrs	r3, r3, #6
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d004      	beq.n	80028ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	4798      	blx	r3
    return;
 80028aa:	e0d7      	b.n	8002a5c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	085b      	lsrs	r3, r3, #1
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <HAL_SPI_IRQHandler+0x66>
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	09db      	lsrs	r3, r3, #7
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d004      	beq.n	80028ce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4798      	blx	r3
    return;
 80028cc:	e0c6      	b.n	8002a5c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10c      	bne.n	80028f4 <HAL_SPI_IRQHandler+0x8c>
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	099b      	lsrs	r3, r3, #6
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 80b4 	beq.w	8002a5c <HAL_SPI_IRQHandler+0x1f4>
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80ad 	beq.w	8002a5c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	099b      	lsrs	r3, r3, #6
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d023      	beq.n	8002956 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b03      	cmp	r3, #3
 8002918:	d011      	beq.n	800293e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291e:	f043 0204 	orr.w	r2, r3, #4
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	e00b      	b.n	8002956 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	693b      	ldr	r3, [r7, #16]
        return;
 8002954:	e082      	b.n	8002a5c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d014      	beq.n	800298c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00c      	beq.n	80029b2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	f043 0208 	orr.w	r2, r3, #8
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80029a4:	2300      	movs	r3, #0
 80029a6:	60bb      	str	r3, [r7, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d04f      	beq.n	8002a5a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029c8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d104      	bne.n	80029e6 <HAL_SPI_IRQHandler+0x17e>
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d034      	beq.n	8002a50 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0203 	bic.w	r2, r2, #3
 80029f4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d011      	beq.n	8002a22 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a02:	4a18      	ldr	r2, [pc, #96]	; (8002a64 <HAL_SPI_IRQHandler+0x1fc>)
 8002a04:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe fd89 	bl	8001522 <HAL_DMA_Abort_IT>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d005      	beq.n	8002a22 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d016      	beq.n	8002a58 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2e:	4a0d      	ldr	r2, [pc, #52]	; (8002a64 <HAL_SPI_IRQHandler+0x1fc>)
 8002a30:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe fd73 	bl	8001522 <HAL_DMA_Abort_IT>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002a4e:	e003      	b.n	8002a58 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f813 	bl	8002a7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002a56:	e000      	b.n	8002a5a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002a58:	bf00      	nop
    return;
 8002a5a:	bf00      	nop
  }
}
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	08002a91 	.word	0x08002a91

08002a68 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f7ff ffe6 	bl	8002a7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ab0:	bf00      	nop
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f103 020c 	add.w	r2, r3, #12
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002acc:	7812      	ldrb	r2, [r2, #0]
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10f      	bne.n	8002b14 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b02:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d102      	bne.n	8002b14 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 fa50 	bl	8002fb4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	330c      	adds	r3, #12
 8002b2e:	7812      	ldrb	r2, [r2, #0]
 8002b30:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10f      	bne.n	8002b74 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b62:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d102      	bne.n	8002b74 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fa20 	bl	8002fb4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	b292      	uxth	r2, r2
 8002b90:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b96:	1c9a      	adds	r2, r3, #2
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10f      	bne.n	8002bd4 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bc2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d102      	bne.n	8002bd4 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f9f0 	bl	8002fb4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	881a      	ldrh	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	1c9a      	adds	r2, r3, #2
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10f      	bne.n	8002c32 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c20:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d102      	bne.n	8002c32 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f9c1 	bl	8002fb4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f103 020c 	add.w	r2, r3, #12
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	7812      	ldrb	r2, [r2, #0]
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d102      	bne.n	8002c7c <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fa10 	bl	800309c <SPI_CloseRx_ISR>
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	b292      	uxth	r2, r2
 8002c98:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9e:	1c9a      	adds	r2, r3, #2
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d102      	bne.n	8002cc2 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f9ed 	bl	800309c <SPI_CloseRx_ISR>
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	330c      	adds	r3, #12
 8002cdc:	7812      	ldrb	r2, [r2, #0]
 8002cde:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d102      	bne.n	8002d08 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fa0a 	bl	800311c <SPI_CloseTx_ISR>
  }
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	881a      	ldrh	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	1c9a      	adds	r2, r3, #2
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d102      	bne.n	8002d4c <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f9e8 	bl	800311c <SPI_CloseTx_ISR>
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	4613      	mov	r3, r2
 8002d62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d64:	f7fe fa2c 	bl	80011c0 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d74:	f7fe fa24 	bl	80011c0 <HAL_GetTick>
 8002d78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d7a:	4b39      	ldr	r3, [pc, #228]	; (8002e60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	015b      	lsls	r3, r3, #5
 8002d80:	0d1b      	lsrs	r3, r3, #20
 8002d82:	69fa      	ldr	r2, [r7, #28]
 8002d84:	fb02 f303 	mul.w	r3, r2, r3
 8002d88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d8a:	e054      	b.n	8002e36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d92:	d050      	beq.n	8002e36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d94:	f7fe fa14 	bl	80011c0 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d902      	bls.n	8002daa <SPI_WaitFlagStateUntilTimeout+0x56>
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d13d      	bne.n	8002e26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002db8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dc2:	d111      	bne.n	8002de8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dcc:	d004      	beq.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd6:	d107      	bne.n	8002de8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002de6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df0:	d10f      	bne.n	8002e12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e017      	b.n	8002e56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	bf0c      	ite	eq
 8002e46:	2301      	moveq	r3, #1
 8002e48:	2300      	movne	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d19b      	bne.n	8002d8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000000 	.word	0x20000000

08002e64 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e78:	d111      	bne.n	8002e9e <SPI_EndRxTransaction+0x3a>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e82:	d004      	beq.n	8002e8e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8c:	d107      	bne.n	8002e9e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e9c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ea6:	d12a      	bne.n	8002efe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb0:	d012      	beq.n	8002ed8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2180      	movs	r1, #128	; 0x80
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f7ff ff49 	bl	8002d54 <SPI_WaitFlagStateUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d02d      	beq.n	8002f24 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e026      	b.n	8002f26 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f7ff ff36 	bl	8002d54 <SPI_WaitFlagStateUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d01a      	beq.n	8002f24 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef2:	f043 0220 	orr.w	r2, r3, #32
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e013      	b.n	8002f26 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2200      	movs	r2, #0
 8002f06:	2101      	movs	r1, #1
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f7ff ff23 	bl	8002d54 <SPI_WaitFlagStateUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d007      	beq.n	8002f24 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	f043 0220 	orr.w	r2, r3, #32
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e000      	b.n	8002f26 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <SPI_EndRxTxTransaction+0x7c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1b      	ldr	r2, [pc, #108]	; (8002fb0 <SPI_EndRxTxTransaction+0x80>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	0d5b      	lsrs	r3, r3, #21
 8002f48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f4c:	fb02 f303 	mul.w	r3, r2, r3
 8002f50:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f5a:	d112      	bne.n	8002f82 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2200      	movs	r2, #0
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f7ff fef4 	bl	8002d54 <SPI_WaitFlagStateUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d016      	beq.n	8002fa0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f76:	f043 0220 	orr.w	r2, r3, #32
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e00f      	b.n	8002fa2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f98:	2b80      	cmp	r3, #128	; 0x80
 8002f9a:	d0f2      	beq.n	8002f82 <SPI_EndRxTxTransaction+0x52>
 8002f9c:	e000      	b.n	8002fa0 <SPI_EndRxTxTransaction+0x70>
        break;
 8002f9e:	bf00      	nop
  }

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000000 	.word	0x20000000
 8002fb0:	165e9f81 	.word	0x165e9f81

08002fb4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002fbc:	4b35      	ldr	r3, [pc, #212]	; (8003094 <SPI_CloseRxTx_ISR+0xe0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a35      	ldr	r2, [pc, #212]	; (8003098 <SPI_CloseRxTx_ISR+0xe4>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	0a5b      	lsrs	r3, r3, #9
 8002fc8:	2264      	movs	r2, #100	; 0x64
 8002fca:	fb02 f303 	mul.w	r3, r2, r3
 8002fce:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fd0:	f7fe f8f6 	bl	80011c0 <HAL_GetTick>
 8002fd4:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0220 	bic.w	r2, r2, #32
 8002fe4:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d106      	bne.n	8002ffa <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ff8:	e009      	b.n	800300e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0eb      	beq.n	8002fe6 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	2164      	movs	r1, #100	; 0x64
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff ff8c 	bl	8002f30 <SPI_EndRxTxTransaction>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003022:	f043 0220 	orr.w	r2, r3, #32
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304c:	2b00      	cmp	r3, #0
 800304e:	d115      	bne.n	800307c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b04      	cmp	r3, #4
 800305a:	d107      	bne.n	800306c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7fd fb89 	bl	800077c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800306a:	e00e      	b.n	800308a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff fcf7 	bl	8002a68 <HAL_SPI_TxRxCpltCallback>
}
 800307a:	e006      	b.n	800308a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff fcf9 	bl	8002a7c <HAL_SPI_ErrorCallback>
}
 800308a:	bf00      	nop
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000000 	.word	0x20000000
 8003098:	057619f1 	.word	0x057619f1

0800309c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030b2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80030b4:	f7fe f884 	bl	80011c0 <HAL_GetTick>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	2164      	movs	r1, #100	; 0x64
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff fed0 	bl	8002e64 <SPI_EndRxTransaction>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d005      	beq.n	80030d6 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ce:	f043 0220 	orr.w	r2, r3, #32
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10a      	bne.n	80030f4 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003100:	2b00      	cmp	r3, #0
 8003102:	d103      	bne.n	800310c <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7fd fb39 	bl	800077c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800310a:	e002      	b.n	8003112 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff fcb5 	bl	8002a7c <HAL_SPI_ErrorCallback>
}
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003124:	4b2c      	ldr	r3, [pc, #176]	; (80031d8 <SPI_CloseTx_ISR+0xbc>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a2c      	ldr	r2, [pc, #176]	; (80031dc <SPI_CloseTx_ISR+0xc0>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	0a5b      	lsrs	r3, r3, #9
 8003130:	2264      	movs	r2, #100	; 0x64
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003138:	f7fe f842 	bl	80011c0 <HAL_GetTick>
 800313c:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d106      	bne.n	8003152 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003148:	f043 0220 	orr.w	r2, r3, #32
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003150:	e009      	b.n	8003166 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	3b01      	subs	r3, #1
 8003156:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0eb      	beq.n	800313e <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003174:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	2164      	movs	r1, #100	; 0x64
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff fed8 	bl	8002f30 <SPI_EndRxTxTransaction>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318a:	f043 0220 	orr.w	r2, r3, #32
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10a      	bne.n	80031b0 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff fc5b 	bl	8002a7c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80031c6:	e002      	b.n	80031ce <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7fd fac1 	bl	8000750 <HAL_SPI_TxCpltCallback>
}
 80031ce:	bf00      	nop
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000000 	.word	0x20000000
 80031dc:	057619f1 	.word	0x057619f1

080031e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e041      	b.n	8003276 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7fd fe3e 	bl	8000e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3304      	adds	r3, #4
 800321c:	4619      	mov	r1, r3
 800321e:	4610      	mov	r0, r2
 8003220:	f000 f936 	bl	8003490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b084      	sub	sp, #16
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_TIM_ConfigClockSource+0x1c>
 8003296:	2302      	movs	r3, #2
 8003298:	e0b4      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x186>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2202      	movs	r2, #2
 80032a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032c0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d2:	d03e      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0xd4>
 80032d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d8:	f200 8087 	bhi.w	80033ea <HAL_TIM_ConfigClockSource+0x16c>
 80032dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e0:	f000 8086 	beq.w	80033f0 <HAL_TIM_ConfigClockSource+0x172>
 80032e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e8:	d87f      	bhi.n	80033ea <HAL_TIM_ConfigClockSource+0x16c>
 80032ea:	2b70      	cmp	r3, #112	; 0x70
 80032ec:	d01a      	beq.n	8003324 <HAL_TIM_ConfigClockSource+0xa6>
 80032ee:	2b70      	cmp	r3, #112	; 0x70
 80032f0:	d87b      	bhi.n	80033ea <HAL_TIM_ConfigClockSource+0x16c>
 80032f2:	2b60      	cmp	r3, #96	; 0x60
 80032f4:	d050      	beq.n	8003398 <HAL_TIM_ConfigClockSource+0x11a>
 80032f6:	2b60      	cmp	r3, #96	; 0x60
 80032f8:	d877      	bhi.n	80033ea <HAL_TIM_ConfigClockSource+0x16c>
 80032fa:	2b50      	cmp	r3, #80	; 0x50
 80032fc:	d03c      	beq.n	8003378 <HAL_TIM_ConfigClockSource+0xfa>
 80032fe:	2b50      	cmp	r3, #80	; 0x50
 8003300:	d873      	bhi.n	80033ea <HAL_TIM_ConfigClockSource+0x16c>
 8003302:	2b40      	cmp	r3, #64	; 0x40
 8003304:	d058      	beq.n	80033b8 <HAL_TIM_ConfigClockSource+0x13a>
 8003306:	2b40      	cmp	r3, #64	; 0x40
 8003308:	d86f      	bhi.n	80033ea <HAL_TIM_ConfigClockSource+0x16c>
 800330a:	2b30      	cmp	r3, #48	; 0x30
 800330c:	d064      	beq.n	80033d8 <HAL_TIM_ConfigClockSource+0x15a>
 800330e:	2b30      	cmp	r3, #48	; 0x30
 8003310:	d86b      	bhi.n	80033ea <HAL_TIM_ConfigClockSource+0x16c>
 8003312:	2b20      	cmp	r3, #32
 8003314:	d060      	beq.n	80033d8 <HAL_TIM_ConfigClockSource+0x15a>
 8003316:	2b20      	cmp	r3, #32
 8003318:	d867      	bhi.n	80033ea <HAL_TIM_ConfigClockSource+0x16c>
 800331a:	2b00      	cmp	r3, #0
 800331c:	d05c      	beq.n	80033d8 <HAL_TIM_ConfigClockSource+0x15a>
 800331e:	2b10      	cmp	r3, #16
 8003320:	d05a      	beq.n	80033d8 <HAL_TIM_ConfigClockSource+0x15a>
 8003322:	e062      	b.n	80033ea <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	6899      	ldr	r1, [r3, #8]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f000 fa37 	bl	80037a6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003346:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	609a      	str	r2, [r3, #8]
      break;
 8003350:	e04f      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	6899      	ldr	r1, [r3, #8]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f000 fa20 	bl	80037a6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003374:	609a      	str	r2, [r3, #8]
      break;
 8003376:	e03c      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6818      	ldr	r0, [r3, #0]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	6859      	ldr	r1, [r3, #4]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	461a      	mov	r2, r3
 8003386:	f000 f994 	bl	80036b2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2150      	movs	r1, #80	; 0x50
 8003390:	4618      	mov	r0, r3
 8003392:	f000 f9ed 	bl	8003770 <TIM_ITRx_SetConfig>
      break;
 8003396:	e02c      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	461a      	mov	r2, r3
 80033a6:	f000 f9b3 	bl	8003710 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2160      	movs	r1, #96	; 0x60
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 f9dd 	bl	8003770 <TIM_ITRx_SetConfig>
      break;
 80033b6:	e01c      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6818      	ldr	r0, [r3, #0]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	6859      	ldr	r1, [r3, #4]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	461a      	mov	r2, r3
 80033c6:	f000 f974 	bl	80036b2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2140      	movs	r1, #64	; 0x40
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 f9cd 	bl	8003770 <TIM_ITRx_SetConfig>
      break;
 80033d6:	e00c      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4619      	mov	r1, r3
 80033e2:	4610      	mov	r0, r2
 80033e4:	f000 f9c4 	bl	8003770 <TIM_ITRx_SetConfig>
      break;
 80033e8:	e003      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	73fb      	strb	r3, [r7, #15]
      break;
 80033ee:	e000      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003402:	7bfb      	ldrb	r3, [r7, #15]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003420:	2302      	movs	r3, #2
 8003422:	e031      	b.n	8003488 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003434:	6839      	ldr	r1, [r7, #0]
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f8aa 	bl	8003590 <TIM_SlaveTimer_SetConfig>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e018      	b.n	8003488 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003464:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003474:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a34      	ldr	r2, [pc, #208]	; (8003574 <TIM_Base_SetConfig+0xe4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d00f      	beq.n	80034c8 <TIM_Base_SetConfig+0x38>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ae:	d00b      	beq.n	80034c8 <TIM_Base_SetConfig+0x38>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a31      	ldr	r2, [pc, #196]	; (8003578 <TIM_Base_SetConfig+0xe8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d007      	beq.n	80034c8 <TIM_Base_SetConfig+0x38>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a30      	ldr	r2, [pc, #192]	; (800357c <TIM_Base_SetConfig+0xec>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d003      	beq.n	80034c8 <TIM_Base_SetConfig+0x38>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a2f      	ldr	r2, [pc, #188]	; (8003580 <TIM_Base_SetConfig+0xf0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d108      	bne.n	80034da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a25      	ldr	r2, [pc, #148]	; (8003574 <TIM_Base_SetConfig+0xe4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d01b      	beq.n	800351a <TIM_Base_SetConfig+0x8a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e8:	d017      	beq.n	800351a <TIM_Base_SetConfig+0x8a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a22      	ldr	r2, [pc, #136]	; (8003578 <TIM_Base_SetConfig+0xe8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <TIM_Base_SetConfig+0x8a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a21      	ldr	r2, [pc, #132]	; (800357c <TIM_Base_SetConfig+0xec>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00f      	beq.n	800351a <TIM_Base_SetConfig+0x8a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a20      	ldr	r2, [pc, #128]	; (8003580 <TIM_Base_SetConfig+0xf0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00b      	beq.n	800351a <TIM_Base_SetConfig+0x8a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a1f      	ldr	r2, [pc, #124]	; (8003584 <TIM_Base_SetConfig+0xf4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d007      	beq.n	800351a <TIM_Base_SetConfig+0x8a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a1e      	ldr	r2, [pc, #120]	; (8003588 <TIM_Base_SetConfig+0xf8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d003      	beq.n	800351a <TIM_Base_SetConfig+0x8a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a1d      	ldr	r2, [pc, #116]	; (800358c <TIM_Base_SetConfig+0xfc>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d108      	bne.n	800352c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a08      	ldr	r2, [pc, #32]	; (8003574 <TIM_Base_SetConfig+0xe4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d103      	bne.n	8003560 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	615a      	str	r2, [r3, #20]
}
 8003566:	bf00      	nop
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40010000 	.word	0x40010000
 8003578:	40000400 	.word	0x40000400
 800357c:	40000800 	.word	0x40000800
 8003580:	40000c00 	.word	0x40000c00
 8003584:	40014000 	.word	0x40014000
 8003588:	40014400 	.word	0x40014400
 800358c:	40014800 	.word	0x40014800

08003590 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ac:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f023 0307 	bic.w	r3, r3, #7
 80035be:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b70      	cmp	r3, #112	; 0x70
 80035d8:	d01a      	beq.n	8003610 <TIM_SlaveTimer_SetConfig+0x80>
 80035da:	2b70      	cmp	r3, #112	; 0x70
 80035dc:	d860      	bhi.n	80036a0 <TIM_SlaveTimer_SetConfig+0x110>
 80035de:	2b60      	cmp	r3, #96	; 0x60
 80035e0:	d054      	beq.n	800368c <TIM_SlaveTimer_SetConfig+0xfc>
 80035e2:	2b60      	cmp	r3, #96	; 0x60
 80035e4:	d85c      	bhi.n	80036a0 <TIM_SlaveTimer_SetConfig+0x110>
 80035e6:	2b50      	cmp	r3, #80	; 0x50
 80035e8:	d046      	beq.n	8003678 <TIM_SlaveTimer_SetConfig+0xe8>
 80035ea:	2b50      	cmp	r3, #80	; 0x50
 80035ec:	d858      	bhi.n	80036a0 <TIM_SlaveTimer_SetConfig+0x110>
 80035ee:	2b40      	cmp	r3, #64	; 0x40
 80035f0:	d019      	beq.n	8003626 <TIM_SlaveTimer_SetConfig+0x96>
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d854      	bhi.n	80036a0 <TIM_SlaveTimer_SetConfig+0x110>
 80035f6:	2b30      	cmp	r3, #48	; 0x30
 80035f8:	d055      	beq.n	80036a6 <TIM_SlaveTimer_SetConfig+0x116>
 80035fa:	2b30      	cmp	r3, #48	; 0x30
 80035fc:	d850      	bhi.n	80036a0 <TIM_SlaveTimer_SetConfig+0x110>
 80035fe:	2b20      	cmp	r3, #32
 8003600:	d051      	beq.n	80036a6 <TIM_SlaveTimer_SetConfig+0x116>
 8003602:	2b20      	cmp	r3, #32
 8003604:	d84c      	bhi.n	80036a0 <TIM_SlaveTimer_SetConfig+0x110>
 8003606:	2b00      	cmp	r3, #0
 8003608:	d04d      	beq.n	80036a6 <TIM_SlaveTimer_SetConfig+0x116>
 800360a:	2b10      	cmp	r3, #16
 800360c:	d04b      	beq.n	80036a6 <TIM_SlaveTimer_SetConfig+0x116>
 800360e:	e047      	b.n	80036a0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6818      	ldr	r0, [r3, #0]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68d9      	ldr	r1, [r3, #12]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	f000 f8c1 	bl	80037a6 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003624:	e040      	b.n	80036a8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b05      	cmp	r3, #5
 800362c:	d101      	bne.n	8003632 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e03b      	b.n	80036aa <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6a1a      	ldr	r2, [r3, #32]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0201 	bic.w	r2, r2, #1
 8003648:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003658:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	4313      	orrs	r3, r2
 8003664:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	621a      	str	r2, [r3, #32]
      break;
 8003676:	e017      	b.n	80036a8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	6899      	ldr	r1, [r3, #8]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	461a      	mov	r2, r3
 8003686:	f000 f814 	bl	80036b2 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800368a:	e00d      	b.n	80036a8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	6899      	ldr	r1, [r3, #8]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	461a      	mov	r2, r3
 800369a:	f000 f839 	bl	8003710 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800369e:	e003      	b.n	80036a8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	75fb      	strb	r3, [r7, #23]
      break;
 80036a4:	e000      	b.n	80036a8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80036a6:	bf00      	nop
  }

  return status;
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b087      	sub	sp, #28
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f023 0201 	bic.w	r2, r3, #1
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f023 030a 	bic.w	r3, r3, #10
 80036ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	621a      	str	r2, [r3, #32]
}
 8003704:	bf00      	nop
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f023 0210 	bic.w	r2, r3, #16
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800373a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	031b      	lsls	r3, r3, #12
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800374c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	621a      	str	r2, [r3, #32]
}
 8003764:	bf00      	nop
 8003766:	371c      	adds	r7, #28
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003786:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4313      	orrs	r3, r2
 800378e:	f043 0307 	orr.w	r3, r3, #7
 8003792:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	609a      	str	r2, [r3, #8]
}
 800379a:	bf00      	nop
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b087      	sub	sp, #28
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	021a      	lsls	r2, r3, #8
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	431a      	orrs	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	609a      	str	r2, [r3, #8]
}
 80037da:	bf00      	nop
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e050      	b.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1c      	ldr	r2, [pc, #112]	; (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d018      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384c:	d013      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a18      	ldr	r2, [pc, #96]	; (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00e      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a16      	ldr	r2, [pc, #88]	; (80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d009      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a15      	ldr	r2, [pc, #84]	; (80038bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d004      	beq.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a13      	ldr	r2, [pc, #76]	; (80038c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d10c      	bne.n	8003890 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800387c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	4313      	orrs	r3, r2
 8003886:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40010000 	.word	0x40010000
 80038b4:	40000400 	.word	0x40000400
 80038b8:	40000800 	.word	0x40000800
 80038bc:	40000c00 	.word	0x40000c00
 80038c0:	40014000 	.word	0x40014000

080038c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e03f      	b.n	8003956 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd fb02 	bl	8000ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2224      	movs	r2, #36	; 0x24
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 fd7b 	bl	8004404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800391c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800392c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800393c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b08a      	sub	sp, #40	; 0x28
 8003962:	af02      	add	r7, sp, #8
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	603b      	str	r3, [r7, #0]
 800396a:	4613      	mov	r3, r2
 800396c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b20      	cmp	r3, #32
 800397c:	d17c      	bne.n	8003a78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <HAL_UART_Transmit+0x2c>
 8003984:	88fb      	ldrh	r3, [r7, #6]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e075      	b.n	8003a7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_UART_Transmit+0x3e>
 8003998:	2302      	movs	r3, #2
 800399a:	e06e      	b.n	8003a7a <HAL_UART_Transmit+0x11c>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2221      	movs	r2, #33	; 0x21
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039b2:	f7fd fc05 	bl	80011c0 <HAL_GetTick>
 80039b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	88fa      	ldrh	r2, [r7, #6]
 80039bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	88fa      	ldrh	r2, [r7, #6]
 80039c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039cc:	d108      	bne.n	80039e0 <HAL_UART_Transmit+0x82>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d104      	bne.n	80039e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	e003      	b.n	80039e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80039f0:	e02a      	b.n	8003a48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2200      	movs	r2, #0
 80039fa:	2180      	movs	r1, #128	; 0x80
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 faf9 	bl	8003ff4 <UART_WaitOnFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e036      	b.n	8003a7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10b      	bne.n	8003a2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	3302      	adds	r3, #2
 8003a26:	61bb      	str	r3, [r7, #24]
 8003a28:	e007      	b.n	8003a3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	781a      	ldrb	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	3301      	adds	r3, #1
 8003a38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1cf      	bne.n	80039f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2140      	movs	r1, #64	; 0x40
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 fac9 	bl	8003ff4 <UART_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e006      	b.n	8003a7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	e000      	b.n	8003a7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a78:	2302      	movs	r3, #2
  }
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3720      	adds	r7, #32
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b0ba      	sub	sp, #232	; 0xe8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ac2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10f      	bne.n	8003aea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d009      	beq.n	8003aea <HAL_UART_IRQHandler+0x66>
 8003ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fbd3 	bl	800428e <UART_Receive_IT>
      return;
 8003ae8:	e256      	b.n	8003f98 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003aea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 80de 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x22c>
 8003af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d106      	bne.n	8003b0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80d1 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <HAL_UART_IRQHandler+0xae>
 8003b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f043 0201 	orr.w	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <HAL_UART_IRQHandler+0xd2>
 8003b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f043 0202 	orr.w	r2, r3, #2
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <HAL_UART_IRQHandler+0xf6>
 8003b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f043 0204 	orr.w	r2, r3, #4
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d011      	beq.n	8003baa <HAL_UART_IRQHandler+0x126>
 8003b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d105      	bne.n	8003b9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f043 0208 	orr.w	r2, r3, #8
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 81ed 	beq.w	8003f8e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x14e>
 8003bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fb5e 	bl	800428e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	bf0c      	ite	eq
 8003be0:	2301      	moveq	r3, #1
 8003be2:	2300      	movne	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d103      	bne.n	8003bfe <HAL_UART_IRQHandler+0x17a>
 8003bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d04f      	beq.n	8003c9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fa66 	bl	80040d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b40      	cmp	r3, #64	; 0x40
 8003c10:	d141      	bne.n	8003c96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3314      	adds	r3, #20
 8003c18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c20:	e853 3f00 	ldrex	r3, [r3]
 8003c24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3314      	adds	r3, #20
 8003c3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1d9      	bne.n	8003c12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d013      	beq.n	8003c8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6a:	4a7d      	ldr	r2, [pc, #500]	; (8003e60 <HAL_UART_IRQHandler+0x3dc>)
 8003c6c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fd fc55 	bl	8001522 <HAL_DMA_Abort_IT>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d016      	beq.n	8003cac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c88:	4610      	mov	r0, r2
 8003c8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8c:	e00e      	b.n	8003cac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f99a 	bl	8003fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c94:	e00a      	b.n	8003cac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f996 	bl	8003fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	e006      	b.n	8003cac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f992 	bl	8003fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003caa:	e170      	b.n	8003f8e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	bf00      	nop
    return;
 8003cae:	e16e      	b.n	8003f8e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	f040 814a 	bne.w	8003f4e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 8143 	beq.w	8003f4e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 813c 	beq.w	8003f4e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	f040 80b4 	bne.w	8003e64 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 8140 	beq.w	8003f92 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	f080 8139 	bcs.w	8003f92 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d26:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d32:	f000 8088 	beq.w	8003e46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	330c      	adds	r3, #12
 8003d3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	330c      	adds	r3, #12
 8003d5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1d9      	bne.n	8003d36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3314      	adds	r3, #20
 8003d88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d8c:	e853 3f00 	ldrex	r3, [r3]
 8003d90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d94:	f023 0301 	bic.w	r3, r3, #1
 8003d98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3314      	adds	r3, #20
 8003da2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003da6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003daa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003dae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003db8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e1      	bne.n	8003d82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3314      	adds	r3, #20
 8003dc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dc8:	e853 3f00 	ldrex	r3, [r3]
 8003dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3314      	adds	r3, #20
 8003dde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003de2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003de4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003de8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dea:	e841 2300 	strex	r3, r2, [r1]
 8003dee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1e3      	bne.n	8003dbe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	330c      	adds	r3, #12
 8003e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e0e:	e853 3f00 	ldrex	r3, [r3]
 8003e12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e16:	f023 0310 	bic.w	r3, r3, #16
 8003e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	330c      	adds	r3, #12
 8003e24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e28:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e2a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e30:	e841 2300 	strex	r3, r2, [r1]
 8003e34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1e3      	bne.n	8003e04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fd fafe 	bl	8001442 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	4619      	mov	r1, r3
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f8c0 	bl	8003fdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e5c:	e099      	b.n	8003f92 <HAL_UART_IRQHandler+0x50e>
 8003e5e:	bf00      	nop
 8003e60:	08004197 	.word	0x08004197
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 808b 	beq.w	8003f96 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 8086 	beq.w	8003f96 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	330c      	adds	r3, #12
 8003e90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ea0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	330c      	adds	r3, #12
 8003eaa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003eae:	647a      	str	r2, [r7, #68]	; 0x44
 8003eb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003eb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1e3      	bne.n	8003e8a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3314      	adds	r3, #20
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3314      	adds	r3, #20
 8003ee2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ee6:	633a      	str	r2, [r7, #48]	; 0x30
 8003ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e3      	bne.n	8003ec2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	e853 3f00 	ldrex	r3, [r3]
 8003f16:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0310 	bic.w	r3, r3, #16
 8003f1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	330c      	adds	r3, #12
 8003f28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f2c:	61fa      	str	r2, [r7, #28]
 8003f2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f30:	69b9      	ldr	r1, [r7, #24]
 8003f32:	69fa      	ldr	r2, [r7, #28]
 8003f34:	e841 2300 	strex	r3, r2, [r1]
 8003f38:	617b      	str	r3, [r7, #20]
   return(result);
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e3      	bne.n	8003f08 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f44:	4619      	mov	r1, r3
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f848 	bl	8003fdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f4c:	e023      	b.n	8003f96 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <HAL_UART_IRQHandler+0x4ea>
 8003f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f929 	bl	80041be <UART_Transmit_IT>
    return;
 8003f6c:	e014      	b.n	8003f98 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00e      	beq.n	8003f98 <HAL_UART_IRQHandler+0x514>
 8003f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f969 	bl	800425e <UART_EndTransmit_IT>
    return;
 8003f8c:	e004      	b.n	8003f98 <HAL_UART_IRQHandler+0x514>
    return;
 8003f8e:	bf00      	nop
 8003f90:	e002      	b.n	8003f98 <HAL_UART_IRQHandler+0x514>
      return;
 8003f92:	bf00      	nop
 8003f94:	e000      	b.n	8003f98 <HAL_UART_IRQHandler+0x514>
      return;
 8003f96:	bf00      	nop
  }
}
 8003f98:	37e8      	adds	r7, #232	; 0xe8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop

08003fa0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b090      	sub	sp, #64	; 0x40
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	4613      	mov	r3, r2
 8004002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004004:	e050      	b.n	80040a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400c:	d04c      	beq.n	80040a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800400e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004010:	2b00      	cmp	r3, #0
 8004012:	d007      	beq.n	8004024 <UART_WaitOnFlagUntilTimeout+0x30>
 8004014:	f7fd f8d4 	bl	80011c0 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004020:	429a      	cmp	r2, r3
 8004022:	d241      	bcs.n	80040a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	330c      	adds	r3, #12
 800402a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402e:	e853 3f00 	ldrex	r3, [r3]
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800403a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	330c      	adds	r3, #12
 8004042:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004044:	637a      	str	r2, [r7, #52]	; 0x34
 8004046:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800404a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e5      	bne.n	8004024 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3314      	adds	r3, #20
 800405e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	e853 3f00 	ldrex	r3, [r3]
 8004066:	613b      	str	r3, [r7, #16]
   return(result);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f023 0301 	bic.w	r3, r3, #1
 800406e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3314      	adds	r3, #20
 8004076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004078:	623a      	str	r2, [r7, #32]
 800407a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	69f9      	ldr	r1, [r7, #28]
 800407e:	6a3a      	ldr	r2, [r7, #32]
 8004080:	e841 2300 	strex	r3, r2, [r1]
 8004084:	61bb      	str	r3, [r7, #24]
   return(result);
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e5      	bne.n	8004058 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e00f      	b.n	80040c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4013      	ands	r3, r2
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	bf0c      	ite	eq
 80040b8:	2301      	moveq	r3, #1
 80040ba:	2300      	movne	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	461a      	mov	r2, r3
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d09f      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3740      	adds	r7, #64	; 0x40
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b095      	sub	sp, #84	; 0x54
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	330c      	adds	r3, #12
 80040f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040f8:	643a      	str	r2, [r7, #64]	; 0x40
 80040fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004100:	e841 2300 	strex	r3, r2, [r1]
 8004104:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1e5      	bne.n	80040d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3314      	adds	r3, #20
 8004112:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	61fb      	str	r3, [r7, #28]
   return(result);
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f023 0301 	bic.w	r3, r3, #1
 8004122:	64bb      	str	r3, [r7, #72]	; 0x48
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3314      	adds	r3, #20
 800412a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800412c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e5      	bne.n	800410c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	2b01      	cmp	r3, #1
 8004146:	d119      	bne.n	800417c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	e853 3f00 	ldrex	r3, [r3]
 8004156:	60bb      	str	r3, [r7, #8]
   return(result);
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f023 0310 	bic.w	r3, r3, #16
 800415e:	647b      	str	r3, [r7, #68]	; 0x44
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	330c      	adds	r3, #12
 8004166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004168:	61ba      	str	r2, [r7, #24]
 800416a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416c:	6979      	ldr	r1, [r7, #20]
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	e841 2300 	strex	r3, r2, [r1]
 8004174:	613b      	str	r3, [r7, #16]
   return(result);
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1e5      	bne.n	8004148 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	631a      	str	r2, [r3, #48]	; 0x30
}
 800418a:	bf00      	nop
 800418c:	3754      	adds	r7, #84	; 0x54
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f7ff ff09 	bl	8003fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041b6:	bf00      	nop
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041be:	b480      	push	{r7}
 80041c0:	b085      	sub	sp, #20
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b21      	cmp	r3, #33	; 0x21
 80041d0:	d13e      	bne.n	8004250 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041da:	d114      	bne.n	8004206 <UART_Transmit_IT+0x48>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d110      	bne.n	8004206 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	1c9a      	adds	r2, r3, #2
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	621a      	str	r2, [r3, #32]
 8004204:	e008      	b.n	8004218 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	1c59      	adds	r1, r3, #1
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6211      	str	r1, [r2, #32]
 8004210:	781a      	ldrb	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29b      	uxth	r3, r3
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	4619      	mov	r1, r3
 8004226:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10f      	bne.n	800424c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800423a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800424a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	e000      	b.n	8004252 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004250:	2302      	movs	r3, #2
  }
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b082      	sub	sp, #8
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004274:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff fe8e 	bl	8003fa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b08c      	sub	sp, #48	; 0x30
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b22      	cmp	r3, #34	; 0x22
 80042a0:	f040 80ab 	bne.w	80043fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ac:	d117      	bne.n	80042de <UART_Receive_IT+0x50>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d113      	bne.n	80042de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	1c9a      	adds	r2, r3, #2
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	629a      	str	r2, [r3, #40]	; 0x28
 80042dc:	e026      	b.n	800432c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f0:	d007      	beq.n	8004302 <UART_Receive_IT+0x74>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10a      	bne.n	8004310 <UART_Receive_IT+0x82>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	b2da      	uxtb	r2, r3
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	e008      	b.n	8004322 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800431c:	b2da      	uxtb	r2, r3
 800431e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004320:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29b      	uxth	r3, r3
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	4619      	mov	r1, r3
 800433a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800433c:	2b00      	cmp	r3, #0
 800433e:	d15a      	bne.n	80043f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0220 	bic.w	r2, r2, #32
 800434e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800435e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695a      	ldr	r2, [r3, #20]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0201 	bic.w	r2, r2, #1
 800436e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437c:	2b01      	cmp	r3, #1
 800437e:	d135      	bne.n	80043ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	330c      	adds	r3, #12
 800438c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	e853 3f00 	ldrex	r3, [r3]
 8004394:	613b      	str	r3, [r7, #16]
   return(result);
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f023 0310 	bic.w	r3, r3, #16
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	330c      	adds	r3, #12
 80043a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a6:	623a      	str	r2, [r7, #32]
 80043a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	69f9      	ldr	r1, [r7, #28]
 80043ac:	6a3a      	ldr	r2, [r7, #32]
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e5      	bne.n	8004386 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	2b10      	cmp	r3, #16
 80043c6:	d10a      	bne.n	80043de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043e2:	4619      	mov	r1, r3
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff fdf9 	bl	8003fdc <HAL_UARTEx_RxEventCallback>
 80043ea:	e002      	b.n	80043f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff fde1 	bl	8003fb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e002      	b.n	80043fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	e000      	b.n	80043fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80043fa:	2302      	movs	r3, #2
  }
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3730      	adds	r7, #48	; 0x30
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004408:	b0c0      	sub	sp, #256	; 0x100
 800440a:	af00      	add	r7, sp, #0
 800440c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	68d9      	ldr	r1, [r3, #12]
 8004422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	ea40 0301 	orr.w	r3, r0, r1
 800442c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800442e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	431a      	orrs	r2, r3
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	431a      	orrs	r2, r3
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800445c:	f021 010c 	bic.w	r1, r1, #12
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800446a:	430b      	orrs	r3, r1
 800446c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800446e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800447a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447e:	6999      	ldr	r1, [r3, #24]
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	ea40 0301 	orr.w	r3, r0, r1
 800448a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800448c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	4b8f      	ldr	r3, [pc, #572]	; (80046d0 <UART_SetConfig+0x2cc>)
 8004494:	429a      	cmp	r2, r3
 8004496:	d005      	beq.n	80044a4 <UART_SetConfig+0xa0>
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b8d      	ldr	r3, [pc, #564]	; (80046d4 <UART_SetConfig+0x2d0>)
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d104      	bne.n	80044ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044a4:	f7fd ff86 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 80044a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044ac:	e003      	b.n	80044b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044ae:	f7fd ff6d 	bl	800238c <HAL_RCC_GetPCLK1Freq>
 80044b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c0:	f040 810c 	bne.w	80046dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044c8:	2200      	movs	r2, #0
 80044ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044d6:	4622      	mov	r2, r4
 80044d8:	462b      	mov	r3, r5
 80044da:	1891      	adds	r1, r2, r2
 80044dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80044de:	415b      	adcs	r3, r3
 80044e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044e6:	4621      	mov	r1, r4
 80044e8:	eb12 0801 	adds.w	r8, r2, r1
 80044ec:	4629      	mov	r1, r5
 80044ee:	eb43 0901 	adc.w	r9, r3, r1
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004506:	4690      	mov	r8, r2
 8004508:	4699      	mov	r9, r3
 800450a:	4623      	mov	r3, r4
 800450c:	eb18 0303 	adds.w	r3, r8, r3
 8004510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004514:	462b      	mov	r3, r5
 8004516:	eb49 0303 	adc.w	r3, r9, r3
 800451a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800451e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800452a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800452e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004532:	460b      	mov	r3, r1
 8004534:	18db      	adds	r3, r3, r3
 8004536:	653b      	str	r3, [r7, #80]	; 0x50
 8004538:	4613      	mov	r3, r2
 800453a:	eb42 0303 	adc.w	r3, r2, r3
 800453e:	657b      	str	r3, [r7, #84]	; 0x54
 8004540:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004544:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004548:	f7fb fe9a 	bl	8000280 <__aeabi_uldivmod>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4b61      	ldr	r3, [pc, #388]	; (80046d8 <UART_SetConfig+0x2d4>)
 8004552:	fba3 2302 	umull	r2, r3, r3, r2
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	011c      	lsls	r4, r3, #4
 800455a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800455e:	2200      	movs	r2, #0
 8004560:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004564:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004568:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800456c:	4642      	mov	r2, r8
 800456e:	464b      	mov	r3, r9
 8004570:	1891      	adds	r1, r2, r2
 8004572:	64b9      	str	r1, [r7, #72]	; 0x48
 8004574:	415b      	adcs	r3, r3
 8004576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004578:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800457c:	4641      	mov	r1, r8
 800457e:	eb12 0a01 	adds.w	sl, r2, r1
 8004582:	4649      	mov	r1, r9
 8004584:	eb43 0b01 	adc.w	fp, r3, r1
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004594:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800459c:	4692      	mov	sl, r2
 800459e:	469b      	mov	fp, r3
 80045a0:	4643      	mov	r3, r8
 80045a2:	eb1a 0303 	adds.w	r3, sl, r3
 80045a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045aa:	464b      	mov	r3, r9
 80045ac:	eb4b 0303 	adc.w	r3, fp, r3
 80045b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045c8:	460b      	mov	r3, r1
 80045ca:	18db      	adds	r3, r3, r3
 80045cc:	643b      	str	r3, [r7, #64]	; 0x40
 80045ce:	4613      	mov	r3, r2
 80045d0:	eb42 0303 	adc.w	r3, r2, r3
 80045d4:	647b      	str	r3, [r7, #68]	; 0x44
 80045d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045de:	f7fb fe4f 	bl	8000280 <__aeabi_uldivmod>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4611      	mov	r1, r2
 80045e8:	4b3b      	ldr	r3, [pc, #236]	; (80046d8 <UART_SetConfig+0x2d4>)
 80045ea:	fba3 2301 	umull	r2, r3, r3, r1
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	2264      	movs	r2, #100	; 0x64
 80045f2:	fb02 f303 	mul.w	r3, r2, r3
 80045f6:	1acb      	subs	r3, r1, r3
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045fe:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <UART_SetConfig+0x2d4>)
 8004600:	fba3 2302 	umull	r2, r3, r3, r2
 8004604:	095b      	lsrs	r3, r3, #5
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800460c:	441c      	add	r4, r3
 800460e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004612:	2200      	movs	r2, #0
 8004614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004618:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800461c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004620:	4642      	mov	r2, r8
 8004622:	464b      	mov	r3, r9
 8004624:	1891      	adds	r1, r2, r2
 8004626:	63b9      	str	r1, [r7, #56]	; 0x38
 8004628:	415b      	adcs	r3, r3
 800462a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800462c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004630:	4641      	mov	r1, r8
 8004632:	1851      	adds	r1, r2, r1
 8004634:	6339      	str	r1, [r7, #48]	; 0x30
 8004636:	4649      	mov	r1, r9
 8004638:	414b      	adcs	r3, r1
 800463a:	637b      	str	r3, [r7, #52]	; 0x34
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004648:	4659      	mov	r1, fp
 800464a:	00cb      	lsls	r3, r1, #3
 800464c:	4651      	mov	r1, sl
 800464e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004652:	4651      	mov	r1, sl
 8004654:	00ca      	lsls	r2, r1, #3
 8004656:	4610      	mov	r0, r2
 8004658:	4619      	mov	r1, r3
 800465a:	4603      	mov	r3, r0
 800465c:	4642      	mov	r2, r8
 800465e:	189b      	adds	r3, r3, r2
 8004660:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004664:	464b      	mov	r3, r9
 8004666:	460a      	mov	r2, r1
 8004668:	eb42 0303 	adc.w	r3, r2, r3
 800466c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800467c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004680:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004684:	460b      	mov	r3, r1
 8004686:	18db      	adds	r3, r3, r3
 8004688:	62bb      	str	r3, [r7, #40]	; 0x28
 800468a:	4613      	mov	r3, r2
 800468c:	eb42 0303 	adc.w	r3, r2, r3
 8004690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004696:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800469a:	f7fb fdf1 	bl	8000280 <__aeabi_uldivmod>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <UART_SetConfig+0x2d4>)
 80046a4:	fba3 1302 	umull	r1, r3, r3, r2
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	2164      	movs	r1, #100	; 0x64
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	3332      	adds	r3, #50	; 0x32
 80046b6:	4a08      	ldr	r2, [pc, #32]	; (80046d8 <UART_SetConfig+0x2d4>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	f003 0207 	and.w	r2, r3, #7
 80046c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4422      	add	r2, r4
 80046ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046cc:	e105      	b.n	80048da <UART_SetConfig+0x4d6>
 80046ce:	bf00      	nop
 80046d0:	40011000 	.word	0x40011000
 80046d4:	40011400 	.word	0x40011400
 80046d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046e0:	2200      	movs	r2, #0
 80046e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046ee:	4642      	mov	r2, r8
 80046f0:	464b      	mov	r3, r9
 80046f2:	1891      	adds	r1, r2, r2
 80046f4:	6239      	str	r1, [r7, #32]
 80046f6:	415b      	adcs	r3, r3
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
 80046fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046fe:	4641      	mov	r1, r8
 8004700:	1854      	adds	r4, r2, r1
 8004702:	4649      	mov	r1, r9
 8004704:	eb43 0501 	adc.w	r5, r3, r1
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	00eb      	lsls	r3, r5, #3
 8004712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004716:	00e2      	lsls	r2, r4, #3
 8004718:	4614      	mov	r4, r2
 800471a:	461d      	mov	r5, r3
 800471c:	4643      	mov	r3, r8
 800471e:	18e3      	adds	r3, r4, r3
 8004720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004724:	464b      	mov	r3, r9
 8004726:	eb45 0303 	adc.w	r3, r5, r3
 800472a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800472e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800473a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	f04f 0300 	mov.w	r3, #0
 8004746:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800474a:	4629      	mov	r1, r5
 800474c:	008b      	lsls	r3, r1, #2
 800474e:	4621      	mov	r1, r4
 8004750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004754:	4621      	mov	r1, r4
 8004756:	008a      	lsls	r2, r1, #2
 8004758:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800475c:	f7fb fd90 	bl	8000280 <__aeabi_uldivmod>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4b60      	ldr	r3, [pc, #384]	; (80048e8 <UART_SetConfig+0x4e4>)
 8004766:	fba3 2302 	umull	r2, r3, r3, r2
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	011c      	lsls	r4, r3, #4
 800476e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004772:	2200      	movs	r2, #0
 8004774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004778:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800477c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004780:	4642      	mov	r2, r8
 8004782:	464b      	mov	r3, r9
 8004784:	1891      	adds	r1, r2, r2
 8004786:	61b9      	str	r1, [r7, #24]
 8004788:	415b      	adcs	r3, r3
 800478a:	61fb      	str	r3, [r7, #28]
 800478c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004790:	4641      	mov	r1, r8
 8004792:	1851      	adds	r1, r2, r1
 8004794:	6139      	str	r1, [r7, #16]
 8004796:	4649      	mov	r1, r9
 8004798:	414b      	adcs	r3, r1
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047a8:	4659      	mov	r1, fp
 80047aa:	00cb      	lsls	r3, r1, #3
 80047ac:	4651      	mov	r1, sl
 80047ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047b2:	4651      	mov	r1, sl
 80047b4:	00ca      	lsls	r2, r1, #3
 80047b6:	4610      	mov	r0, r2
 80047b8:	4619      	mov	r1, r3
 80047ba:	4603      	mov	r3, r0
 80047bc:	4642      	mov	r2, r8
 80047be:	189b      	adds	r3, r3, r2
 80047c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047c4:	464b      	mov	r3, r9
 80047c6:	460a      	mov	r2, r1
 80047c8:	eb42 0303 	adc.w	r3, r2, r3
 80047cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80047da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047e8:	4649      	mov	r1, r9
 80047ea:	008b      	lsls	r3, r1, #2
 80047ec:	4641      	mov	r1, r8
 80047ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047f2:	4641      	mov	r1, r8
 80047f4:	008a      	lsls	r2, r1, #2
 80047f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047fa:	f7fb fd41 	bl	8000280 <__aeabi_uldivmod>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4b39      	ldr	r3, [pc, #228]	; (80048e8 <UART_SetConfig+0x4e4>)
 8004804:	fba3 1302 	umull	r1, r3, r3, r2
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	2164      	movs	r1, #100	; 0x64
 800480c:	fb01 f303 	mul.w	r3, r1, r3
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	3332      	adds	r3, #50	; 0x32
 8004816:	4a34      	ldr	r2, [pc, #208]	; (80048e8 <UART_SetConfig+0x4e4>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004822:	441c      	add	r4, r3
 8004824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004828:	2200      	movs	r2, #0
 800482a:	673b      	str	r3, [r7, #112]	; 0x70
 800482c:	677a      	str	r2, [r7, #116]	; 0x74
 800482e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004832:	4642      	mov	r2, r8
 8004834:	464b      	mov	r3, r9
 8004836:	1891      	adds	r1, r2, r2
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	415b      	adcs	r3, r3
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004842:	4641      	mov	r1, r8
 8004844:	1851      	adds	r1, r2, r1
 8004846:	6039      	str	r1, [r7, #0]
 8004848:	4649      	mov	r1, r9
 800484a:	414b      	adcs	r3, r1
 800484c:	607b      	str	r3, [r7, #4]
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800485a:	4659      	mov	r1, fp
 800485c:	00cb      	lsls	r3, r1, #3
 800485e:	4651      	mov	r1, sl
 8004860:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004864:	4651      	mov	r1, sl
 8004866:	00ca      	lsls	r2, r1, #3
 8004868:	4610      	mov	r0, r2
 800486a:	4619      	mov	r1, r3
 800486c:	4603      	mov	r3, r0
 800486e:	4642      	mov	r2, r8
 8004870:	189b      	adds	r3, r3, r2
 8004872:	66bb      	str	r3, [r7, #104]	; 0x68
 8004874:	464b      	mov	r3, r9
 8004876:	460a      	mov	r2, r1
 8004878:	eb42 0303 	adc.w	r3, r2, r3
 800487c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800487e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	663b      	str	r3, [r7, #96]	; 0x60
 8004888:	667a      	str	r2, [r7, #100]	; 0x64
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004896:	4649      	mov	r1, r9
 8004898:	008b      	lsls	r3, r1, #2
 800489a:	4641      	mov	r1, r8
 800489c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048a0:	4641      	mov	r1, r8
 80048a2:	008a      	lsls	r2, r1, #2
 80048a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80048a8:	f7fb fcea 	bl	8000280 <__aeabi_uldivmod>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <UART_SetConfig+0x4e4>)
 80048b2:	fba3 1302 	umull	r1, r3, r3, r2
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	2164      	movs	r1, #100	; 0x64
 80048ba:	fb01 f303 	mul.w	r3, r1, r3
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	3332      	adds	r3, #50	; 0x32
 80048c4:	4a08      	ldr	r2, [pc, #32]	; (80048e8 <UART_SetConfig+0x4e4>)
 80048c6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ca:	095b      	lsrs	r3, r3, #5
 80048cc:	f003 020f 	and.w	r2, r3, #15
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4422      	add	r2, r4
 80048d8:	609a      	str	r2, [r3, #8]
}
 80048da:	bf00      	nop
 80048dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048e0:	46bd      	mov	sp, r7
 80048e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048e6:	bf00      	nop
 80048e8:	51eb851f 	.word	0x51eb851f

080048ec <__errno>:
 80048ec:	4b01      	ldr	r3, [pc, #4]	; (80048f4 <__errno+0x8>)
 80048ee:	6818      	ldr	r0, [r3, #0]
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	2000000c 	.word	0x2000000c

080048f8 <__libc_init_array>:
 80048f8:	b570      	push	{r4, r5, r6, lr}
 80048fa:	4d0d      	ldr	r5, [pc, #52]	; (8004930 <__libc_init_array+0x38>)
 80048fc:	4c0d      	ldr	r4, [pc, #52]	; (8004934 <__libc_init_array+0x3c>)
 80048fe:	1b64      	subs	r4, r4, r5
 8004900:	10a4      	asrs	r4, r4, #2
 8004902:	2600      	movs	r6, #0
 8004904:	42a6      	cmp	r6, r4
 8004906:	d109      	bne.n	800491c <__libc_init_array+0x24>
 8004908:	4d0b      	ldr	r5, [pc, #44]	; (8004938 <__libc_init_array+0x40>)
 800490a:	4c0c      	ldr	r4, [pc, #48]	; (800493c <__libc_init_array+0x44>)
 800490c:	f000 fc8e 	bl	800522c <_init>
 8004910:	1b64      	subs	r4, r4, r5
 8004912:	10a4      	asrs	r4, r4, #2
 8004914:	2600      	movs	r6, #0
 8004916:	42a6      	cmp	r6, r4
 8004918:	d105      	bne.n	8004926 <__libc_init_array+0x2e>
 800491a:	bd70      	pop	{r4, r5, r6, pc}
 800491c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004920:	4798      	blx	r3
 8004922:	3601      	adds	r6, #1
 8004924:	e7ee      	b.n	8004904 <__libc_init_array+0xc>
 8004926:	f855 3b04 	ldr.w	r3, [r5], #4
 800492a:	4798      	blx	r3
 800492c:	3601      	adds	r6, #1
 800492e:	e7f2      	b.n	8004916 <__libc_init_array+0x1e>
 8004930:	080052c0 	.word	0x080052c0
 8004934:	080052c0 	.word	0x080052c0
 8004938:	080052c0 	.word	0x080052c0
 800493c:	080052c4 	.word	0x080052c4

08004940 <memcpy>:
 8004940:	440a      	add	r2, r1
 8004942:	4291      	cmp	r1, r2
 8004944:	f100 33ff 	add.w	r3, r0, #4294967295
 8004948:	d100      	bne.n	800494c <memcpy+0xc>
 800494a:	4770      	bx	lr
 800494c:	b510      	push	{r4, lr}
 800494e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004952:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004956:	4291      	cmp	r1, r2
 8004958:	d1f9      	bne.n	800494e <memcpy+0xe>
 800495a:	bd10      	pop	{r4, pc}

0800495c <memset>:
 800495c:	4402      	add	r2, r0
 800495e:	4603      	mov	r3, r0
 8004960:	4293      	cmp	r3, r2
 8004962:	d100      	bne.n	8004966 <memset+0xa>
 8004964:	4770      	bx	lr
 8004966:	f803 1b01 	strb.w	r1, [r3], #1
 800496a:	e7f9      	b.n	8004960 <memset+0x4>

0800496c <siprintf>:
 800496c:	b40e      	push	{r1, r2, r3}
 800496e:	b500      	push	{lr}
 8004970:	b09c      	sub	sp, #112	; 0x70
 8004972:	ab1d      	add	r3, sp, #116	; 0x74
 8004974:	9002      	str	r0, [sp, #8]
 8004976:	9006      	str	r0, [sp, #24]
 8004978:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800497c:	4809      	ldr	r0, [pc, #36]	; (80049a4 <siprintf+0x38>)
 800497e:	9107      	str	r1, [sp, #28]
 8004980:	9104      	str	r1, [sp, #16]
 8004982:	4909      	ldr	r1, [pc, #36]	; (80049a8 <siprintf+0x3c>)
 8004984:	f853 2b04 	ldr.w	r2, [r3], #4
 8004988:	9105      	str	r1, [sp, #20]
 800498a:	6800      	ldr	r0, [r0, #0]
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	a902      	add	r1, sp, #8
 8004990:	f000 f868 	bl	8004a64 <_svfiprintf_r>
 8004994:	9b02      	ldr	r3, [sp, #8]
 8004996:	2200      	movs	r2, #0
 8004998:	701a      	strb	r2, [r3, #0]
 800499a:	b01c      	add	sp, #112	; 0x70
 800499c:	f85d eb04 	ldr.w	lr, [sp], #4
 80049a0:	b003      	add	sp, #12
 80049a2:	4770      	bx	lr
 80049a4:	2000000c 	.word	0x2000000c
 80049a8:	ffff0208 	.word	0xffff0208

080049ac <__ssputs_r>:
 80049ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049b0:	688e      	ldr	r6, [r1, #8]
 80049b2:	429e      	cmp	r6, r3
 80049b4:	4682      	mov	sl, r0
 80049b6:	460c      	mov	r4, r1
 80049b8:	4690      	mov	r8, r2
 80049ba:	461f      	mov	r7, r3
 80049bc:	d838      	bhi.n	8004a30 <__ssputs_r+0x84>
 80049be:	898a      	ldrh	r2, [r1, #12]
 80049c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049c4:	d032      	beq.n	8004a2c <__ssputs_r+0x80>
 80049c6:	6825      	ldr	r5, [r4, #0]
 80049c8:	6909      	ldr	r1, [r1, #16]
 80049ca:	eba5 0901 	sub.w	r9, r5, r1
 80049ce:	6965      	ldr	r5, [r4, #20]
 80049d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049d8:	3301      	adds	r3, #1
 80049da:	444b      	add	r3, r9
 80049dc:	106d      	asrs	r5, r5, #1
 80049de:	429d      	cmp	r5, r3
 80049e0:	bf38      	it	cc
 80049e2:	461d      	movcc	r5, r3
 80049e4:	0553      	lsls	r3, r2, #21
 80049e6:	d531      	bpl.n	8004a4c <__ssputs_r+0xa0>
 80049e8:	4629      	mov	r1, r5
 80049ea:	f000 fb55 	bl	8005098 <_malloc_r>
 80049ee:	4606      	mov	r6, r0
 80049f0:	b950      	cbnz	r0, 8004a08 <__ssputs_r+0x5c>
 80049f2:	230c      	movs	r3, #12
 80049f4:	f8ca 3000 	str.w	r3, [sl]
 80049f8:	89a3      	ldrh	r3, [r4, #12]
 80049fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049fe:	81a3      	strh	r3, [r4, #12]
 8004a00:	f04f 30ff 	mov.w	r0, #4294967295
 8004a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a08:	6921      	ldr	r1, [r4, #16]
 8004a0a:	464a      	mov	r2, r9
 8004a0c:	f7ff ff98 	bl	8004940 <memcpy>
 8004a10:	89a3      	ldrh	r3, [r4, #12]
 8004a12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1a:	81a3      	strh	r3, [r4, #12]
 8004a1c:	6126      	str	r6, [r4, #16]
 8004a1e:	6165      	str	r5, [r4, #20]
 8004a20:	444e      	add	r6, r9
 8004a22:	eba5 0509 	sub.w	r5, r5, r9
 8004a26:	6026      	str	r6, [r4, #0]
 8004a28:	60a5      	str	r5, [r4, #8]
 8004a2a:	463e      	mov	r6, r7
 8004a2c:	42be      	cmp	r6, r7
 8004a2e:	d900      	bls.n	8004a32 <__ssputs_r+0x86>
 8004a30:	463e      	mov	r6, r7
 8004a32:	6820      	ldr	r0, [r4, #0]
 8004a34:	4632      	mov	r2, r6
 8004a36:	4641      	mov	r1, r8
 8004a38:	f000 faa8 	bl	8004f8c <memmove>
 8004a3c:	68a3      	ldr	r3, [r4, #8]
 8004a3e:	1b9b      	subs	r3, r3, r6
 8004a40:	60a3      	str	r3, [r4, #8]
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	4433      	add	r3, r6
 8004a46:	6023      	str	r3, [r4, #0]
 8004a48:	2000      	movs	r0, #0
 8004a4a:	e7db      	b.n	8004a04 <__ssputs_r+0x58>
 8004a4c:	462a      	mov	r2, r5
 8004a4e:	f000 fb97 	bl	8005180 <_realloc_r>
 8004a52:	4606      	mov	r6, r0
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d1e1      	bne.n	8004a1c <__ssputs_r+0x70>
 8004a58:	6921      	ldr	r1, [r4, #16]
 8004a5a:	4650      	mov	r0, sl
 8004a5c:	f000 fab0 	bl	8004fc0 <_free_r>
 8004a60:	e7c7      	b.n	80049f2 <__ssputs_r+0x46>
	...

08004a64 <_svfiprintf_r>:
 8004a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a68:	4698      	mov	r8, r3
 8004a6a:	898b      	ldrh	r3, [r1, #12]
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	b09d      	sub	sp, #116	; 0x74
 8004a70:	4607      	mov	r7, r0
 8004a72:	460d      	mov	r5, r1
 8004a74:	4614      	mov	r4, r2
 8004a76:	d50e      	bpl.n	8004a96 <_svfiprintf_r+0x32>
 8004a78:	690b      	ldr	r3, [r1, #16]
 8004a7a:	b963      	cbnz	r3, 8004a96 <_svfiprintf_r+0x32>
 8004a7c:	2140      	movs	r1, #64	; 0x40
 8004a7e:	f000 fb0b 	bl	8005098 <_malloc_r>
 8004a82:	6028      	str	r0, [r5, #0]
 8004a84:	6128      	str	r0, [r5, #16]
 8004a86:	b920      	cbnz	r0, 8004a92 <_svfiprintf_r+0x2e>
 8004a88:	230c      	movs	r3, #12
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a90:	e0d1      	b.n	8004c36 <_svfiprintf_r+0x1d2>
 8004a92:	2340      	movs	r3, #64	; 0x40
 8004a94:	616b      	str	r3, [r5, #20]
 8004a96:	2300      	movs	r3, #0
 8004a98:	9309      	str	r3, [sp, #36]	; 0x24
 8004a9a:	2320      	movs	r3, #32
 8004a9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004aa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004aa4:	2330      	movs	r3, #48	; 0x30
 8004aa6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004c50 <_svfiprintf_r+0x1ec>
 8004aaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004aae:	f04f 0901 	mov.w	r9, #1
 8004ab2:	4623      	mov	r3, r4
 8004ab4:	469a      	mov	sl, r3
 8004ab6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004aba:	b10a      	cbz	r2, 8004ac0 <_svfiprintf_r+0x5c>
 8004abc:	2a25      	cmp	r2, #37	; 0x25
 8004abe:	d1f9      	bne.n	8004ab4 <_svfiprintf_r+0x50>
 8004ac0:	ebba 0b04 	subs.w	fp, sl, r4
 8004ac4:	d00b      	beq.n	8004ade <_svfiprintf_r+0x7a>
 8004ac6:	465b      	mov	r3, fp
 8004ac8:	4622      	mov	r2, r4
 8004aca:	4629      	mov	r1, r5
 8004acc:	4638      	mov	r0, r7
 8004ace:	f7ff ff6d 	bl	80049ac <__ssputs_r>
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	f000 80aa 	beq.w	8004c2c <_svfiprintf_r+0x1c8>
 8004ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ada:	445a      	add	r2, fp
 8004adc:	9209      	str	r2, [sp, #36]	; 0x24
 8004ade:	f89a 3000 	ldrb.w	r3, [sl]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 80a2 	beq.w	8004c2c <_svfiprintf_r+0x1c8>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f04f 32ff 	mov.w	r2, #4294967295
 8004aee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004af2:	f10a 0a01 	add.w	sl, sl, #1
 8004af6:	9304      	str	r3, [sp, #16]
 8004af8:	9307      	str	r3, [sp, #28]
 8004afa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004afe:	931a      	str	r3, [sp, #104]	; 0x68
 8004b00:	4654      	mov	r4, sl
 8004b02:	2205      	movs	r2, #5
 8004b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b08:	4851      	ldr	r0, [pc, #324]	; (8004c50 <_svfiprintf_r+0x1ec>)
 8004b0a:	f7fb fb69 	bl	80001e0 <memchr>
 8004b0e:	9a04      	ldr	r2, [sp, #16]
 8004b10:	b9d8      	cbnz	r0, 8004b4a <_svfiprintf_r+0xe6>
 8004b12:	06d0      	lsls	r0, r2, #27
 8004b14:	bf44      	itt	mi
 8004b16:	2320      	movmi	r3, #32
 8004b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b1c:	0711      	lsls	r1, r2, #28
 8004b1e:	bf44      	itt	mi
 8004b20:	232b      	movmi	r3, #43	; 0x2b
 8004b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b26:	f89a 3000 	ldrb.w	r3, [sl]
 8004b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b2c:	d015      	beq.n	8004b5a <_svfiprintf_r+0xf6>
 8004b2e:	9a07      	ldr	r2, [sp, #28]
 8004b30:	4654      	mov	r4, sl
 8004b32:	2000      	movs	r0, #0
 8004b34:	f04f 0c0a 	mov.w	ip, #10
 8004b38:	4621      	mov	r1, r4
 8004b3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b3e:	3b30      	subs	r3, #48	; 0x30
 8004b40:	2b09      	cmp	r3, #9
 8004b42:	d94e      	bls.n	8004be2 <_svfiprintf_r+0x17e>
 8004b44:	b1b0      	cbz	r0, 8004b74 <_svfiprintf_r+0x110>
 8004b46:	9207      	str	r2, [sp, #28]
 8004b48:	e014      	b.n	8004b74 <_svfiprintf_r+0x110>
 8004b4a:	eba0 0308 	sub.w	r3, r0, r8
 8004b4e:	fa09 f303 	lsl.w	r3, r9, r3
 8004b52:	4313      	orrs	r3, r2
 8004b54:	9304      	str	r3, [sp, #16]
 8004b56:	46a2      	mov	sl, r4
 8004b58:	e7d2      	b.n	8004b00 <_svfiprintf_r+0x9c>
 8004b5a:	9b03      	ldr	r3, [sp, #12]
 8004b5c:	1d19      	adds	r1, r3, #4
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	9103      	str	r1, [sp, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bfbb      	ittet	lt
 8004b66:	425b      	neglt	r3, r3
 8004b68:	f042 0202 	orrlt.w	r2, r2, #2
 8004b6c:	9307      	strge	r3, [sp, #28]
 8004b6e:	9307      	strlt	r3, [sp, #28]
 8004b70:	bfb8      	it	lt
 8004b72:	9204      	strlt	r2, [sp, #16]
 8004b74:	7823      	ldrb	r3, [r4, #0]
 8004b76:	2b2e      	cmp	r3, #46	; 0x2e
 8004b78:	d10c      	bne.n	8004b94 <_svfiprintf_r+0x130>
 8004b7a:	7863      	ldrb	r3, [r4, #1]
 8004b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b7e:	d135      	bne.n	8004bec <_svfiprintf_r+0x188>
 8004b80:	9b03      	ldr	r3, [sp, #12]
 8004b82:	1d1a      	adds	r2, r3, #4
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	9203      	str	r2, [sp, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bfb8      	it	lt
 8004b8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b90:	3402      	adds	r4, #2
 8004b92:	9305      	str	r3, [sp, #20]
 8004b94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c60 <_svfiprintf_r+0x1fc>
 8004b98:	7821      	ldrb	r1, [r4, #0]
 8004b9a:	2203      	movs	r2, #3
 8004b9c:	4650      	mov	r0, sl
 8004b9e:	f7fb fb1f 	bl	80001e0 <memchr>
 8004ba2:	b140      	cbz	r0, 8004bb6 <_svfiprintf_r+0x152>
 8004ba4:	2340      	movs	r3, #64	; 0x40
 8004ba6:	eba0 000a 	sub.w	r0, r0, sl
 8004baa:	fa03 f000 	lsl.w	r0, r3, r0
 8004bae:	9b04      	ldr	r3, [sp, #16]
 8004bb0:	4303      	orrs	r3, r0
 8004bb2:	3401      	adds	r4, #1
 8004bb4:	9304      	str	r3, [sp, #16]
 8004bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bba:	4826      	ldr	r0, [pc, #152]	; (8004c54 <_svfiprintf_r+0x1f0>)
 8004bbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bc0:	2206      	movs	r2, #6
 8004bc2:	f7fb fb0d 	bl	80001e0 <memchr>
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d038      	beq.n	8004c3c <_svfiprintf_r+0x1d8>
 8004bca:	4b23      	ldr	r3, [pc, #140]	; (8004c58 <_svfiprintf_r+0x1f4>)
 8004bcc:	bb1b      	cbnz	r3, 8004c16 <_svfiprintf_r+0x1b2>
 8004bce:	9b03      	ldr	r3, [sp, #12]
 8004bd0:	3307      	adds	r3, #7
 8004bd2:	f023 0307 	bic.w	r3, r3, #7
 8004bd6:	3308      	adds	r3, #8
 8004bd8:	9303      	str	r3, [sp, #12]
 8004bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bdc:	4433      	add	r3, r6
 8004bde:	9309      	str	r3, [sp, #36]	; 0x24
 8004be0:	e767      	b.n	8004ab2 <_svfiprintf_r+0x4e>
 8004be2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004be6:	460c      	mov	r4, r1
 8004be8:	2001      	movs	r0, #1
 8004bea:	e7a5      	b.n	8004b38 <_svfiprintf_r+0xd4>
 8004bec:	2300      	movs	r3, #0
 8004bee:	3401      	adds	r4, #1
 8004bf0:	9305      	str	r3, [sp, #20]
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	f04f 0c0a 	mov.w	ip, #10
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bfe:	3a30      	subs	r2, #48	; 0x30
 8004c00:	2a09      	cmp	r2, #9
 8004c02:	d903      	bls.n	8004c0c <_svfiprintf_r+0x1a8>
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0c5      	beq.n	8004b94 <_svfiprintf_r+0x130>
 8004c08:	9105      	str	r1, [sp, #20]
 8004c0a:	e7c3      	b.n	8004b94 <_svfiprintf_r+0x130>
 8004c0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c10:	4604      	mov	r4, r0
 8004c12:	2301      	movs	r3, #1
 8004c14:	e7f0      	b.n	8004bf8 <_svfiprintf_r+0x194>
 8004c16:	ab03      	add	r3, sp, #12
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	462a      	mov	r2, r5
 8004c1c:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <_svfiprintf_r+0x1f8>)
 8004c1e:	a904      	add	r1, sp, #16
 8004c20:	4638      	mov	r0, r7
 8004c22:	f3af 8000 	nop.w
 8004c26:	1c42      	adds	r2, r0, #1
 8004c28:	4606      	mov	r6, r0
 8004c2a:	d1d6      	bne.n	8004bda <_svfiprintf_r+0x176>
 8004c2c:	89ab      	ldrh	r3, [r5, #12]
 8004c2e:	065b      	lsls	r3, r3, #25
 8004c30:	f53f af2c 	bmi.w	8004a8c <_svfiprintf_r+0x28>
 8004c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c36:	b01d      	add	sp, #116	; 0x74
 8004c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c3c:	ab03      	add	r3, sp, #12
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	462a      	mov	r2, r5
 8004c42:	4b06      	ldr	r3, [pc, #24]	; (8004c5c <_svfiprintf_r+0x1f8>)
 8004c44:	a904      	add	r1, sp, #16
 8004c46:	4638      	mov	r0, r7
 8004c48:	f000 f87a 	bl	8004d40 <_printf_i>
 8004c4c:	e7eb      	b.n	8004c26 <_svfiprintf_r+0x1c2>
 8004c4e:	bf00      	nop
 8004c50:	08005284 	.word	0x08005284
 8004c54:	0800528e 	.word	0x0800528e
 8004c58:	00000000 	.word	0x00000000
 8004c5c:	080049ad 	.word	0x080049ad
 8004c60:	0800528a 	.word	0x0800528a

08004c64 <_printf_common>:
 8004c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c68:	4616      	mov	r6, r2
 8004c6a:	4699      	mov	r9, r3
 8004c6c:	688a      	ldr	r2, [r1, #8]
 8004c6e:	690b      	ldr	r3, [r1, #16]
 8004c70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c74:	4293      	cmp	r3, r2
 8004c76:	bfb8      	it	lt
 8004c78:	4613      	movlt	r3, r2
 8004c7a:	6033      	str	r3, [r6, #0]
 8004c7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c80:	4607      	mov	r7, r0
 8004c82:	460c      	mov	r4, r1
 8004c84:	b10a      	cbz	r2, 8004c8a <_printf_common+0x26>
 8004c86:	3301      	adds	r3, #1
 8004c88:	6033      	str	r3, [r6, #0]
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	0699      	lsls	r1, r3, #26
 8004c8e:	bf42      	ittt	mi
 8004c90:	6833      	ldrmi	r3, [r6, #0]
 8004c92:	3302      	addmi	r3, #2
 8004c94:	6033      	strmi	r3, [r6, #0]
 8004c96:	6825      	ldr	r5, [r4, #0]
 8004c98:	f015 0506 	ands.w	r5, r5, #6
 8004c9c:	d106      	bne.n	8004cac <_printf_common+0x48>
 8004c9e:	f104 0a19 	add.w	sl, r4, #25
 8004ca2:	68e3      	ldr	r3, [r4, #12]
 8004ca4:	6832      	ldr	r2, [r6, #0]
 8004ca6:	1a9b      	subs	r3, r3, r2
 8004ca8:	42ab      	cmp	r3, r5
 8004caa:	dc26      	bgt.n	8004cfa <_printf_common+0x96>
 8004cac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cb0:	1e13      	subs	r3, r2, #0
 8004cb2:	6822      	ldr	r2, [r4, #0]
 8004cb4:	bf18      	it	ne
 8004cb6:	2301      	movne	r3, #1
 8004cb8:	0692      	lsls	r2, r2, #26
 8004cba:	d42b      	bmi.n	8004d14 <_printf_common+0xb0>
 8004cbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	47c0      	blx	r8
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	d01e      	beq.n	8004d08 <_printf_common+0xa4>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	68e5      	ldr	r5, [r4, #12]
 8004cce:	6832      	ldr	r2, [r6, #0]
 8004cd0:	f003 0306 	and.w	r3, r3, #6
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	bf08      	it	eq
 8004cd8:	1aad      	subeq	r5, r5, r2
 8004cda:	68a3      	ldr	r3, [r4, #8]
 8004cdc:	6922      	ldr	r2, [r4, #16]
 8004cde:	bf0c      	ite	eq
 8004ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ce4:	2500      	movne	r5, #0
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	bfc4      	itt	gt
 8004cea:	1a9b      	subgt	r3, r3, r2
 8004cec:	18ed      	addgt	r5, r5, r3
 8004cee:	2600      	movs	r6, #0
 8004cf0:	341a      	adds	r4, #26
 8004cf2:	42b5      	cmp	r5, r6
 8004cf4:	d11a      	bne.n	8004d2c <_printf_common+0xc8>
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	e008      	b.n	8004d0c <_printf_common+0xa8>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	4652      	mov	r2, sl
 8004cfe:	4649      	mov	r1, r9
 8004d00:	4638      	mov	r0, r7
 8004d02:	47c0      	blx	r8
 8004d04:	3001      	adds	r0, #1
 8004d06:	d103      	bne.n	8004d10 <_printf_common+0xac>
 8004d08:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d10:	3501      	adds	r5, #1
 8004d12:	e7c6      	b.n	8004ca2 <_printf_common+0x3e>
 8004d14:	18e1      	adds	r1, r4, r3
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	2030      	movs	r0, #48	; 0x30
 8004d1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d1e:	4422      	add	r2, r4
 8004d20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d28:	3302      	adds	r3, #2
 8004d2a:	e7c7      	b.n	8004cbc <_printf_common+0x58>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	4622      	mov	r2, r4
 8004d30:	4649      	mov	r1, r9
 8004d32:	4638      	mov	r0, r7
 8004d34:	47c0      	blx	r8
 8004d36:	3001      	adds	r0, #1
 8004d38:	d0e6      	beq.n	8004d08 <_printf_common+0xa4>
 8004d3a:	3601      	adds	r6, #1
 8004d3c:	e7d9      	b.n	8004cf2 <_printf_common+0x8e>
	...

08004d40 <_printf_i>:
 8004d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d44:	7e0f      	ldrb	r7, [r1, #24]
 8004d46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d48:	2f78      	cmp	r7, #120	; 0x78
 8004d4a:	4691      	mov	r9, r2
 8004d4c:	4680      	mov	r8, r0
 8004d4e:	460c      	mov	r4, r1
 8004d50:	469a      	mov	sl, r3
 8004d52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d56:	d807      	bhi.n	8004d68 <_printf_i+0x28>
 8004d58:	2f62      	cmp	r7, #98	; 0x62
 8004d5a:	d80a      	bhi.n	8004d72 <_printf_i+0x32>
 8004d5c:	2f00      	cmp	r7, #0
 8004d5e:	f000 80d8 	beq.w	8004f12 <_printf_i+0x1d2>
 8004d62:	2f58      	cmp	r7, #88	; 0x58
 8004d64:	f000 80a3 	beq.w	8004eae <_printf_i+0x16e>
 8004d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d70:	e03a      	b.n	8004de8 <_printf_i+0xa8>
 8004d72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d76:	2b15      	cmp	r3, #21
 8004d78:	d8f6      	bhi.n	8004d68 <_printf_i+0x28>
 8004d7a:	a101      	add	r1, pc, #4	; (adr r1, 8004d80 <_printf_i+0x40>)
 8004d7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d80:	08004dd9 	.word	0x08004dd9
 8004d84:	08004ded 	.word	0x08004ded
 8004d88:	08004d69 	.word	0x08004d69
 8004d8c:	08004d69 	.word	0x08004d69
 8004d90:	08004d69 	.word	0x08004d69
 8004d94:	08004d69 	.word	0x08004d69
 8004d98:	08004ded 	.word	0x08004ded
 8004d9c:	08004d69 	.word	0x08004d69
 8004da0:	08004d69 	.word	0x08004d69
 8004da4:	08004d69 	.word	0x08004d69
 8004da8:	08004d69 	.word	0x08004d69
 8004dac:	08004ef9 	.word	0x08004ef9
 8004db0:	08004e1d 	.word	0x08004e1d
 8004db4:	08004edb 	.word	0x08004edb
 8004db8:	08004d69 	.word	0x08004d69
 8004dbc:	08004d69 	.word	0x08004d69
 8004dc0:	08004f1b 	.word	0x08004f1b
 8004dc4:	08004d69 	.word	0x08004d69
 8004dc8:	08004e1d 	.word	0x08004e1d
 8004dcc:	08004d69 	.word	0x08004d69
 8004dd0:	08004d69 	.word	0x08004d69
 8004dd4:	08004ee3 	.word	0x08004ee3
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	1d1a      	adds	r2, r3, #4
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	602a      	str	r2, [r5, #0]
 8004de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004de4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004de8:	2301      	movs	r3, #1
 8004dea:	e0a3      	b.n	8004f34 <_printf_i+0x1f4>
 8004dec:	6820      	ldr	r0, [r4, #0]
 8004dee:	6829      	ldr	r1, [r5, #0]
 8004df0:	0606      	lsls	r6, r0, #24
 8004df2:	f101 0304 	add.w	r3, r1, #4
 8004df6:	d50a      	bpl.n	8004e0e <_printf_i+0xce>
 8004df8:	680e      	ldr	r6, [r1, #0]
 8004dfa:	602b      	str	r3, [r5, #0]
 8004dfc:	2e00      	cmp	r6, #0
 8004dfe:	da03      	bge.n	8004e08 <_printf_i+0xc8>
 8004e00:	232d      	movs	r3, #45	; 0x2d
 8004e02:	4276      	negs	r6, r6
 8004e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e08:	485e      	ldr	r0, [pc, #376]	; (8004f84 <_printf_i+0x244>)
 8004e0a:	230a      	movs	r3, #10
 8004e0c:	e019      	b.n	8004e42 <_printf_i+0x102>
 8004e0e:	680e      	ldr	r6, [r1, #0]
 8004e10:	602b      	str	r3, [r5, #0]
 8004e12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e16:	bf18      	it	ne
 8004e18:	b236      	sxthne	r6, r6
 8004e1a:	e7ef      	b.n	8004dfc <_printf_i+0xbc>
 8004e1c:	682b      	ldr	r3, [r5, #0]
 8004e1e:	6820      	ldr	r0, [r4, #0]
 8004e20:	1d19      	adds	r1, r3, #4
 8004e22:	6029      	str	r1, [r5, #0]
 8004e24:	0601      	lsls	r1, r0, #24
 8004e26:	d501      	bpl.n	8004e2c <_printf_i+0xec>
 8004e28:	681e      	ldr	r6, [r3, #0]
 8004e2a:	e002      	b.n	8004e32 <_printf_i+0xf2>
 8004e2c:	0646      	lsls	r6, r0, #25
 8004e2e:	d5fb      	bpl.n	8004e28 <_printf_i+0xe8>
 8004e30:	881e      	ldrh	r6, [r3, #0]
 8004e32:	4854      	ldr	r0, [pc, #336]	; (8004f84 <_printf_i+0x244>)
 8004e34:	2f6f      	cmp	r7, #111	; 0x6f
 8004e36:	bf0c      	ite	eq
 8004e38:	2308      	moveq	r3, #8
 8004e3a:	230a      	movne	r3, #10
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e42:	6865      	ldr	r5, [r4, #4]
 8004e44:	60a5      	str	r5, [r4, #8]
 8004e46:	2d00      	cmp	r5, #0
 8004e48:	bfa2      	ittt	ge
 8004e4a:	6821      	ldrge	r1, [r4, #0]
 8004e4c:	f021 0104 	bicge.w	r1, r1, #4
 8004e50:	6021      	strge	r1, [r4, #0]
 8004e52:	b90e      	cbnz	r6, 8004e58 <_printf_i+0x118>
 8004e54:	2d00      	cmp	r5, #0
 8004e56:	d04d      	beq.n	8004ef4 <_printf_i+0x1b4>
 8004e58:	4615      	mov	r5, r2
 8004e5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e5e:	fb03 6711 	mls	r7, r3, r1, r6
 8004e62:	5dc7      	ldrb	r7, [r0, r7]
 8004e64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e68:	4637      	mov	r7, r6
 8004e6a:	42bb      	cmp	r3, r7
 8004e6c:	460e      	mov	r6, r1
 8004e6e:	d9f4      	bls.n	8004e5a <_printf_i+0x11a>
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d10b      	bne.n	8004e8c <_printf_i+0x14c>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	07de      	lsls	r6, r3, #31
 8004e78:	d508      	bpl.n	8004e8c <_printf_i+0x14c>
 8004e7a:	6923      	ldr	r3, [r4, #16]
 8004e7c:	6861      	ldr	r1, [r4, #4]
 8004e7e:	4299      	cmp	r1, r3
 8004e80:	bfde      	ittt	le
 8004e82:	2330      	movle	r3, #48	; 0x30
 8004e84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e8c:	1b52      	subs	r2, r2, r5
 8004e8e:	6122      	str	r2, [r4, #16]
 8004e90:	f8cd a000 	str.w	sl, [sp]
 8004e94:	464b      	mov	r3, r9
 8004e96:	aa03      	add	r2, sp, #12
 8004e98:	4621      	mov	r1, r4
 8004e9a:	4640      	mov	r0, r8
 8004e9c:	f7ff fee2 	bl	8004c64 <_printf_common>
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d14c      	bne.n	8004f3e <_printf_i+0x1fe>
 8004ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea8:	b004      	add	sp, #16
 8004eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eae:	4835      	ldr	r0, [pc, #212]	; (8004f84 <_printf_i+0x244>)
 8004eb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004eb4:	6829      	ldr	r1, [r5, #0]
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ebc:	6029      	str	r1, [r5, #0]
 8004ebe:	061d      	lsls	r5, r3, #24
 8004ec0:	d514      	bpl.n	8004eec <_printf_i+0x1ac>
 8004ec2:	07df      	lsls	r7, r3, #31
 8004ec4:	bf44      	itt	mi
 8004ec6:	f043 0320 	orrmi.w	r3, r3, #32
 8004eca:	6023      	strmi	r3, [r4, #0]
 8004ecc:	b91e      	cbnz	r6, 8004ed6 <_printf_i+0x196>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	f023 0320 	bic.w	r3, r3, #32
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	2310      	movs	r3, #16
 8004ed8:	e7b0      	b.n	8004e3c <_printf_i+0xfc>
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	f043 0320 	orr.w	r3, r3, #32
 8004ee0:	6023      	str	r3, [r4, #0]
 8004ee2:	2378      	movs	r3, #120	; 0x78
 8004ee4:	4828      	ldr	r0, [pc, #160]	; (8004f88 <_printf_i+0x248>)
 8004ee6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004eea:	e7e3      	b.n	8004eb4 <_printf_i+0x174>
 8004eec:	0659      	lsls	r1, r3, #25
 8004eee:	bf48      	it	mi
 8004ef0:	b2b6      	uxthmi	r6, r6
 8004ef2:	e7e6      	b.n	8004ec2 <_printf_i+0x182>
 8004ef4:	4615      	mov	r5, r2
 8004ef6:	e7bb      	b.n	8004e70 <_printf_i+0x130>
 8004ef8:	682b      	ldr	r3, [r5, #0]
 8004efa:	6826      	ldr	r6, [r4, #0]
 8004efc:	6961      	ldr	r1, [r4, #20]
 8004efe:	1d18      	adds	r0, r3, #4
 8004f00:	6028      	str	r0, [r5, #0]
 8004f02:	0635      	lsls	r5, r6, #24
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	d501      	bpl.n	8004f0c <_printf_i+0x1cc>
 8004f08:	6019      	str	r1, [r3, #0]
 8004f0a:	e002      	b.n	8004f12 <_printf_i+0x1d2>
 8004f0c:	0670      	lsls	r0, r6, #25
 8004f0e:	d5fb      	bpl.n	8004f08 <_printf_i+0x1c8>
 8004f10:	8019      	strh	r1, [r3, #0]
 8004f12:	2300      	movs	r3, #0
 8004f14:	6123      	str	r3, [r4, #16]
 8004f16:	4615      	mov	r5, r2
 8004f18:	e7ba      	b.n	8004e90 <_printf_i+0x150>
 8004f1a:	682b      	ldr	r3, [r5, #0]
 8004f1c:	1d1a      	adds	r2, r3, #4
 8004f1e:	602a      	str	r2, [r5, #0]
 8004f20:	681d      	ldr	r5, [r3, #0]
 8004f22:	6862      	ldr	r2, [r4, #4]
 8004f24:	2100      	movs	r1, #0
 8004f26:	4628      	mov	r0, r5
 8004f28:	f7fb f95a 	bl	80001e0 <memchr>
 8004f2c:	b108      	cbz	r0, 8004f32 <_printf_i+0x1f2>
 8004f2e:	1b40      	subs	r0, r0, r5
 8004f30:	6060      	str	r0, [r4, #4]
 8004f32:	6863      	ldr	r3, [r4, #4]
 8004f34:	6123      	str	r3, [r4, #16]
 8004f36:	2300      	movs	r3, #0
 8004f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f3c:	e7a8      	b.n	8004e90 <_printf_i+0x150>
 8004f3e:	6923      	ldr	r3, [r4, #16]
 8004f40:	462a      	mov	r2, r5
 8004f42:	4649      	mov	r1, r9
 8004f44:	4640      	mov	r0, r8
 8004f46:	47d0      	blx	sl
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d0ab      	beq.n	8004ea4 <_printf_i+0x164>
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	079b      	lsls	r3, r3, #30
 8004f50:	d413      	bmi.n	8004f7a <_printf_i+0x23a>
 8004f52:	68e0      	ldr	r0, [r4, #12]
 8004f54:	9b03      	ldr	r3, [sp, #12]
 8004f56:	4298      	cmp	r0, r3
 8004f58:	bfb8      	it	lt
 8004f5a:	4618      	movlt	r0, r3
 8004f5c:	e7a4      	b.n	8004ea8 <_printf_i+0x168>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	4632      	mov	r2, r6
 8004f62:	4649      	mov	r1, r9
 8004f64:	4640      	mov	r0, r8
 8004f66:	47d0      	blx	sl
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d09b      	beq.n	8004ea4 <_printf_i+0x164>
 8004f6c:	3501      	adds	r5, #1
 8004f6e:	68e3      	ldr	r3, [r4, #12]
 8004f70:	9903      	ldr	r1, [sp, #12]
 8004f72:	1a5b      	subs	r3, r3, r1
 8004f74:	42ab      	cmp	r3, r5
 8004f76:	dcf2      	bgt.n	8004f5e <_printf_i+0x21e>
 8004f78:	e7eb      	b.n	8004f52 <_printf_i+0x212>
 8004f7a:	2500      	movs	r5, #0
 8004f7c:	f104 0619 	add.w	r6, r4, #25
 8004f80:	e7f5      	b.n	8004f6e <_printf_i+0x22e>
 8004f82:	bf00      	nop
 8004f84:	08005295 	.word	0x08005295
 8004f88:	080052a6 	.word	0x080052a6

08004f8c <memmove>:
 8004f8c:	4288      	cmp	r0, r1
 8004f8e:	b510      	push	{r4, lr}
 8004f90:	eb01 0402 	add.w	r4, r1, r2
 8004f94:	d902      	bls.n	8004f9c <memmove+0x10>
 8004f96:	4284      	cmp	r4, r0
 8004f98:	4623      	mov	r3, r4
 8004f9a:	d807      	bhi.n	8004fac <memmove+0x20>
 8004f9c:	1e43      	subs	r3, r0, #1
 8004f9e:	42a1      	cmp	r1, r4
 8004fa0:	d008      	beq.n	8004fb4 <memmove+0x28>
 8004fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004faa:	e7f8      	b.n	8004f9e <memmove+0x12>
 8004fac:	4402      	add	r2, r0
 8004fae:	4601      	mov	r1, r0
 8004fb0:	428a      	cmp	r2, r1
 8004fb2:	d100      	bne.n	8004fb6 <memmove+0x2a>
 8004fb4:	bd10      	pop	{r4, pc}
 8004fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fbe:	e7f7      	b.n	8004fb0 <memmove+0x24>

08004fc0 <_free_r>:
 8004fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fc2:	2900      	cmp	r1, #0
 8004fc4:	d044      	beq.n	8005050 <_free_r+0x90>
 8004fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fca:	9001      	str	r0, [sp, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f1a1 0404 	sub.w	r4, r1, #4
 8004fd2:	bfb8      	it	lt
 8004fd4:	18e4      	addlt	r4, r4, r3
 8004fd6:	f000 f913 	bl	8005200 <__malloc_lock>
 8004fda:	4a1e      	ldr	r2, [pc, #120]	; (8005054 <_free_r+0x94>)
 8004fdc:	9801      	ldr	r0, [sp, #4]
 8004fde:	6813      	ldr	r3, [r2, #0]
 8004fe0:	b933      	cbnz	r3, 8004ff0 <_free_r+0x30>
 8004fe2:	6063      	str	r3, [r4, #4]
 8004fe4:	6014      	str	r4, [r2, #0]
 8004fe6:	b003      	add	sp, #12
 8004fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fec:	f000 b90e 	b.w	800520c <__malloc_unlock>
 8004ff0:	42a3      	cmp	r3, r4
 8004ff2:	d908      	bls.n	8005006 <_free_r+0x46>
 8004ff4:	6825      	ldr	r5, [r4, #0]
 8004ff6:	1961      	adds	r1, r4, r5
 8004ff8:	428b      	cmp	r3, r1
 8004ffa:	bf01      	itttt	eq
 8004ffc:	6819      	ldreq	r1, [r3, #0]
 8004ffe:	685b      	ldreq	r3, [r3, #4]
 8005000:	1949      	addeq	r1, r1, r5
 8005002:	6021      	streq	r1, [r4, #0]
 8005004:	e7ed      	b.n	8004fe2 <_free_r+0x22>
 8005006:	461a      	mov	r2, r3
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	b10b      	cbz	r3, 8005010 <_free_r+0x50>
 800500c:	42a3      	cmp	r3, r4
 800500e:	d9fa      	bls.n	8005006 <_free_r+0x46>
 8005010:	6811      	ldr	r1, [r2, #0]
 8005012:	1855      	adds	r5, r2, r1
 8005014:	42a5      	cmp	r5, r4
 8005016:	d10b      	bne.n	8005030 <_free_r+0x70>
 8005018:	6824      	ldr	r4, [r4, #0]
 800501a:	4421      	add	r1, r4
 800501c:	1854      	adds	r4, r2, r1
 800501e:	42a3      	cmp	r3, r4
 8005020:	6011      	str	r1, [r2, #0]
 8005022:	d1e0      	bne.n	8004fe6 <_free_r+0x26>
 8005024:	681c      	ldr	r4, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	6053      	str	r3, [r2, #4]
 800502a:	4421      	add	r1, r4
 800502c:	6011      	str	r1, [r2, #0]
 800502e:	e7da      	b.n	8004fe6 <_free_r+0x26>
 8005030:	d902      	bls.n	8005038 <_free_r+0x78>
 8005032:	230c      	movs	r3, #12
 8005034:	6003      	str	r3, [r0, #0]
 8005036:	e7d6      	b.n	8004fe6 <_free_r+0x26>
 8005038:	6825      	ldr	r5, [r4, #0]
 800503a:	1961      	adds	r1, r4, r5
 800503c:	428b      	cmp	r3, r1
 800503e:	bf04      	itt	eq
 8005040:	6819      	ldreq	r1, [r3, #0]
 8005042:	685b      	ldreq	r3, [r3, #4]
 8005044:	6063      	str	r3, [r4, #4]
 8005046:	bf04      	itt	eq
 8005048:	1949      	addeq	r1, r1, r5
 800504a:	6021      	streq	r1, [r4, #0]
 800504c:	6054      	str	r4, [r2, #4]
 800504e:	e7ca      	b.n	8004fe6 <_free_r+0x26>
 8005050:	b003      	add	sp, #12
 8005052:	bd30      	pop	{r4, r5, pc}
 8005054:	200002e8 	.word	0x200002e8

08005058 <sbrk_aligned>:
 8005058:	b570      	push	{r4, r5, r6, lr}
 800505a:	4e0e      	ldr	r6, [pc, #56]	; (8005094 <sbrk_aligned+0x3c>)
 800505c:	460c      	mov	r4, r1
 800505e:	6831      	ldr	r1, [r6, #0]
 8005060:	4605      	mov	r5, r0
 8005062:	b911      	cbnz	r1, 800506a <sbrk_aligned+0x12>
 8005064:	f000 f8bc 	bl	80051e0 <_sbrk_r>
 8005068:	6030      	str	r0, [r6, #0]
 800506a:	4621      	mov	r1, r4
 800506c:	4628      	mov	r0, r5
 800506e:	f000 f8b7 	bl	80051e0 <_sbrk_r>
 8005072:	1c43      	adds	r3, r0, #1
 8005074:	d00a      	beq.n	800508c <sbrk_aligned+0x34>
 8005076:	1cc4      	adds	r4, r0, #3
 8005078:	f024 0403 	bic.w	r4, r4, #3
 800507c:	42a0      	cmp	r0, r4
 800507e:	d007      	beq.n	8005090 <sbrk_aligned+0x38>
 8005080:	1a21      	subs	r1, r4, r0
 8005082:	4628      	mov	r0, r5
 8005084:	f000 f8ac 	bl	80051e0 <_sbrk_r>
 8005088:	3001      	adds	r0, #1
 800508a:	d101      	bne.n	8005090 <sbrk_aligned+0x38>
 800508c:	f04f 34ff 	mov.w	r4, #4294967295
 8005090:	4620      	mov	r0, r4
 8005092:	bd70      	pop	{r4, r5, r6, pc}
 8005094:	200002ec 	.word	0x200002ec

08005098 <_malloc_r>:
 8005098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800509c:	1ccd      	adds	r5, r1, #3
 800509e:	f025 0503 	bic.w	r5, r5, #3
 80050a2:	3508      	adds	r5, #8
 80050a4:	2d0c      	cmp	r5, #12
 80050a6:	bf38      	it	cc
 80050a8:	250c      	movcc	r5, #12
 80050aa:	2d00      	cmp	r5, #0
 80050ac:	4607      	mov	r7, r0
 80050ae:	db01      	blt.n	80050b4 <_malloc_r+0x1c>
 80050b0:	42a9      	cmp	r1, r5
 80050b2:	d905      	bls.n	80050c0 <_malloc_r+0x28>
 80050b4:	230c      	movs	r3, #12
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	2600      	movs	r6, #0
 80050ba:	4630      	mov	r0, r6
 80050bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c0:	4e2e      	ldr	r6, [pc, #184]	; (800517c <_malloc_r+0xe4>)
 80050c2:	f000 f89d 	bl	8005200 <__malloc_lock>
 80050c6:	6833      	ldr	r3, [r6, #0]
 80050c8:	461c      	mov	r4, r3
 80050ca:	bb34      	cbnz	r4, 800511a <_malloc_r+0x82>
 80050cc:	4629      	mov	r1, r5
 80050ce:	4638      	mov	r0, r7
 80050d0:	f7ff ffc2 	bl	8005058 <sbrk_aligned>
 80050d4:	1c43      	adds	r3, r0, #1
 80050d6:	4604      	mov	r4, r0
 80050d8:	d14d      	bne.n	8005176 <_malloc_r+0xde>
 80050da:	6834      	ldr	r4, [r6, #0]
 80050dc:	4626      	mov	r6, r4
 80050de:	2e00      	cmp	r6, #0
 80050e0:	d140      	bne.n	8005164 <_malloc_r+0xcc>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	4631      	mov	r1, r6
 80050e6:	4638      	mov	r0, r7
 80050e8:	eb04 0803 	add.w	r8, r4, r3
 80050ec:	f000 f878 	bl	80051e0 <_sbrk_r>
 80050f0:	4580      	cmp	r8, r0
 80050f2:	d13a      	bne.n	800516a <_malloc_r+0xd2>
 80050f4:	6821      	ldr	r1, [r4, #0]
 80050f6:	3503      	adds	r5, #3
 80050f8:	1a6d      	subs	r5, r5, r1
 80050fa:	f025 0503 	bic.w	r5, r5, #3
 80050fe:	3508      	adds	r5, #8
 8005100:	2d0c      	cmp	r5, #12
 8005102:	bf38      	it	cc
 8005104:	250c      	movcc	r5, #12
 8005106:	4629      	mov	r1, r5
 8005108:	4638      	mov	r0, r7
 800510a:	f7ff ffa5 	bl	8005058 <sbrk_aligned>
 800510e:	3001      	adds	r0, #1
 8005110:	d02b      	beq.n	800516a <_malloc_r+0xd2>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	442b      	add	r3, r5
 8005116:	6023      	str	r3, [r4, #0]
 8005118:	e00e      	b.n	8005138 <_malloc_r+0xa0>
 800511a:	6822      	ldr	r2, [r4, #0]
 800511c:	1b52      	subs	r2, r2, r5
 800511e:	d41e      	bmi.n	800515e <_malloc_r+0xc6>
 8005120:	2a0b      	cmp	r2, #11
 8005122:	d916      	bls.n	8005152 <_malloc_r+0xba>
 8005124:	1961      	adds	r1, r4, r5
 8005126:	42a3      	cmp	r3, r4
 8005128:	6025      	str	r5, [r4, #0]
 800512a:	bf18      	it	ne
 800512c:	6059      	strne	r1, [r3, #4]
 800512e:	6863      	ldr	r3, [r4, #4]
 8005130:	bf08      	it	eq
 8005132:	6031      	streq	r1, [r6, #0]
 8005134:	5162      	str	r2, [r4, r5]
 8005136:	604b      	str	r3, [r1, #4]
 8005138:	4638      	mov	r0, r7
 800513a:	f104 060b 	add.w	r6, r4, #11
 800513e:	f000 f865 	bl	800520c <__malloc_unlock>
 8005142:	f026 0607 	bic.w	r6, r6, #7
 8005146:	1d23      	adds	r3, r4, #4
 8005148:	1af2      	subs	r2, r6, r3
 800514a:	d0b6      	beq.n	80050ba <_malloc_r+0x22>
 800514c:	1b9b      	subs	r3, r3, r6
 800514e:	50a3      	str	r3, [r4, r2]
 8005150:	e7b3      	b.n	80050ba <_malloc_r+0x22>
 8005152:	6862      	ldr	r2, [r4, #4]
 8005154:	42a3      	cmp	r3, r4
 8005156:	bf0c      	ite	eq
 8005158:	6032      	streq	r2, [r6, #0]
 800515a:	605a      	strne	r2, [r3, #4]
 800515c:	e7ec      	b.n	8005138 <_malloc_r+0xa0>
 800515e:	4623      	mov	r3, r4
 8005160:	6864      	ldr	r4, [r4, #4]
 8005162:	e7b2      	b.n	80050ca <_malloc_r+0x32>
 8005164:	4634      	mov	r4, r6
 8005166:	6876      	ldr	r6, [r6, #4]
 8005168:	e7b9      	b.n	80050de <_malloc_r+0x46>
 800516a:	230c      	movs	r3, #12
 800516c:	603b      	str	r3, [r7, #0]
 800516e:	4638      	mov	r0, r7
 8005170:	f000 f84c 	bl	800520c <__malloc_unlock>
 8005174:	e7a1      	b.n	80050ba <_malloc_r+0x22>
 8005176:	6025      	str	r5, [r4, #0]
 8005178:	e7de      	b.n	8005138 <_malloc_r+0xa0>
 800517a:	bf00      	nop
 800517c:	200002e8 	.word	0x200002e8

08005180 <_realloc_r>:
 8005180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005184:	4680      	mov	r8, r0
 8005186:	4614      	mov	r4, r2
 8005188:	460e      	mov	r6, r1
 800518a:	b921      	cbnz	r1, 8005196 <_realloc_r+0x16>
 800518c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005190:	4611      	mov	r1, r2
 8005192:	f7ff bf81 	b.w	8005098 <_malloc_r>
 8005196:	b92a      	cbnz	r2, 80051a4 <_realloc_r+0x24>
 8005198:	f7ff ff12 	bl	8004fc0 <_free_r>
 800519c:	4625      	mov	r5, r4
 800519e:	4628      	mov	r0, r5
 80051a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051a4:	f000 f838 	bl	8005218 <_malloc_usable_size_r>
 80051a8:	4284      	cmp	r4, r0
 80051aa:	4607      	mov	r7, r0
 80051ac:	d802      	bhi.n	80051b4 <_realloc_r+0x34>
 80051ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051b2:	d812      	bhi.n	80051da <_realloc_r+0x5a>
 80051b4:	4621      	mov	r1, r4
 80051b6:	4640      	mov	r0, r8
 80051b8:	f7ff ff6e 	bl	8005098 <_malloc_r>
 80051bc:	4605      	mov	r5, r0
 80051be:	2800      	cmp	r0, #0
 80051c0:	d0ed      	beq.n	800519e <_realloc_r+0x1e>
 80051c2:	42bc      	cmp	r4, r7
 80051c4:	4622      	mov	r2, r4
 80051c6:	4631      	mov	r1, r6
 80051c8:	bf28      	it	cs
 80051ca:	463a      	movcs	r2, r7
 80051cc:	f7ff fbb8 	bl	8004940 <memcpy>
 80051d0:	4631      	mov	r1, r6
 80051d2:	4640      	mov	r0, r8
 80051d4:	f7ff fef4 	bl	8004fc0 <_free_r>
 80051d8:	e7e1      	b.n	800519e <_realloc_r+0x1e>
 80051da:	4635      	mov	r5, r6
 80051dc:	e7df      	b.n	800519e <_realloc_r+0x1e>
	...

080051e0 <_sbrk_r>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	4d06      	ldr	r5, [pc, #24]	; (80051fc <_sbrk_r+0x1c>)
 80051e4:	2300      	movs	r3, #0
 80051e6:	4604      	mov	r4, r0
 80051e8:	4608      	mov	r0, r1
 80051ea:	602b      	str	r3, [r5, #0]
 80051ec:	f7fb ff10 	bl	8001010 <_sbrk>
 80051f0:	1c43      	adds	r3, r0, #1
 80051f2:	d102      	bne.n	80051fa <_sbrk_r+0x1a>
 80051f4:	682b      	ldr	r3, [r5, #0]
 80051f6:	b103      	cbz	r3, 80051fa <_sbrk_r+0x1a>
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	bd38      	pop	{r3, r4, r5, pc}
 80051fc:	200002f0 	.word	0x200002f0

08005200 <__malloc_lock>:
 8005200:	4801      	ldr	r0, [pc, #4]	; (8005208 <__malloc_lock+0x8>)
 8005202:	f000 b811 	b.w	8005228 <__retarget_lock_acquire_recursive>
 8005206:	bf00      	nop
 8005208:	200002f4 	.word	0x200002f4

0800520c <__malloc_unlock>:
 800520c:	4801      	ldr	r0, [pc, #4]	; (8005214 <__malloc_unlock+0x8>)
 800520e:	f000 b80c 	b.w	800522a <__retarget_lock_release_recursive>
 8005212:	bf00      	nop
 8005214:	200002f4 	.word	0x200002f4

08005218 <_malloc_usable_size_r>:
 8005218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800521c:	1f18      	subs	r0, r3, #4
 800521e:	2b00      	cmp	r3, #0
 8005220:	bfbc      	itt	lt
 8005222:	580b      	ldrlt	r3, [r1, r0]
 8005224:	18c0      	addlt	r0, r0, r3
 8005226:	4770      	bx	lr

08005228 <__retarget_lock_acquire_recursive>:
 8005228:	4770      	bx	lr

0800522a <__retarget_lock_release_recursive>:
 800522a:	4770      	bx	lr

0800522c <_init>:
 800522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522e:	bf00      	nop
 8005230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005232:	bc08      	pop	{r3}
 8005234:	469e      	mov	lr, r3
 8005236:	4770      	bx	lr

08005238 <_fini>:
 8005238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523a:	bf00      	nop
 800523c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523e:	bc08      	pop	{r3}
 8005240:	469e      	mov	lr, r3
 8005242:	4770      	bx	lr
