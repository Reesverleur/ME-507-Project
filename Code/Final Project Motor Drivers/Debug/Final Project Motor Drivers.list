
Final Project Motor Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08006e10  08006e10  00016e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e9c  08006e9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006e9c  08006e9c  00016e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ea4  08006ea4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006ea4  08006ea4  00016ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006eac  08006eac  00016eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000070  08006f20  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08006f20  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011937  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000234c  00000000  00000000  000319d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  00033d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  00034ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195ac  00000000  00000000  00035b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013356  00000000  00000000  0004f124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093926  00000000  00000000  0006247a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5da0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000466c  00000000  00000000  000f5df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006df8 	.word	0x08006df8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08006df8 	.word	0x08006df8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_ll>:
  * 				connected to the reverse direction of the motor
  *
  ******************************************************************************
  */
// Constructor only requires a few of the class attributes
	Motor::Motor(TIM_HandleTypeDef* htim1,TIM_HandleTypeDef* htim2,int32_t Ch1,int32_t Ch2){
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	603b      	str	r3, [r7, #0]
		tim	  	  = htim1;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	68ba      	ldr	r2, [r7, #8]
 8000596:	601a      	str	r2, [r3, #0]
		entim	  = htim2;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	605a      	str	r2, [r3, #4]
		FwdCh	  = Ch1;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	683a      	ldr	r2, [r7, #0]
 80005a2:	609a      	str	r2, [r3, #8]
		RevCh     = Ch2;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	69ba      	ldr	r2, [r7, #24]
 80005a8:	60da      	str	r2, [r3, #12]
		En		  = 0;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
		Duty	  = 0;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	2200      	movs	r2, #0
 80005b4:	615a      	str	r2, [r3, #20]
		Pos		  = 0;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
		Kp		  = 0;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f04f 0200 	mov.w	r2, #0
 80005c2:	61da      	str	r2, [r3, #28]
		Ki 		  = 0;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	f04f 0200 	mov.w	r2, #0
 80005ca:	621a      	str	r2, [r3, #32]
		Kd		  = 0;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	f04f 0200 	mov.w	r2, #0
 80005d2:	625a      	str	r2, [r3, #36]	; 0x24
		setpoint  = 0;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2200      	movs	r2, #0
 80005d8:	629a      	str	r2, [r3, #40]	; 0x28
		error	  = 0;
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2200      	movs	r2, #0
 80005de:	62da      	str	r2, [r3, #44]	; 0x2c
		esum	  = 0;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2200      	movs	r2, #0
 80005e4:	631a      	str	r2, [r3, #48]	; 0x30
		derror	  = 0;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2200      	movs	r2, #0
 80005ea:	635a      	str	r2, [r3, #52]	; 0x34
		oldticks  = 0;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	2200      	movs	r2, #0
 80005f0:	871a      	strh	r2, [r3, #56]	; 0x38
		ticks	  = 0;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	2200      	movs	r2, #0
 80005f6:	875a      	strh	r2, [r3, #58]	; 0x3a
	}
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4618      	mov	r0, r3
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <_ZN5Motor6EnableEl>:
  * 				disables the motors
  *
  ******************************************************************************
  */
// Enables/Disables the motor
	void Motor::Enable(int32_t newEn){
 8000606:	b480      	push	{r7}
 8000608:	b083      	sub	sp, #12
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
 800060e:	6039      	str	r1, [r7, #0]
		En = newEn;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	611a      	str	r2, [r3, #16]
	}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <_ZN5Motor8setGainsEfff>:
  * @param  nKi	This is the new Integral Gain value
  *
  * @param  nKd	This is the new Derivative Gain value
  ******************************************************************************
  */
	void Motor::setGains(float nKp,float nKi, float nKd){
 8000622:	b480      	push	{r7}
 8000624:	b085      	sub	sp, #20
 8000626:	af00      	add	r7, sp, #0
 8000628:	60f8      	str	r0, [r7, #12]
 800062a:	ed87 0a02 	vstr	s0, [r7, #8]
 800062e:	edc7 0a01 	vstr	s1, [r7, #4]
 8000632:	ed87 1a00 	vstr	s2, [r7]
		Kp = nKp;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	68ba      	ldr	r2, [r7, #8]
 800063a:	61da      	str	r2, [r3, #28]
		Ki = nKi;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	621a      	str	r2, [r3, #32]
		Kd = nKd;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	683a      	ldr	r2, [r7, #0]
 8000646:	625a      	str	r2, [r3, #36]	; 0x24
	}
 8000648:	bf00      	nop
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <_ZN5Motor10zeroErrorsEv>:
  ******************************************************************************
  * This allows for the zeroing of all error values when setting a new setpoint
  *
  ******************************************************************************
  */
	void Motor::zeroErrors(){
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
		error = 0;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2200      	movs	r2, #0
 8000660:	62da      	str	r2, [r3, #44]	; 0x2c
		derror = 0;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	; 0x34
		esum = 0;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2200      	movs	r2, #0
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
	}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
	...

0800067c <_ZN5Motor15VariableControlElffl>:
  * @param intError	This is the integral error threshold after which integration
  * 				of the error will begin.
  *
  ******************************************************************************
  */
	void Motor::VariableControl(int32_t newSet, float nKp, float nKi, int32_t intError){
 800067c:	b480      	push	{r7}
 800067e:	b087      	sub	sp, #28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6178      	str	r0, [r7, #20]
 8000684:	6139      	str	r1, [r7, #16]
 8000686:	ed87 0a03 	vstr	s0, [r7, #12]
 800068a:	edc7 0a02 	vstr	s1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
		Kp = nKp;
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	61da      	str	r2, [r3, #28]
		Ki = nKi;
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	621a      	str	r2, [r3, #32]
		//Kd = 0;
		setpoint= newSet;
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	693a      	ldr	r2, [r7, #16]
 80006a0:	629a      	str	r2, [r3, #40]	; 0x28
		ticks = __HAL_TIM_GET_COUNTER(entim)-oldticks;
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	b21a      	sxth	r2, r3
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	875a      	strh	r2, [r3, #58]	; 0x3a
		if (ticks>32768){
			ticks =ticks-65535;
		}else if (ticks<-32768){
			ticks =ticks+65535;
		}
		Pos = Pos+ticks-oldticks;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	697a      	ldr	r2, [r7, #20]
 80006c4:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	; 0x3a
 80006c8:	4413      	add	r3, r2
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	f9b2 2038 	ldrsh.w	r2, [r2, #56]	; 0x38
 80006d0:	1a9a      	subs	r2, r3, r2
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	619a      	str	r2, [r3, #24]
		oldticks = ticks;
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	; 0x3a
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	871a      	strh	r2, [r3, #56]	; 0x38

		derror = (setpoint-Pos)-error;
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	1ad2      	subs	r2, r2, r3
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ee:	1ad2      	subs	r2, r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	635a      	str	r2, [r3, #52]	; 0x34
		error = error+derror;
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006fc:	441a      	add	r2, r3
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
		if(error <= intError){
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	429a      	cmp	r2, r3
 800070a:	db07      	blt.n	800071c <_ZN5Motor15VariableControlElffl+0xa0>
			esum = esum+error;
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000714:	441a      	add	r2, r3
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
 800071a:	e002      	b.n	8000722 <_ZN5Motor15VariableControlElffl+0xa6>
		}else{
			esum = 0;
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	2200      	movs	r2, #0
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
		}


		Duty = (Kp*error+Ki*esum+Kd*derror);
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	ed93 7a07 	vldr	s14, [r3, #28]
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072c:	ee07 3a90 	vmov	s15, r3
 8000730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	edd3 6a08 	vldr	s13, [r3, #32]
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	ee07 3a90 	vmov	s15, r3
 8000746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800074a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800074e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800075c:	ee07 3a90 	vmov	s15, r3
 8000760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000764:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800076c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000770:	ee17 2a90 	vmov	r2, s15
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	615a      	str	r2, [r3, #20]
		if(Duty>4800){
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	695b      	ldr	r3, [r3, #20]
 800077c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
 8000780:	dd04      	ble.n	800078c <_ZN5Motor15VariableControlElffl+0x110>
			Duty = 4800;
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000788:	615a      	str	r2, [r3, #20]
 800078a:	e007      	b.n	800079c <_ZN5Motor15VariableControlElffl+0x120>
		}else if(Duty<-4800){
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
 8000794:	da02      	bge.n	800079c <_ZN5Motor15VariableControlElffl+0x120>
			Duty = -4800;
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	4a64      	ldr	r2, [pc, #400]	; (800092c <_ZN5Motor15VariableControlElffl+0x2b0>)
 800079a:	615a      	str	r2, [r3, #20]
		}

		if(Duty>=0){
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	695b      	ldr	r3, [r3, #20]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	db5a      	blt.n	800085a <_ZN5Motor15VariableControlElffl+0x1de>
			__HAL_TIM_SET_COMPARE(tim,FwdCh,En*Duty);
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d10a      	bne.n	80007c2 <_ZN5Motor15VariableControlElffl+0x146>
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	691b      	ldr	r3, [r3, #16]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	6952      	ldr	r2, [r2, #20]
 80007b4:	fb03 f202 	mul.w	r2, r3, r2
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	635a      	str	r2, [r3, #52]	; 0x34
 80007c0:	e027      	b.n	8000812 <_ZN5Motor15VariableControlElffl+0x196>
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	d10a      	bne.n	80007e0 <_ZN5Motor15VariableControlElffl+0x164>
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	691b      	ldr	r3, [r3, #16]
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	6952      	ldr	r2, [r2, #20]
 80007d2:	fb03 f202 	mul.w	r2, r3, r2
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	639a      	str	r2, [r3, #56]	; 0x38
 80007de:	e018      	b.n	8000812 <_ZN5Motor15VariableControlElffl+0x196>
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	689b      	ldr	r3, [r3, #8]
 80007e4:	2b08      	cmp	r3, #8
 80007e6:	d10a      	bne.n	80007fe <_ZN5Motor15VariableControlElffl+0x182>
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	691b      	ldr	r3, [r3, #16]
 80007ec:	697a      	ldr	r2, [r7, #20]
 80007ee:	6952      	ldr	r2, [r2, #20]
 80007f0:	fb03 f202 	mul.w	r2, r3, r2
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80007fc:	e009      	b.n	8000812 <_ZN5Motor15VariableControlElffl+0x196>
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	691b      	ldr	r3, [r3, #16]
 8000802:	697a      	ldr	r2, [r7, #20]
 8000804:	6952      	ldr	r2, [r2, #20]
 8000806:	fb03 f202 	mul.w	r2, r3, r2
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(tim,RevCh,0);
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d105      	bne.n	8000826 <_ZN5Motor15VariableControlElffl+0x1aa>
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2200      	movs	r2, #0
 8000822:	635a      	str	r2, [r3, #52]	; 0x34
		}else if(Duty<0){
			__HAL_TIM_SET_COMPARE(tim,RevCh,En*-1*Duty);
			__HAL_TIM_SET_COMPARE(tim,FwdCh,0);
		}

	}
 8000824:	e07b      	b.n	800091e <_ZN5Motor15VariableControlElffl+0x2a2>
			__HAL_TIM_SET_COMPARE(tim,RevCh,0);
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	2b04      	cmp	r3, #4
 800082c:	d105      	bne.n	800083a <_ZN5Motor15VariableControlElffl+0x1be>
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2200      	movs	r2, #0
 8000836:	639a      	str	r2, [r3, #56]	; 0x38
	}
 8000838:	e071      	b.n	800091e <_ZN5Motor15VariableControlElffl+0x2a2>
			__HAL_TIM_SET_COMPARE(tim,RevCh,0);
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	2b08      	cmp	r3, #8
 8000840:	d105      	bne.n	800084e <_ZN5Motor15VariableControlElffl+0x1d2>
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2200      	movs	r2, #0
 800084a:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 800084c:	e067      	b.n	800091e <_ZN5Motor15VariableControlElffl+0x2a2>
			__HAL_TIM_SET_COMPARE(tim,RevCh,0);
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2200      	movs	r2, #0
 8000856:	641a      	str	r2, [r3, #64]	; 0x40
	}
 8000858:	e061      	b.n	800091e <_ZN5Motor15VariableControlElffl+0x2a2>
		}else if(Duty<0){
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	2b00      	cmp	r3, #0
 8000860:	da5d      	bge.n	800091e <_ZN5Motor15VariableControlElffl+0x2a2>
			__HAL_TIM_SET_COMPARE(tim,RevCh,En*-1*Duty);
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	68db      	ldr	r3, [r3, #12]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10b      	bne.n	8000882 <_ZN5Motor15VariableControlElffl+0x206>
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	691b      	ldr	r3, [r3, #16]
 800086e:	425b      	negs	r3, r3
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	6952      	ldr	r2, [r2, #20]
 8000874:	fb03 f202 	mul.w	r2, r3, r2
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	635a      	str	r2, [r3, #52]	; 0x34
 8000880:	e02a      	b.n	80008d8 <_ZN5Motor15VariableControlElffl+0x25c>
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	2b04      	cmp	r3, #4
 8000888:	d10b      	bne.n	80008a2 <_ZN5Motor15VariableControlElffl+0x226>
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	691b      	ldr	r3, [r3, #16]
 800088e:	425b      	negs	r3, r3
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	6952      	ldr	r2, [r2, #20]
 8000894:	fb03 f202 	mul.w	r2, r3, r2
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	639a      	str	r2, [r3, #56]	; 0x38
 80008a0:	e01a      	b.n	80008d8 <_ZN5Motor15VariableControlElffl+0x25c>
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	2b08      	cmp	r3, #8
 80008a8:	d10b      	bne.n	80008c2 <_ZN5Motor15VariableControlElffl+0x246>
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	425b      	negs	r3, r3
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	6952      	ldr	r2, [r2, #20]
 80008b4:	fb03 f202 	mul.w	r2, r3, r2
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	63da      	str	r2, [r3, #60]	; 0x3c
 80008c0:	e00a      	b.n	80008d8 <_ZN5Motor15VariableControlElffl+0x25c>
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	691b      	ldr	r3, [r3, #16]
 80008c6:	425b      	negs	r3, r3
 80008c8:	697a      	ldr	r2, [r7, #20]
 80008ca:	6952      	ldr	r2, [r2, #20]
 80008cc:	fb03 f202 	mul.w	r2, r3, r2
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(tim,FwdCh,0);
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d105      	bne.n	80008ec <_ZN5Motor15VariableControlElffl+0x270>
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2200      	movs	r2, #0
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34
	}
 80008ea:	e018      	b.n	800091e <_ZN5Motor15VariableControlElffl+0x2a2>
			__HAL_TIM_SET_COMPARE(tim,FwdCh,0);
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	d105      	bne.n	8000900 <_ZN5Motor15VariableControlElffl+0x284>
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2200      	movs	r2, #0
 80008fc:	639a      	str	r2, [r3, #56]	; 0x38
	}
 80008fe:	e00e      	b.n	800091e <_ZN5Motor15VariableControlElffl+0x2a2>
			__HAL_TIM_SET_COMPARE(tim,FwdCh,0);
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	2b08      	cmp	r3, #8
 8000906:	d105      	bne.n	8000914 <_ZN5Motor15VariableControlElffl+0x298>
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2200      	movs	r2, #0
 8000910:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 8000912:	e004      	b.n	800091e <_ZN5Motor15VariableControlElffl+0x2a2>
			__HAL_TIM_SET_COMPARE(tim,FwdCh,0);
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2200      	movs	r2, #0
 800091c:	641a      	str	r2, [r3, #64]	; 0x40
	}
 800091e:	bf00      	nop
 8000920:	371c      	adds	r7, #28
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	ffffed40 	.word	0xffffed40

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f000 fde7 	bl	8001508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f867 	bl	8000a0c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f000 facd 	bl	8000edc <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8000942:	f000 f96b 	bl	8000c1c <_ZL12MX_TIM2_Initv>
  MX_USART1_UART_Init();
 8000946:	f000 fa9b 	bl	8000e80 <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 800094a:	f000 f905 	bl	8000b58 <_ZL12MX_TIM1_Initv>
  MX_I2C2_Init();
 800094e:	f000 f8cf 	bl	8000af0 <_ZL12MX_I2C2_Initv>
  MX_TIM3_Init();
 8000952:	f000 f9bf 	bl	8000cd4 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 8000956:	f000 fa1b 	bl	8000d90 <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800095a:	213c      	movs	r1, #60	; 0x3c
 800095c:	4822      	ldr	r0, [pc, #136]	; (80009e8 <main+0xb8>)
 800095e:	f003 fe25 	bl	80045ac <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);
 8000962:	2100      	movs	r1, #0
 8000964:	4821      	ldr	r0, [pc, #132]	; (80009ec <main+0xbc>)
 8000966:	f003 fccb 	bl	8004300 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_2);
 800096a:	2104      	movs	r1, #4
 800096c:	481f      	ldr	r0, [pc, #124]	; (80009ec <main+0xbc>)
 800096e:	f003 fcc7 	bl	8004300 <HAL_TIM_PWM_Start>


  motor1.Enable(1);
 8000972:	2101      	movs	r1, #1
 8000974:	481e      	ldr	r0, [pc, #120]	; (80009f0 <main+0xc0>)
 8000976:	f7ff fe46 	bl	8000606 <_ZN5Motor6EnableEl>
  motor1.setGains(3,0,1);
 800097a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800097e:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80009f4 <main+0xc4>
 8000982:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8000986:	481a      	ldr	r0, [pc, #104]	; (80009f0 <main+0xc0>)
 8000988:	f7ff fe4b 	bl	8000622 <_ZN5Motor8setGainsEfff>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(10);
 800098c:	200a      	movs	r0, #10
 800098e:	f000 fe2d 	bl	80015ec <HAL_Delay>
	  motor1.VariableControl(6747/3,8,0.2,25);
 8000992:	2219      	movs	r2, #25
 8000994:	eddf 0a18 	vldr	s1, [pc, #96]	; 80009f8 <main+0xc8>
 8000998:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800099c:	f640 01c9 	movw	r1, #2249	; 0x8c9
 80009a0:	4813      	ldr	r0, [pc, #76]	; (80009f0 <main+0xc0>)
 80009a2:	f7ff fe6b 	bl	800067c <_ZN5Motor15VariableControlElffl>

	  int32_t len = sprintf(msg_buff, "Motor Position is: %i Motor Effort is: %i Motor Error is: %i\r\n",motor1.Pos,motor1.Duty,motor1.error);
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <main+0xc0>)
 80009a8:	699a      	ldr	r2, [r3, #24]
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <main+0xc0>)
 80009ac:	6959      	ldr	r1, [r3, #20]
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <main+0xc0>)
 80009b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	460b      	mov	r3, r1
 80009b6:	4911      	ldr	r1, [pc, #68]	; (80009fc <main+0xcc>)
 80009b8:	4811      	ldr	r0, [pc, #68]	; (8000a00 <main+0xd0>)
 80009ba:	f005 fdaf 	bl	800651c <siprintf>
 80009be:	6078      	str	r0, [r7, #4]
	  // print string to uart
	  HAL_UART_Transmit(&huart1,(uint8_t*) &msg_buff,len,1000);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c8:	490d      	ldr	r1, [pc, #52]	; (8000a00 <main+0xd0>)
 80009ca:	480e      	ldr	r0, [pc, #56]	; (8000a04 <main+0xd4>)
 80009cc:	f004 fdad 	bl	800552a <HAL_UART_Transmit>

	  if(reset == 1){
 80009d0:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <main+0xd8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d1d9      	bne.n	800098c <main+0x5c>
		  motor1.zeroErrors();
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <main+0xc0>)
 80009da:	f7ff fe3b 	bl	8000654 <_ZN5Motor10zeroErrorsEv>
		  motor1.Pos = 0;
 80009de:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <main+0xc0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80009e4:	e7d2      	b.n	800098c <main+0x5c>
 80009e6:	bf00      	nop
 80009e8:	20000170 	.word	0x20000170
 80009ec:	200001b8 	.word	0x200001b8
 80009f0:	20000310 	.word	0x20000310
 80009f4:	00000000 	.word	0x00000000
 80009f8:	3e4ccccd 	.word	0x3e4ccccd
 80009fc:	08006e10 	.word	0x08006e10
 8000a00:	20000244 	.word	0x20000244
 8000a04:	20000200 	.word	0x20000200
 8000a08:	2000030c 	.word	0x2000030c

08000a0c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b094      	sub	sp, #80	; 0x50
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0320 	add.w	r3, r7, #32
 8000a16:	2230      	movs	r2, #48	; 0x30
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f005 fd76 	bl	800650c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <_Z18SystemClock_Configv+0xdc>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	4a2b      	ldr	r2, [pc, #172]	; (8000ae8 <_Z18SystemClock_Configv+0xdc>)
 8000a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a40:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <_Z18SystemClock_Configv+0xdc>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	4b26      	ldr	r3, [pc, #152]	; (8000aec <_Z18SystemClock_Configv+0xe0>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a25      	ldr	r2, [pc, #148]	; (8000aec <_Z18SystemClock_Configv+0xe0>)
 8000a56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a5a:	6013      	str	r3, [r2, #0]
 8000a5c:	4b23      	ldr	r3, [pc, #140]	; (8000aec <_Z18SystemClock_Configv+0xe0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a72:	2302      	movs	r3, #2
 8000a74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a7c:	2319      	movs	r3, #25
 8000a7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000a80:	23c0      	movs	r3, #192	; 0xc0
 8000a82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8c:	f107 0320 	add.w	r3, r7, #32
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 ff3f 	bl	8003914 <HAL_RCC_OscConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	bf14      	ite	ne
 8000a9c:	2301      	movne	r3, #1
 8000a9e:	2300      	moveq	r3, #0
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000aa6:	f000 fa79 	bl	8000f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aaa:	230f      	movs	r3, #15
 8000aac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	2103      	movs	r1, #3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f003 f99c 	bl	8003e04 <HAL_RCC_ClockConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	bf14      	ite	ne
 8000ad2:	2301      	movne	r3, #1
 8000ad4:	2300      	moveq	r3, #0
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000adc:	f000 fa5e 	bl	8000f9c <Error_Handler>
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	3750      	adds	r7, #80	; 0x50
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40007000 	.word	0x40007000

08000af0 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <_ZL12MX_I2C2_Initv+0x5c>)
 8000af6:	4a16      	ldr	r2, [pc, #88]	; (8000b50 <_ZL12MX_I2C2_Initv+0x60>)
 8000af8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <_ZL12MX_I2C2_Initv+0x5c>)
 8000afc:	4a15      	ldr	r2, [pc, #84]	; (8000b54 <_ZL12MX_I2C2_Initv+0x64>)
 8000afe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <_ZL12MX_I2C2_Initv+0x5c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <_ZL12MX_I2C2_Initv+0x5c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <_ZL12MX_I2C2_Initv+0x5c>)
 8000b0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b12:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <_ZL12MX_I2C2_Initv+0x5c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <_ZL12MX_I2C2_Initv+0x5c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <_ZL12MX_I2C2_Initv+0x5c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <_ZL12MX_I2C2_Initv+0x5c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b2c:	4807      	ldr	r0, [pc, #28]	; (8000b4c <_ZL12MX_I2C2_Initv+0x5c>)
 8000b2e:	f001 f8d1 	bl	8001cd4 <HAL_I2C_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	bf14      	ite	ne
 8000b38:	2301      	movne	r3, #1
 8000b3a:	2300      	moveq	r3, #0
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8000b42:	f000 fa2b 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000008c 	.word	0x2000008c
 8000b50:	40005800 	.word	0x40005800
 8000b54:	00061a80 	.word	0x00061a80

08000b58 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b76:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <_ZL12MX_TIM1_Initv+0xbc>)
 8000b78:	4a27      	ldr	r2, [pc, #156]	; (8000c18 <_ZL12MX_TIM1_Initv+0xc0>)
 8000b7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b7c:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <_ZL12MX_TIM1_Initv+0xbc>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b82:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <_ZL12MX_TIM1_Initv+0xbc>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b88:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <_ZL12MX_TIM1_Initv+0xbc>)
 8000b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b90:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <_ZL12MX_TIM1_Initv+0xbc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b96:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <_ZL12MX_TIM1_Initv+0xbc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <_ZL12MX_TIM1_Initv+0xbc>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ba2:	481c      	ldr	r0, [pc, #112]	; (8000c14 <_ZL12MX_TIM1_Initv+0xbc>)
 8000ba4:	f003 fb0e 	bl	80041c4 <HAL_TIM_Base_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	bf14      	ite	ne
 8000bae:	2301      	movne	r3, #1
 8000bb0:	2300      	moveq	r3, #0
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8000bb8:	f000 f9f0 	bl	8000f9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4812      	ldr	r0, [pc, #72]	; (8000c14 <_ZL12MX_TIM1_Initv+0xbc>)
 8000bcc:	f004 f80d 	bl	8004bea <HAL_TIM_SlaveConfigSynchro>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	bf14      	ite	ne
 8000bd6:	2301      	movne	r3, #1
 8000bd8:	2300      	moveq	r3, #0
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <_ZL12MX_TIM1_Initv+0x8c>
  {
    Error_Handler();
 8000be0:	f000 f9dc 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4808      	ldr	r0, [pc, #32]	; (8000c14 <_ZL12MX_TIM1_Initv+0xbc>)
 8000bf2:	f004 fbcb 	bl	800538c <HAL_TIMEx_MasterConfigSynchronization>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	bf14      	ite	ne
 8000bfc:	2301      	movne	r3, #1
 8000bfe:	2300      	moveq	r3, #0
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 8000c06:	f000 f9c9 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	3720      	adds	r7, #32
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200000e0 	.word	0x200000e0
 8000c18:	40010000 	.word	0x40010000

08000c1c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	f107 0308 	add.w	r3, r7, #8
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c30:	463b      	mov	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c38:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c40:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c46:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4799;
 8000c4c:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c4e:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000c52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c54:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c60:	481b      	ldr	r0, [pc, #108]	; (8000cd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c62:	f003 faaf 	bl	80041c4 <HAL_TIM_Base_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	bf14      	ite	ne
 8000c6c:	2301      	movne	r3, #1
 8000c6e:	2300      	moveq	r3, #0
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8000c76:	f000 f991 	bl	8000f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	4619      	mov	r1, r3
 8000c86:	4812      	ldr	r0, [pc, #72]	; (8000cd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000c88:	f003 fee8 	bl	8004a5c <HAL_TIM_ConfigClockSource>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	bf14      	ite	ne
 8000c92:	2301      	movne	r3, #1
 8000c94:	2300      	moveq	r3, #0
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8000c9c:	f000 f97e 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4619      	mov	r1, r3
 8000cac:	4808      	ldr	r0, [pc, #32]	; (8000cd0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000cae:	f004 fb6d 	bl	800538c <HAL_TIMEx_MasterConfigSynchronization>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	bf14      	ite	ne
 8000cb8:	2301      	movne	r3, #1
 8000cba:	2300      	moveq	r3, #0
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8000cc2:	f000 f96b 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000128 	.word	0x20000128

08000cd4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08c      	sub	sp, #48	; 0x30
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	2224      	movs	r2, #36	; 0x24
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f005 fc12 	bl	800650c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cf0:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <_ZL12MX_TIM3_Initv+0xb4>)
 8000cf2:	4a26      	ldr	r2, [pc, #152]	; (8000d8c <_ZL12MX_TIM3_Initv+0xb8>)
 8000cf4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cf6:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <_ZL12MX_TIM3_Initv+0xb4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <_ZL12MX_TIM3_Initv+0xb4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <_ZL12MX_TIM3_Initv+0xb4>)
 8000d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <_ZL12MX_TIM3_Initv+0xb4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <_ZL12MX_TIM3_Initv+0xb4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d16:	2301      	movs	r3, #1
 8000d18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4811      	ldr	r0, [pc, #68]	; (8000d88 <_ZL12MX_TIM3_Initv+0xb4>)
 8000d42:	f003 fb8d 	bl	8004460 <HAL_TIM_Encoder_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	bf14      	ite	ne
 8000d4c:	2301      	movne	r3, #1
 8000d4e:	2300      	moveq	r3, #0
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8000d56:	f000 f921 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	4619      	mov	r1, r3
 8000d66:	4808      	ldr	r0, [pc, #32]	; (8000d88 <_ZL12MX_TIM3_Initv+0xb4>)
 8000d68:	f004 fb10 	bl	800538c <HAL_TIMEx_MasterConfigSynchronization>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	bf14      	ite	ne
 8000d72:	2301      	movne	r3, #1
 8000d74:	2300      	moveq	r3, #0
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8000d7c:	f000 f90e 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	3730      	adds	r7, #48	; 0x30
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000170 	.word	0x20000170
 8000d8c:	40000400 	.word	0x40000400

08000d90 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d96:	f107 0320 	add.w	r3, r7, #32
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]
 8000dae:	615a      	str	r2, [r3, #20]
 8000db0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000db2:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <_ZL12MX_TIM5_Initv+0xe8>)
 8000db4:	4a31      	ldr	r2, [pc, #196]	; (8000e7c <_ZL12MX_TIM5_Initv+0xec>)
 8000db6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000db8:	4b2f      	ldr	r3, [pc, #188]	; (8000e78 <_ZL12MX_TIM5_Initv+0xe8>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbe:	4b2e      	ldr	r3, [pc, #184]	; (8000e78 <_ZL12MX_TIM5_Initv+0xe8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4799;
 8000dc4:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <_ZL12MX_TIM5_Initv+0xe8>)
 8000dc6:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000dca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <_ZL12MX_TIM5_Initv+0xe8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd2:	4b29      	ldr	r3, [pc, #164]	; (8000e78 <_ZL12MX_TIM5_Initv+0xe8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000dd8:	4827      	ldr	r0, [pc, #156]	; (8000e78 <_ZL12MX_TIM5_Initv+0xe8>)
 8000dda:	f003 fa42 	bl	8004262 <HAL_TIM_PWM_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	bf14      	ite	ne
 8000de4:	2301      	movne	r3, #1
 8000de6:	2300      	moveq	r3, #0
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <_ZL12MX_TIM5_Initv+0x62>
  {
    Error_Handler();
 8000dee:	f000 f8d5 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	4619      	mov	r1, r3
 8000e00:	481d      	ldr	r0, [pc, #116]	; (8000e78 <_ZL12MX_TIM5_Initv+0xe8>)
 8000e02:	f004 fac3 	bl	800538c <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bf14      	ite	ne
 8000e0c:	2301      	movne	r3, #1
 8000e0e:	2300      	moveq	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <_ZL12MX_TIM5_Initv+0x8a>
  {
    Error_Handler();
 8000e16:	f000 f8c1 	bl	8000f9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e1a:	2360      	movs	r3, #96	; 0x60
 8000e1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000e22:	2302      	movs	r3, #2
 8000e24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4811      	ldr	r0, [pc, #68]	; (8000e78 <_ZL12MX_TIM5_Initv+0xe8>)
 8000e32:	f003 fd51 	bl	80048d8 <HAL_TIM_PWM_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	bf14      	ite	ne
 8000e3c:	2301      	movne	r3, #1
 8000e3e:	2300      	moveq	r3, #0
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <_ZL12MX_TIM5_Initv+0xba>
  {
    Error_Handler();
 8000e46:	f000 f8a9 	bl	8000f9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4809      	ldr	r0, [pc, #36]	; (8000e78 <_ZL12MX_TIM5_Initv+0xe8>)
 8000e52:	f003 fd41 	bl	80048d8 <HAL_TIM_PWM_ConfigChannel>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	bf14      	ite	ne
 8000e5c:	2301      	movne	r3, #1
 8000e5e:	2300      	moveq	r3, #0
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 8000e66:	f000 f899 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000e6a:	4803      	ldr	r0, [pc, #12]	; (8000e78 <_ZL12MX_TIM5_Initv+0xe8>)
 8000e6c:	f000 f9fe 	bl	800126c <HAL_TIM_MspPostInit>

}
 8000e70:	bf00      	nop
 8000e72:	3728      	adds	r7, #40	; 0x28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200001b8 	.word	0x200001b8
 8000e7c:	40000c00 	.word	0x40000c00

08000e80 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000e86:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000e88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eb6:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000eb8:	f004 faea 	bl	8005490 <HAL_UART_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	bf14      	ite	ne
 8000ec2:	2301      	movne	r3, #1
 8000ec4:	2300      	moveq	r3, #0
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000ecc:	f000 f866 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000200 	.word	0x20000200
 8000ed8:	40011000 	.word	0x40011000

08000edc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <_ZL12MX_GPIO_Initv+0xb8>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <_ZL12MX_GPIO_Initv+0xb8>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <_ZL12MX_GPIO_Initv+0xb8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <_ZL12MX_GPIO_Initv+0xb8>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a1f      	ldr	r2, [pc, #124]	; (8000f94 <_ZL12MX_GPIO_Initv+0xb8>)
 8000f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <_ZL12MX_GPIO_Initv+0xb8>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <_ZL12MX_GPIO_Initv+0xb8>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <_ZL12MX_GPIO_Initv+0xb8>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <_ZL12MX_GPIO_Initv+0xb8>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <_ZL12MX_GPIO_Initv+0xb8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a11      	ldr	r2, [pc, #68]	; (8000f94 <_ZL12MX_GPIO_Initv+0xb8>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <_ZL12MX_GPIO_Initv+0xb8>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <_ZL12MX_GPIO_Initv+0xbc>)
 8000f6a:	f000 fe99 	bl	8001ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	4804      	ldr	r0, [pc, #16]	; (8000f98 <_ZL12MX_GPIO_Initv+0xbc>)
 8000f88:	f000 fd06 	bl	8001998 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020800 	.word	0x40020800

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <Error_Handler+0x8>
	...

08000fa8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d10c      	bne.n	8000fd2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d107      	bne.n	8000fd2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
Motor motor1 = Motor(&htim5,&htim3,TIM_CHANNEL_1,TIM_CHANNEL_2);
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000fca:	4905      	ldr	r1, [pc, #20]	; (8000fe0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8000fce:	f7ff fad9 	bl	8000584 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_ll>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000170 	.word	0x20000170
 8000fe0:	200001b8 	.word	0x200001b8
 8000fe4:	20000310 	.word	0x20000310

08000fe8 <_GLOBAL__sub_I_hi2c2>:
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f7ff ffd9 	bl	8000fa8 <_Z41__static_initialization_and_destruction_0ii>
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <HAL_MspInit+0x4c>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <HAL_MspInit+0x4c>)
 8001008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100c:	6453      	str	r3, [r2, #68]	; 0x44
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <HAL_MspInit+0x4c>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <HAL_MspInit+0x4c>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a08      	ldr	r2, [pc, #32]	; (8001044 <HAL_MspInit+0x4c>)
 8001024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_MspInit+0x4c>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800

08001048 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a2a      	ldr	r2, [pc, #168]	; (8001110 <HAL_I2C_MspInit+0xc8>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d14d      	bne.n	8001106 <HAL_I2C_MspInit+0xbe>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b29      	ldr	r3, [pc, #164]	; (8001114 <HAL_I2C_MspInit+0xcc>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a28      	ldr	r2, [pc, #160]	; (8001114 <HAL_I2C_MspInit+0xcc>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b26      	ldr	r3, [pc, #152]	; (8001114 <HAL_I2C_MspInit+0xcc>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800108a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800108c:	2312      	movs	r3, #18
 800108e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001098:	2304      	movs	r3, #4
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	481d      	ldr	r0, [pc, #116]	; (8001118 <HAL_I2C_MspInit+0xd0>)
 80010a4:	f000 fc78 	bl	8001998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ae:	2312      	movs	r3, #18
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80010ba:	2309      	movs	r3, #9
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4814      	ldr	r0, [pc, #80]	; (8001118 <HAL_I2C_MspInit+0xd0>)
 80010c6:	f000 fc67 	bl	8001998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_I2C_MspInit+0xcc>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a10      	ldr	r2, [pc, #64]	; (8001114 <HAL_I2C_MspInit+0xcc>)
 80010d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_I2C_MspInit+0xcc>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	2021      	movs	r0, #33	; 0x21
 80010ec:	f000 fb7d 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80010f0:	2021      	movs	r0, #33	; 0x21
 80010f2:	f000 fb96 	bl	8001822 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	2022      	movs	r0, #34	; 0x22
 80010fc:	f000 fb75 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001100:	2022      	movs	r0, #34	; 0x22
 8001102:	f000 fb8e 	bl	8001822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	; 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40005800 	.word	0x40005800
 8001114:	40023800 	.word	0x40023800
 8001118:	40020400 	.word	0x40020400

0800111c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a15      	ldr	r2, [pc, #84]	; (8001180 <HAL_TIM_Base_MspInit+0x64>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d10e      	bne.n	800114c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_TIM_Base_MspInit+0x68>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	4a13      	ldr	r2, [pc, #76]	; (8001184 <HAL_TIM_Base_MspInit+0x68>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6453      	str	r3, [r2, #68]	; 0x44
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_TIM_Base_MspInit+0x68>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800114a:	e012      	b.n	8001172 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001154:	d10d      	bne.n	8001172 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_TIM_Base_MspInit+0x68>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	4a09      	ldr	r2, [pc, #36]	; (8001184 <HAL_TIM_Base_MspInit+0x68>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6413      	str	r3, [r2, #64]	; 0x40
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <HAL_TIM_Base_MspInit+0x68>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
}
 8001172:	bf00      	nop
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40010000 	.word	0x40010000
 8001184:	40023800 	.word	0x40023800

08001188 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a1d      	ldr	r2, [pc, #116]	; (800121c <HAL_TIM_Encoder_MspInit+0x94>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d133      	bne.n	8001212 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <HAL_TIM_Encoder_MspInit+0x98>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <HAL_TIM_Encoder_MspInit+0x98>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_TIM_Encoder_MspInit+0x98>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_TIM_Encoder_MspInit+0x98>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a14      	ldr	r2, [pc, #80]	; (8001220 <HAL_TIM_Encoder_MspInit+0x98>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_TIM_Encoder_MspInit+0x98>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011e2:	2330      	movs	r3, #48	; 0x30
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e6:	2312      	movs	r3, #18
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011f2:	2302      	movs	r3, #2
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4809      	ldr	r0, [pc, #36]	; (8001224 <HAL_TIM_Encoder_MspInit+0x9c>)
 80011fe:	f000 fbcb 	bl	8001998 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	201d      	movs	r0, #29
 8001208:	f000 faef 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800120c:	201d      	movs	r0, #29
 800120e:	f000 fb08 	bl	8001822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001212:	bf00      	nop
 8001214:	3728      	adds	r7, #40	; 0x28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40000400 	.word	0x40000400
 8001220:	40023800 	.word	0x40023800
 8001224:	40020400 	.word	0x40020400

08001228 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <HAL_TIM_PWM_MspInit+0x3c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d10d      	bne.n	8001256 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_TIM_PWM_MspInit+0x40>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a09      	ldr	r2, [pc, #36]	; (8001268 <HAL_TIM_PWM_MspInit+0x40>)
 8001244:	f043 0308 	orr.w	r3, r3, #8
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <HAL_TIM_PWM_MspInit+0x40>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40000c00 	.word	0x40000c00
 8001268:	40023800 	.word	0x40023800

0800126c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <HAL_TIM_MspPostInit+0x68>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d11d      	bne.n	80012ca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <HAL_TIM_MspPostInit+0x6c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a10      	ldr	r2, [pc, #64]	; (80012d8 <HAL_TIM_MspPostInit+0x6c>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_TIM_MspPostInit+0x6c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012aa:	2303      	movs	r3, #3
 80012ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <HAL_TIM_MspPostInit+0x70>)
 80012c6:	f000 fb67 	bl	8001998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3720      	adds	r7, #32
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40000c00 	.word	0x40000c00
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020000 	.word	0x40020000

080012e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a1d      	ldr	r2, [pc, #116]	; (8001374 <HAL_UART_MspInit+0x94>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d134      	bne.n	800136c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <HAL_UART_MspInit+0x98>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <HAL_UART_MspInit+0x98>)
 800130c:	f043 0310 	orr.w	r3, r3, #16
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_UART_MspInit+0x98>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_UART_MspInit+0x98>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a14      	ldr	r2, [pc, #80]	; (8001378 <HAL_UART_MspInit+0x98>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_UART_MspInit+0x98>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800133a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800134c:	2307      	movs	r3, #7
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	4809      	ldr	r0, [pc, #36]	; (800137c <HAL_UART_MspInit+0x9c>)
 8001358:	f000 fb1e 	bl	8001998 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	2100      	movs	r1, #0
 8001360:	2025      	movs	r0, #37	; 0x25
 8001362:	f000 fa42 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001366:	2025      	movs	r0, #37	; 0x25
 8001368:	f000 fa5b 	bl	8001822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40011000 	.word	0x40011000
 8001378:	40023800 	.word	0x40023800
 800137c:	40020000 	.word	0x40020000

08001380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <NMI_Handler+0x4>

08001386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <HardFault_Handler+0x4>

0800138c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <MemManage_Handler+0x4>

08001392 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <BusFault_Handler+0x4>

08001398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <UsageFault_Handler+0x4>

0800139e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013cc:	f000 f8ee 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <TIM3_IRQHandler+0x10>)
 80013da:	f003 f975 	bl	80046c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000170 	.word	0x20000170

080013e8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <I2C2_EV_IRQHandler+0x10>)
 80013ee:	f000 fdb5 	bl	8001f5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000008c 	.word	0x2000008c

080013fc <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <I2C2_ER_IRQHandler+0x10>)
 8001402:	f000 ff1c 	bl	800223e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000008c 	.word	0x2000008c

08001410 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <USART1_IRQHandler+0x10>)
 8001416:	f004 f91b 	bl	8005650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000200 	.word	0x20000200

08001424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800142c:	4a14      	ldr	r2, [pc, #80]	; (8001480 <_sbrk+0x5c>)
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <_sbrk+0x60>)
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <_sbrk+0x64>)
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <_sbrk+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	429a      	cmp	r2, r3
 8001452:	d207      	bcs.n	8001464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001454:	f005 f830 	bl	80064b8 <__errno>
 8001458:	4603      	mov	r3, r0
 800145a:	220c      	movs	r2, #12
 800145c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	e009      	b.n	8001478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <_sbrk+0x64>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <_sbrk+0x64>)
 8001474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20020000 	.word	0x20020000
 8001484:	00000400 	.word	0x00000400
 8001488:	2000034c 	.word	0x2000034c
 800148c:	20000368 	.word	0x20000368

08001490 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <SystemInit+0x20>)
 8001496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <SystemInit+0x20>)
 800149c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014b8:	480d      	ldr	r0, [pc, #52]	; (80014f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ba:	490e      	ldr	r1, [pc, #56]	; (80014f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014bc:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c0:	e002      	b.n	80014c8 <LoopCopyDataInit>

080014c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c6:	3304      	adds	r3, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014cc:	d3f9      	bcc.n	80014c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ce:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014d0:	4c0b      	ldr	r4, [pc, #44]	; (8001500 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d4:	e001      	b.n	80014da <LoopFillZerobss>

080014d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d8:	3204      	adds	r2, #4

080014da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014dc:	d3fb      	bcc.n	80014d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014de:	f7ff ffd7 	bl	8001490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014e2:	f004 ffef 	bl	80064c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e6:	f7ff fa23 	bl	8000930 <main>
  bx  lr    
 80014ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014f8:	08006eb0 	.word	0x08006eb0
  ldr r2, =_sbss
 80014fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001500:	20000364 	.word	0x20000364

08001504 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001504:	e7fe      	b.n	8001504 <ADC_IRQHandler>
	...

08001508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <HAL_Init+0x40>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <HAL_Init+0x40>)
 8001512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001516:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_Init+0x40>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_Init+0x40>)
 800151e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001522:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_Init+0x40>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_Init+0x40>)
 800152a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001530:	2003      	movs	r0, #3
 8001532:	f000 f94f 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001536:	200f      	movs	r0, #15
 8001538:	f000 f808 	bl	800154c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800153c:	f7ff fd5c 	bl	8000ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023c00 	.word	0x40023c00

0800154c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_InitTick+0x54>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_InitTick+0x58>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001562:	fbb3 f3f1 	udiv	r3, r3, r1
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f967 	bl	800183e <HAL_SYSTICK_Config>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e00e      	b.n	8001598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d80a      	bhi.n	8001596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001580:	2200      	movs	r2, #0
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f000 f92f 	bl	80017ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <HAL_InitTick+0x5c>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000000 	.word	0x20000000
 80015a4:	20000008 	.word	0x20000008
 80015a8:	20000004 	.word	0x20000004

080015ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x20>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_IncTick+0x24>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <HAL_IncTick+0x24>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000008 	.word	0x20000008
 80015d0:	20000350 	.word	0x20000350

080015d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_GetTick+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000350 	.word	0x20000350

080015ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff ffee 	bl	80015d4 <HAL_GetTick>
 80015f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001604:	d005      	beq.n	8001612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_Delay+0x44>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001612:	bf00      	nop
 8001614:	f7ff ffde 	bl	80015d4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	429a      	cmp	r2, r3
 8001622:	d8f7      	bhi.n	8001614 <HAL_Delay+0x28>
  {
  }
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000008 	.word	0x20000008

08001634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800165c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001666:	4a04      	ldr	r2, [pc, #16]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60d3      	str	r3, [r2, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db0b      	blt.n	80016c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 021f 	and.w	r2, r3, #31
 80016b0:	4907      	ldr	r1, [pc, #28]	; (80016d0 <__NVIC_EnableIRQ+0x38>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	2001      	movs	r0, #1
 80016ba:	fa00 f202 	lsl.w	r2, r0, r2
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100

080016d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	db0a      	blt.n	80016fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	490c      	ldr	r1, [pc, #48]	; (8001720 <__NVIC_SetPriority+0x4c>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	440b      	add	r3, r1
 80016f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016fc:	e00a      	b.n	8001714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4908      	ldr	r1, [pc, #32]	; (8001724 <__NVIC_SetPriority+0x50>)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	3b04      	subs	r3, #4
 800170c:	0112      	lsls	r2, r2, #4
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	440b      	add	r3, r1
 8001712:	761a      	strb	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f1c3 0307 	rsb	r3, r3, #7
 8001742:	2b04      	cmp	r3, #4
 8001744:	bf28      	it	cs
 8001746:	2304      	movcs	r3, #4
 8001748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3304      	adds	r3, #4
 800174e:	2b06      	cmp	r3, #6
 8001750:	d902      	bls.n	8001758 <NVIC_EncodePriority+0x30>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3b03      	subs	r3, #3
 8001756:	e000      	b.n	800175a <NVIC_EncodePriority+0x32>
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	f04f 32ff 	mov.w	r2, #4294967295
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	401a      	ands	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001770:	f04f 31ff 	mov.w	r1, #4294967295
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43d9      	mvns	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	4313      	orrs	r3, r2
         );
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	; 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f7ff ff8e 	bl	80016d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff29 	bl	8001634 <__NVIC_SetPriorityGrouping>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017fc:	f7ff ff3e 	bl	800167c <__NVIC_GetPriorityGrouping>
 8001800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ff8e 	bl	8001728 <NVIC_EncodePriority>
 800180c:	4602      	mov	r2, r0
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff5d 	bl	80016d4 <__NVIC_SetPriority>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff31 	bl	8001698 <__NVIC_EnableIRQ>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ffa2 	bl	8001790 <SysTick_Config>
 800184c:	4603      	mov	r3, r0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001864:	f7ff feb6 	bl	80015d4 <HAL_GetTick>
 8001868:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d008      	beq.n	8001888 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2280      	movs	r2, #128	; 0x80
 800187a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e052      	b.n	800192e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0216 	bic.w	r2, r2, #22
 8001896:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d103      	bne.n	80018b8 <HAL_DMA_Abort+0x62>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d007      	beq.n	80018c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0208 	bic.w	r2, r2, #8
 80018c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0201 	bic.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d8:	e013      	b.n	8001902 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018da:	f7ff fe7b 	bl	80015d4 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	d90c      	bls.n	8001902 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2220      	movs	r2, #32
 80018ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2203      	movs	r2, #3
 80018f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e015      	b.n	800192e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1e4      	bne.n	80018da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001914:	223f      	movs	r2, #63	; 0x3f
 8001916:	409a      	lsls	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d004      	beq.n	8001954 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2280      	movs	r2, #128	; 0x80
 800194e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e00c      	b.n	800196e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2205      	movs	r2, #5
 8001958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0201 	bic.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001988:	b2db      	uxtb	r3, r3
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	e159      	b.n	8001c68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019b4:	2201      	movs	r2, #1
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	f040 8148 	bne.w	8001c62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d005      	beq.n	80019ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d130      	bne.n	8001a4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	2203      	movs	r2, #3
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a20:	2201      	movs	r2, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 0201 	and.w	r2, r3, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d017      	beq.n	8001a88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2203      	movs	r2, #3
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d123      	bne.n	8001adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	08da      	lsrs	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3208      	adds	r2, #8
 8001a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	220f      	movs	r2, #15
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	08da      	lsrs	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3208      	adds	r2, #8
 8001ad6:	69b9      	ldr	r1, [r7, #24]
 8001ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0203 	and.w	r2, r3, #3
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80a2 	beq.w	8001c62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b57      	ldr	r3, [pc, #348]	; (8001c80 <HAL_GPIO_Init+0x2e8>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	4a56      	ldr	r2, [pc, #344]	; (8001c80 <HAL_GPIO_Init+0x2e8>)
 8001b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2e:	4b54      	ldr	r3, [pc, #336]	; (8001c80 <HAL_GPIO_Init+0x2e8>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b3a:	4a52      	ldr	r2, [pc, #328]	; (8001c84 <HAL_GPIO_Init+0x2ec>)
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	3302      	adds	r3, #2
 8001b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	220f      	movs	r2, #15
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a49      	ldr	r2, [pc, #292]	; (8001c88 <HAL_GPIO_Init+0x2f0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d019      	beq.n	8001b9a <HAL_GPIO_Init+0x202>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a48      	ldr	r2, [pc, #288]	; (8001c8c <HAL_GPIO_Init+0x2f4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d013      	beq.n	8001b96 <HAL_GPIO_Init+0x1fe>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a47      	ldr	r2, [pc, #284]	; (8001c90 <HAL_GPIO_Init+0x2f8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00d      	beq.n	8001b92 <HAL_GPIO_Init+0x1fa>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a46      	ldr	r2, [pc, #280]	; (8001c94 <HAL_GPIO_Init+0x2fc>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <HAL_GPIO_Init+0x1f6>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a45      	ldr	r2, [pc, #276]	; (8001c98 <HAL_GPIO_Init+0x300>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_GPIO_Init+0x1f2>
 8001b86:	2304      	movs	r3, #4
 8001b88:	e008      	b.n	8001b9c <HAL_GPIO_Init+0x204>
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	e006      	b.n	8001b9c <HAL_GPIO_Init+0x204>
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e004      	b.n	8001b9c <HAL_GPIO_Init+0x204>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e002      	b.n	8001b9c <HAL_GPIO_Init+0x204>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_GPIO_Init+0x204>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	69fa      	ldr	r2, [r7, #28]
 8001b9e:	f002 0203 	and.w	r2, r2, #3
 8001ba2:	0092      	lsls	r2, r2, #2
 8001ba4:	4093      	lsls	r3, r2
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bac:	4935      	ldr	r1, [pc, #212]	; (8001c84 <HAL_GPIO_Init+0x2ec>)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	089b      	lsrs	r3, r3, #2
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bba:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <HAL_GPIO_Init+0x304>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bde:	4a2f      	ldr	r2, [pc, #188]	; (8001c9c <HAL_GPIO_Init+0x304>)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001be4:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_GPIO_Init+0x304>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c08:	4a24      	ldr	r2, [pc, #144]	; (8001c9c <HAL_GPIO_Init+0x304>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c0e:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <HAL_GPIO_Init+0x304>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c32:	4a1a      	ldr	r2, [pc, #104]	; (8001c9c <HAL_GPIO_Init+0x304>)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c38:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <HAL_GPIO_Init+0x304>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <HAL_GPIO_Init+0x304>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3301      	adds	r3, #1
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	2b0f      	cmp	r3, #15
 8001c6c:	f67f aea2 	bls.w	80019b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	3724      	adds	r7, #36	; 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40013800 	.word	0x40013800
 8001c88:	40020000 	.word	0x40020000
 8001c8c:	40020400 	.word	0x40020400
 8001c90:	40020800 	.word	0x40020800
 8001c94:	40020c00 	.word	0x40020c00
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40013c00 	.word	0x40013c00

08001ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	807b      	strh	r3, [r7, #2]
 8001cac:	4613      	mov	r3, r2
 8001cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cb0:	787b      	ldrb	r3, [r7, #1]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb6:	887a      	ldrh	r2, [r7, #2]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cbc:	e003      	b.n	8001cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cbe:	887b      	ldrh	r3, [r7, #2]
 8001cc0:	041a      	lsls	r2, r3, #16
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	619a      	str	r2, [r3, #24]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e12b      	b.n	8001f3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff f9a4 	bl	8001048 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2224      	movs	r2, #36	; 0x24
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0201 	bic.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d38:	f002 fa1c 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
 8001d3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4a81      	ldr	r2, [pc, #516]	; (8001f48 <HAL_I2C_Init+0x274>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d807      	bhi.n	8001d58 <HAL_I2C_Init+0x84>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4a80      	ldr	r2, [pc, #512]	; (8001f4c <HAL_I2C_Init+0x278>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	bf94      	ite	ls
 8001d50:	2301      	movls	r3, #1
 8001d52:	2300      	movhi	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	e006      	b.n	8001d66 <HAL_I2C_Init+0x92>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4a7d      	ldr	r2, [pc, #500]	; (8001f50 <HAL_I2C_Init+0x27c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	bf94      	ite	ls
 8001d60:	2301      	movls	r3, #1
 8001d62:	2300      	movhi	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e0e7      	b.n	8001f3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4a78      	ldr	r2, [pc, #480]	; (8001f54 <HAL_I2C_Init+0x280>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	0c9b      	lsrs	r3, r3, #18
 8001d78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4a6a      	ldr	r2, [pc, #424]	; (8001f48 <HAL_I2C_Init+0x274>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d802      	bhi.n	8001da8 <HAL_I2C_Init+0xd4>
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	3301      	adds	r3, #1
 8001da6:	e009      	b.n	8001dbc <HAL_I2C_Init+0xe8>
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dae:	fb02 f303 	mul.w	r3, r2, r3
 8001db2:	4a69      	ldr	r2, [pc, #420]	; (8001f58 <HAL_I2C_Init+0x284>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	099b      	lsrs	r3, r3, #6
 8001dba:	3301      	adds	r3, #1
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	495c      	ldr	r1, [pc, #368]	; (8001f48 <HAL_I2C_Init+0x274>)
 8001dd8:	428b      	cmp	r3, r1
 8001dda:	d819      	bhi.n	8001e10 <HAL_I2C_Init+0x13c>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1e59      	subs	r1, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dea:	1c59      	adds	r1, r3, #1
 8001dec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001df0:	400b      	ands	r3, r1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00a      	beq.n	8001e0c <HAL_I2C_Init+0x138>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1e59      	subs	r1, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e04:	3301      	adds	r3, #1
 8001e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0a:	e051      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	e04f      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d111      	bne.n	8001e3c <HAL_I2C_Init+0x168>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1e58      	subs	r0, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6859      	ldr	r1, [r3, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	440b      	add	r3, r1
 8001e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf0c      	ite	eq
 8001e34:	2301      	moveq	r3, #1
 8001e36:	2300      	movne	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	e012      	b.n	8001e62 <HAL_I2C_Init+0x18e>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1e58      	subs	r0, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	0099      	lsls	r1, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_I2C_Init+0x196>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e022      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10e      	bne.n	8001e90 <HAL_I2C_Init+0x1bc>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1e58      	subs	r0, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6859      	ldr	r1, [r3, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	440b      	add	r3, r1
 8001e80:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e84:	3301      	adds	r3, #1
 8001e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8e:	e00f      	b.n	8001eb0 <HAL_I2C_Init+0x1dc>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e58      	subs	r0, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	0099      	lsls	r1, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	6809      	ldr	r1, [r1, #0]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ede:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6911      	ldr	r1, [r2, #16]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68d2      	ldr	r2, [r2, #12]
 8001eea:	4311      	orrs	r1, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	000186a0 	.word	0x000186a0
 8001f4c:	001e847f 	.word	0x001e847f
 8001f50:	003d08ff 	.word	0x003d08ff
 8001f54:	431bde83 	.word	0x431bde83
 8001f58:	10624dd3 	.word	0x10624dd3

08001f5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f7c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f84:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	2b10      	cmp	r3, #16
 8001f8a:	d003      	beq.n	8001f94 <HAL_I2C_EV_IRQHandler+0x38>
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	2b40      	cmp	r3, #64	; 0x40
 8001f90:	f040 80c1 	bne.w	8002116 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10d      	bne.n	8001fca <HAL_I2C_EV_IRQHandler+0x6e>
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001fb4:	d003      	beq.n	8001fbe <HAL_I2C_EV_IRQHandler+0x62>
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001fbc:	d101      	bne.n	8001fc2 <HAL_I2C_EV_IRQHandler+0x66>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_I2C_EV_IRQHandler+0x68>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	f000 8132 	beq.w	800222e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00c      	beq.n	8001fee <HAL_I2C_EV_IRQHandler+0x92>
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	0a5b      	lsrs	r3, r3, #9
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d006      	beq.n	8001fee <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f001 fc7b 	bl	80038dc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fd83 	bl	8002af2 <I2C_Master_SB>
 8001fec:	e092      	b.n	8002114 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d009      	beq.n	800200e <HAL_I2C_EV_IRQHandler+0xb2>
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	0a5b      	lsrs	r3, r3, #9
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 fdf9 	bl	8002bfe <I2C_Master_ADD10>
 800200c:	e082      	b.n	8002114 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	085b      	lsrs	r3, r3, #1
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <HAL_I2C_EV_IRQHandler+0xd2>
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	0a5b      	lsrs	r3, r3, #9
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fe13 	bl	8002c52 <I2C_Master_ADDR>
 800202c:	e072      	b.n	8002114 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d03b      	beq.n	80020b2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002048:	f000 80f3 	beq.w	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	09db      	lsrs	r3, r3, #7
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00f      	beq.n	8002078 <HAL_I2C_EV_IRQHandler+0x11c>
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	0a9b      	lsrs	r3, r3, #10
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d009      	beq.n	8002078 <HAL_I2C_EV_IRQHandler+0x11c>
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d103      	bne.n	8002078 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f9f3 	bl	800245c <I2C_MasterTransmit_TXE>
 8002076:	e04d      	b.n	8002114 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80d6 	beq.w	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	0a5b      	lsrs	r3, r3, #9
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 80cf 	beq.w	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002094:	7bbb      	ldrb	r3, [r7, #14]
 8002096:	2b21      	cmp	r3, #33	; 0x21
 8002098:	d103      	bne.n	80020a2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fa7a 	bl	8002594 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020a0:	e0c7      	b.n	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	2b40      	cmp	r3, #64	; 0x40
 80020a6:	f040 80c4 	bne.w	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fae8 	bl	8002680 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020b0:	e0bf      	b.n	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020c0:	f000 80b7 	beq.w	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	099b      	lsrs	r3, r3, #6
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00f      	beq.n	80020f0 <HAL_I2C_EV_IRQHandler+0x194>
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	0a9b      	lsrs	r3, r3, #10
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d009      	beq.n	80020f0 <HAL_I2C_EV_IRQHandler+0x194>
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	089b      	lsrs	r3, r3, #2
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d103      	bne.n	80020f0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 fb5d 	bl	80027a8 <I2C_MasterReceive_RXNE>
 80020ee:	e011      	b.n	8002114 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 809a 	beq.w	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	0a5b      	lsrs	r3, r3, #9
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8093 	beq.w	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 fc06 	bl	800291e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002112:	e08e      	b.n	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002114:	e08d      	b.n	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	2b00      	cmp	r3, #0
 800211c:	d004      	beq.n	8002128 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	e007      	b.n	8002138 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d012      	beq.n	800216a <HAL_I2C_EV_IRQHandler+0x20e>
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	0a5b      	lsrs	r3, r3, #9
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00c      	beq.n	800216a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002160:	69b9      	ldr	r1, [r7, #24]
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 ffc4 	bl	80030f0 <I2C_Slave_ADDR>
 8002168:	e066      	b.n	8002238 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d009      	beq.n	800218a <HAL_I2C_EV_IRQHandler+0x22e>
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	0a5b      	lsrs	r3, r3, #9
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 fffe 	bl	8003184 <I2C_Slave_STOPF>
 8002188:	e056      	b.n	8002238 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800218a:	7bbb      	ldrb	r3, [r7, #14]
 800218c:	2b21      	cmp	r3, #33	; 0x21
 800218e:	d002      	beq.n	8002196 <HAL_I2C_EV_IRQHandler+0x23a>
 8002190:	7bbb      	ldrb	r3, [r7, #14]
 8002192:	2b29      	cmp	r3, #41	; 0x29
 8002194:	d125      	bne.n	80021e2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	09db      	lsrs	r3, r3, #7
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00f      	beq.n	80021c2 <HAL_I2C_EV_IRQHandler+0x266>
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	0a9b      	lsrs	r3, r3, #10
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <HAL_I2C_EV_IRQHandler+0x266>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	089b      	lsrs	r3, r3, #2
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d103      	bne.n	80021c2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 feda 	bl	8002f74 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021c0:	e039      	b.n	8002236 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	089b      	lsrs	r3, r3, #2
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d033      	beq.n	8002236 <HAL_I2C_EV_IRQHandler+0x2da>
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	0a5b      	lsrs	r3, r3, #9
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d02d      	beq.n	8002236 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 ff07 	bl	8002fee <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021e0:	e029      	b.n	8002236 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	099b      	lsrs	r3, r3, #6
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00f      	beq.n	800220e <HAL_I2C_EV_IRQHandler+0x2b2>
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	0a9b      	lsrs	r3, r3, #10
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <HAL_I2C_EV_IRQHandler+0x2b2>
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d103      	bne.n	800220e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 ff12 	bl	8003030 <I2C_SlaveReceive_RXNE>
 800220c:	e014      	b.n	8002238 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00e      	beq.n	8002238 <HAL_I2C_EV_IRQHandler+0x2dc>
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	0a5b      	lsrs	r3, r3, #9
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 ff40 	bl	80030ac <I2C_SlaveReceive_BTF>
 800222c:	e004      	b.n	8002238 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800222e:	bf00      	nop
 8002230:	e002      	b.n	8002238 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002232:	bf00      	nop
 8002234:	e000      	b.n	8002238 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002236:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002238:	3720      	adds	r7, #32
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b08a      	sub	sp, #40	; 0x28
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002260:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00e      	beq.n	800228c <HAL_I2C_ER_IRQHandler+0x4e>
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d008      	beq.n	800228c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800228a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	0a5b      	lsrs	r3, r3, #9
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00e      	beq.n	80022b6 <HAL_I2C_ER_IRQHandler+0x78>
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	0a1b      	lsrs	r3, r3, #8
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	f043 0302 	orr.w	r3, r3, #2
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80022b4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	0a9b      	lsrs	r3, r3, #10
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d03f      	beq.n	8002342 <HAL_I2C_ER_IRQHandler+0x104>
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d039      	beq.n	8002342 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80022ce:	7efb      	ldrb	r3, [r7, #27]
 80022d0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80022e8:	7ebb      	ldrb	r3, [r7, #26]
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d112      	bne.n	8002314 <HAL_I2C_ER_IRQHandler+0xd6>
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10f      	bne.n	8002314 <HAL_I2C_ER_IRQHandler+0xd6>
 80022f4:	7cfb      	ldrb	r3, [r7, #19]
 80022f6:	2b21      	cmp	r3, #33	; 0x21
 80022f8:	d008      	beq.n	800230c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80022fa:	7cfb      	ldrb	r3, [r7, #19]
 80022fc:	2b29      	cmp	r3, #41	; 0x29
 80022fe:	d005      	beq.n	800230c <HAL_I2C_ER_IRQHandler+0xce>
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	2b28      	cmp	r3, #40	; 0x28
 8002304:	d106      	bne.n	8002314 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b21      	cmp	r3, #33	; 0x21
 800230a:	d103      	bne.n	8002314 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f001 f869 	bl	80033e4 <I2C_Slave_AF>
 8002312:	e016      	b.n	8002342 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800231c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002326:	7efb      	ldrb	r3, [r7, #27]
 8002328:	2b10      	cmp	r3, #16
 800232a:	d002      	beq.n	8002332 <HAL_I2C_ER_IRQHandler+0xf4>
 800232c:	7efb      	ldrb	r3, [r7, #27]
 800232e:	2b40      	cmp	r3, #64	; 0x40
 8002330:	d107      	bne.n	8002342 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002340:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	0adb      	lsrs	r3, r3, #11
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00e      	beq.n	800236c <HAL_I2C_ER_IRQHandler+0x12e>
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d008      	beq.n	800236c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	f043 0308 	orr.w	r3, r3, #8
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800236a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	2b00      	cmp	r3, #0
 8002370:	d008      	beq.n	8002384 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f001 f8a0 	bl	80034c4 <I2C_ITError>
  }
}
 8002384:	bf00      	nop
 8002386:	3728      	adds	r7, #40	; 0x28
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	70fb      	strb	r3, [r7, #3]
 80023e8:	4613      	mov	r3, r2
 80023ea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800246a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002472:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247e:	2b00      	cmp	r3, #0
 8002480:	d150      	bne.n	8002524 <I2C_MasterTransmit_TXE+0xc8>
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	2b21      	cmp	r3, #33	; 0x21
 8002486:	d14d      	bne.n	8002524 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b08      	cmp	r3, #8
 800248c:	d01d      	beq.n	80024ca <I2C_MasterTransmit_TXE+0x6e>
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b20      	cmp	r3, #32
 8002492:	d01a      	beq.n	80024ca <I2C_MasterTransmit_TXE+0x6e>
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800249a:	d016      	beq.n	80024ca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024aa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2211      	movs	r2, #17
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ff62 	bl	800238c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024c8:	e060      	b.n	800258c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024d8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b40      	cmp	r3, #64	; 0x40
 8002502:	d107      	bne.n	8002514 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff7d 	bl	800240c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002512:	e03b      	b.n	800258c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ff35 	bl	800238c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002522:	e033      	b.n	800258c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	2b21      	cmp	r3, #33	; 0x21
 8002528:	d005      	beq.n	8002536 <I2C_MasterTransmit_TXE+0xda>
 800252a:	7bbb      	ldrb	r3, [r7, #14]
 800252c:	2b40      	cmp	r3, #64	; 0x40
 800252e:	d12d      	bne.n	800258c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	2b22      	cmp	r3, #34	; 0x22
 8002534:	d12a      	bne.n	800258c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253a:	b29b      	uxth	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d108      	bne.n	8002552 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800254e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002550:	e01c      	b.n	800258c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b40      	cmp	r3, #64	; 0x40
 800255c:	d103      	bne.n	8002566 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f88e 	bl	8002680 <I2C_MemoryTransmit_TXE_BTF>
}
 8002564:	e012      	b.n	800258c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	781a      	ldrb	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800258a:	e7ff      	b.n	800258c <I2C_MasterTransmit_TXE+0x130>
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b21      	cmp	r3, #33	; 0x21
 80025ac:	d164      	bne.n	8002678 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d012      	beq.n	80025de <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80025dc:	e04c      	b.n	8002678 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d01d      	beq.n	8002620 <I2C_MasterTransmit_BTF+0x8c>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	d01a      	beq.n	8002620 <I2C_MasterTransmit_BTF+0x8c>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025f0:	d016      	beq.n	8002620 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002600:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2211      	movs	r2, #17
 8002606:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7ff feb7 	bl	800238c <HAL_I2C_MasterTxCpltCallback>
}
 800261e:	e02b      	b.n	8002678 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800262e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2220      	movs	r2, #32
 800264a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b40      	cmp	r3, #64	; 0x40
 8002658:	d107      	bne.n	800266a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff fed2 	bl	800240c <HAL_I2C_MemTxCpltCallback>
}
 8002668:	e006      	b.n	8002678 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff fe8a 	bl	800238c <HAL_I2C_MasterTxCpltCallback>
}
 8002678:	bf00      	nop
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002694:	2b00      	cmp	r3, #0
 8002696:	d11d      	bne.n	80026d4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269c:	2b01      	cmp	r3, #1
 800269e:	d10b      	bne.n	80026b8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b0:	1c9a      	adds	r2, r3, #2
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80026b6:	e073      	b.n	80027a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026bc:	b29b      	uxth	r3, r3
 80026be:	121b      	asrs	r3, r3, #8
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80026d2:	e065      	b.n	80027a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d10b      	bne.n	80026f4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80026f2:	e055      	b.n	80027a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d151      	bne.n	80027a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	2b22      	cmp	r3, #34	; 0x22
 8002700:	d10d      	bne.n	800271e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002710:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800271c:	e040      	b.n	80027a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002722:	b29b      	uxth	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d015      	beq.n	8002754 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	2b21      	cmp	r3, #33	; 0x21
 800272c:	d112      	bne.n	8002754 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	781a      	ldrb	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002752:	e025      	b.n	80027a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d120      	bne.n	80027a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	2b21      	cmp	r3, #33	; 0x21
 8002762:	d11d      	bne.n	80027a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002772:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002782:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff fe36 	bl	800240c <HAL_I2C_MemTxCpltCallback>
}
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b22      	cmp	r3, #34	; 0x22
 80027ba:	f040 80ac 	bne.w	8002916 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d921      	bls.n	8002810 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	f040 808c 	bne.w	8002916 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800280c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800280e:	e082      	b.n	8002916 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	2b02      	cmp	r3, #2
 8002816:	d075      	beq.n	8002904 <I2C_MasterReceive_RXNE+0x15c>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d002      	beq.n	8002824 <I2C_MasterReceive_RXNE+0x7c>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d16f      	bne.n	8002904 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f001 f827 	bl	8003878 <I2C_WaitOnSTOPRequestThroughIT>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d142      	bne.n	80028b6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800283e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800284e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b40      	cmp	r3, #64	; 0x40
 8002888:	d10a      	bne.n	80028a0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff fdc1 	bl	8002420 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800289e:	e03a      	b.n	8002916 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2212      	movs	r2, #18
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff fd76 	bl	80023a0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80028b4:	e02f      	b.n	8002916 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028c4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff fd99 	bl	8002434 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002902:	e008      	b.n	8002916 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002912:	605a      	str	r2, [r3, #4]
}
 8002914:	e7ff      	b.n	8002916 <I2C_MasterReceive_RXNE+0x16e>
 8002916:	bf00      	nop
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b04      	cmp	r3, #4
 8002934:	d11b      	bne.n	800296e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002944:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800296c:	e0bd      	b.n	8002aea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b03      	cmp	r3, #3
 8002976:	d129      	bne.n	80029cc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002986:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b04      	cmp	r3, #4
 800298c:	d00a      	beq.n	80029a4 <I2C_MasterReceive_BTF+0x86>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d007      	beq.n	80029a4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80029ca:	e08e      	b.n	8002aea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d176      	bne.n	8002ac4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d002      	beq.n	80029e2 <I2C_MasterReceive_BTF+0xc4>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b10      	cmp	r3, #16
 80029e0:	d108      	bne.n	80029f4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e019      	b.n	8002a28 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d002      	beq.n	8002a00 <I2C_MasterReceive_BTF+0xe2>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d108      	bne.n	8002a12 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	e00a      	b.n	8002a28 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b10      	cmp	r3, #16
 8002a16:	d007      	beq.n	8002a28 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a26:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a82:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b40      	cmp	r3, #64	; 0x40
 8002a96:	d10a      	bne.n	8002aae <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff fcba 	bl	8002420 <HAL_I2C_MemRxCpltCallback>
}
 8002aac:	e01d      	b.n	8002aea <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2212      	movs	r2, #18
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff fc6f 	bl	80023a0 <HAL_I2C_MasterRxCpltCallback>
}
 8002ac2:	e012      	b.n	8002aea <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b40      	cmp	r3, #64	; 0x40
 8002b04:	d117      	bne.n	8002b36 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b1e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002b20:	e067      	b.n	8002bf2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	611a      	str	r2, [r3, #16]
}
 8002b34:	e05d      	b.n	8002bf2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b3e:	d133      	bne.n	8002ba8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b21      	cmp	r3, #33	; 0x21
 8002b4a:	d109      	bne.n	8002b60 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b5c:	611a      	str	r2, [r3, #16]
 8002b5e:	e008      	b.n	8002b72 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d004      	beq.n	8002b84 <I2C_Master_SB+0x92>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d108      	bne.n	8002b96 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d032      	beq.n	8002bf2 <I2C_Master_SB+0x100>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d02d      	beq.n	8002bf2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ba4:	605a      	str	r2, [r3, #4]
}
 8002ba6:	e024      	b.n	8002bf2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10e      	bne.n	8002bce <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	11db      	asrs	r3, r3, #7
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	f003 0306 	and.w	r3, r3, #6
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f063 030f 	orn	r3, r3, #15
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	611a      	str	r2, [r3, #16]
}
 8002bcc:	e011      	b.n	8002bf2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d10d      	bne.n	8002bf2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	11db      	asrs	r3, r3, #7
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	f003 0306 	and.w	r3, r3, #6
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f063 030e 	orn	r3, r3, #14
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	611a      	str	r2, [r3, #16]
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d004      	beq.n	8002c24 <I2C_Master_ADD10+0x26>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d108      	bne.n	8002c36 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00c      	beq.n	8002c46 <I2C_Master_ADD10+0x48>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d007      	beq.n	8002c46 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c44:	605a      	str	r2, [r3, #4]
  }
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b091      	sub	sp, #68	; 0x44
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b22      	cmp	r3, #34	; 0x22
 8002c7a:	f040 8169 	bne.w	8002f50 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10f      	bne.n	8002ca6 <I2C_Master_ADDR+0x54>
 8002c86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c8a:	2b40      	cmp	r3, #64	; 0x40
 8002c8c:	d10b      	bne.n	8002ca6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	633b      	str	r3, [r7, #48]	; 0x30
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	633b      	str	r3, [r7, #48]	; 0x30
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	e160      	b.n	8002f68 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d11d      	bne.n	8002cea <I2C_Master_ADDR+0x98>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002cb6:	d118      	bne.n	8002cea <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb8:	2300      	movs	r3, #0
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cdc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	651a      	str	r2, [r3, #80]	; 0x50
 8002ce8:	e13e      	b.n	8002f68 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d113      	bne.n	8002d1c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d08:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	e115      	b.n	8002f48 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	f040 808a 	bne.w	8002e3c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d2e:	d137      	bne.n	8002da0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d3e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d4e:	d113      	bne.n	8002d78 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d5e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d60:	2300      	movs	r3, #0
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	e0e7      	b.n	8002f48 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d78:	2300      	movs	r3, #0
 8002d7a:	623b      	str	r3, [r7, #32]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	623b      	str	r3, [r7, #32]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	623b      	str	r3, [r7, #32]
 8002d8c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	e0d3      	b.n	8002f48 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d02e      	beq.n	8002e04 <I2C_Master_ADDR+0x1b2>
 8002da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d02b      	beq.n	8002e04 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dae:	2b12      	cmp	r3, #18
 8002db0:	d102      	bne.n	8002db8 <I2C_Master_ADDR+0x166>
 8002db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d125      	bne.n	8002e04 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d00e      	beq.n	8002ddc <I2C_Master_ADDR+0x18a>
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d00b      	beq.n	8002ddc <I2C_Master_ADDR+0x18a>
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc6:	2b10      	cmp	r3, #16
 8002dc8:	d008      	beq.n	8002ddc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	e007      	b.n	8002dec <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dea:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dec:	2300      	movs	r3, #0
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	61fb      	str	r3, [r7, #28]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	61fb      	str	r3, [r7, #28]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	e0a1      	b.n	8002f48 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e12:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e14:	2300      	movs	r3, #0
 8002e16:	61bb      	str	r3, [r7, #24]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	61bb      	str	r3, [r7, #24]
 8002e28:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	e085      	b.n	8002f48 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d14d      	bne.n	8002ee2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d016      	beq.n	8002e7a <I2C_Master_ADDR+0x228>
 8002e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d013      	beq.n	8002e7a <I2C_Master_ADDR+0x228>
 8002e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e54:	2b10      	cmp	r3, #16
 8002e56:	d010      	beq.n	8002e7a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e66:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	e007      	b.n	8002e8a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e88:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e98:	d117      	bne.n	8002eca <I2C_Master_ADDR+0x278>
 8002e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ea0:	d00b      	beq.n	8002eba <I2C_Master_ADDR+0x268>
 8002ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d008      	beq.n	8002eba <I2C_Master_ADDR+0x268>
 8002ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d005      	beq.n	8002eba <I2C_Master_ADDR+0x268>
 8002eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb0:	2b10      	cmp	r3, #16
 8002eb2:	d002      	beq.n	8002eba <I2C_Master_ADDR+0x268>
 8002eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d107      	bne.n	8002eca <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ec8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	e032      	b.n	8002f48 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ef0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f00:	d117      	bne.n	8002f32 <I2C_Master_ADDR+0x2e0>
 8002f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f08:	d00b      	beq.n	8002f22 <I2C_Master_ADDR+0x2d0>
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d008      	beq.n	8002f22 <I2C_Master_ADDR+0x2d0>
 8002f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d005      	beq.n	8002f22 <I2C_Master_ADDR+0x2d0>
 8002f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d002      	beq.n	8002f22 <I2C_Master_ADDR+0x2d0>
 8002f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d107      	bne.n	8002f32 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f30:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002f4e:	e00b      	b.n	8002f68 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
}
 8002f66:	e7ff      	b.n	8002f68 <I2C_Master_ADDR+0x316>
 8002f68:	bf00      	nop
 8002f6a:	3744      	adds	r7, #68	; 0x44
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f82:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d02b      	beq.n	8002fe6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	781a      	ldrb	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d114      	bne.n	8002fe6 <I2C_SlaveTransmit_TXE+0x72>
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	2b29      	cmp	r3, #41	; 0x29
 8002fc0:	d111      	bne.n	8002fe6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2221      	movs	r2, #33	; 0x21
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2228      	movs	r2, #40	; 0x28
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff f9e7 	bl	80023b4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d011      	beq.n	8003024 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	781a      	ldrb	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d02c      	beq.n	80030a4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d114      	bne.n	80030a4 <I2C_SlaveReceive_RXNE+0x74>
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	2b2a      	cmp	r3, #42	; 0x2a
 800307e:	d111      	bne.n	80030a4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800308e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2222      	movs	r2, #34	; 0x22
 8003094:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2228      	movs	r2, #40	; 0x28
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff f992 	bl	80023c8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80030a4:	bf00      	nop
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d012      	beq.n	80030e4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800310a:	2b28      	cmp	r3, #40	; 0x28
 800310c:	d127      	bne.n	800315e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800312a:	2301      	movs	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	09db      	lsrs	r3, r3, #7
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d103      	bne.n	8003142 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	81bb      	strh	r3, [r7, #12]
 8003140:	e002      	b.n	8003148 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003150:	89ba      	ldrh	r2, [r7, #12]
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	4619      	mov	r1, r3
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff f940 	bl	80023dc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800315c:	e00e      	b.n	800317c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800315e:	2300      	movs	r3, #0
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003192:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031a2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80031a4:	2300      	movs	r3, #0
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e0:	d172      	bne.n	80032c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	2b22      	cmp	r3, #34	; 0x22
 80031e6:	d002      	beq.n	80031ee <I2C_Slave_STOPF+0x6a>
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	2b2a      	cmp	r3, #42	; 0x2a
 80031ec:	d135      	bne.n	800325a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d005      	beq.n	8003212 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f043 0204 	orr.w	r2, r3, #4
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003220:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fba7 	bl	800197a <HAL_DMA_GetState>
 800322c:	4603      	mov	r3, r0
 800322e:	2b01      	cmp	r3, #1
 8003230:	d049      	beq.n	80032c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003236:	4a69      	ldr	r2, [pc, #420]	; (80033dc <I2C_Slave_STOPF+0x258>)
 8003238:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe fb79 	bl	8001936 <HAL_DMA_Abort_IT>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d03d      	beq.n	80032c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003254:	4610      	mov	r0, r2
 8003256:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003258:	e035      	b.n	80032c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	b29a      	uxth	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f043 0204 	orr.w	r2, r3, #4
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800328c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe fb71 	bl	800197a <HAL_DMA_GetState>
 8003298:	4603      	mov	r3, r0
 800329a:	2b01      	cmp	r3, #1
 800329c:	d014      	beq.n	80032c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a2:	4a4e      	ldr	r2, [pc, #312]	; (80033dc <I2C_Slave_STOPF+0x258>)
 80032a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe fb43 	bl	8001936 <HAL_DMA_Abort_IT>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d008      	beq.n	80032c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032c0:	4610      	mov	r0, r2
 80032c2:	4798      	blx	r3
 80032c4:	e000      	b.n	80032c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d03e      	beq.n	8003350 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d112      	bne.n	8003306 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003310:	2b40      	cmp	r3, #64	; 0x40
 8003312:	d112      	bne.n	800333a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	f043 0204 	orr.w	r2, r3, #4
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f8b3 	bl	80034c4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800335e:	e039      	b.n	80033d4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	2b2a      	cmp	r3, #42	; 0x2a
 8003364:	d109      	bne.n	800337a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2228      	movs	r2, #40	; 0x28
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff f827 	bl	80023c8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b28      	cmp	r3, #40	; 0x28
 8003384:	d111      	bne.n	80033aa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <I2C_Slave_STOPF+0x25c>)
 800338a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff f828 	bl	80023f8 <HAL_I2C_ListenCpltCallback>
}
 80033a8:	e014      	b.n	80033d4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	2b22      	cmp	r3, #34	; 0x22
 80033b0:	d002      	beq.n	80033b8 <I2C_Slave_STOPF+0x234>
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	2b22      	cmp	r3, #34	; 0x22
 80033b6:	d10d      	bne.n	80033d4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fe fffa 	bl	80023c8 <HAL_I2C_SlaveRxCpltCallback>
}
 80033d4:	bf00      	nop
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	08003729 	.word	0x08003729
 80033e0:	ffff0000 	.word	0xffff0000

080033e4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d002      	beq.n	8003406 <I2C_Slave_AF+0x22>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b20      	cmp	r3, #32
 8003404:	d129      	bne.n	800345a <I2C_Slave_AF+0x76>
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	2b28      	cmp	r3, #40	; 0x28
 800340a:	d126      	bne.n	800345a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a2c      	ldr	r2, [pc, #176]	; (80034c0 <I2C_Slave_AF+0xdc>)
 8003410:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003420:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800342a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800343a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7fe ffd0 	bl	80023f8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003458:	e02e      	b.n	80034b8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	2b21      	cmp	r3, #33	; 0x21
 800345e:	d126      	bne.n	80034ae <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a17      	ldr	r2, [pc, #92]	; (80034c0 <I2C_Slave_AF+0xdc>)
 8003464:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2221      	movs	r2, #33	; 0x21
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800348a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003494:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fe ff84 	bl	80023b4 <HAL_I2C_SlaveTxCpltCallback>
}
 80034ac:	e004      	b.n	80034b8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034b6:	615a      	str	r2, [r3, #20]
}
 80034b8:	bf00      	nop
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	ffff0000 	.word	0xffff0000

080034c4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80034dc:	7bbb      	ldrb	r3, [r7, #14]
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d002      	beq.n	80034e8 <I2C_ITError+0x24>
 80034e2:	7bbb      	ldrb	r3, [r7, #14]
 80034e4:	2b40      	cmp	r3, #64	; 0x40
 80034e6:	d10a      	bne.n	80034fe <I2C_ITError+0x3a>
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	2b22      	cmp	r3, #34	; 0x22
 80034ec:	d107      	bne.n	80034fe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034fc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003504:	2b28      	cmp	r3, #40	; 0x28
 8003506:	d107      	bne.n	8003518 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2228      	movs	r2, #40	; 0x28
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003516:	e015      	b.n	8003544 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003526:	d00a      	beq.n	800353e <I2C_ITError+0x7a>
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	2b60      	cmp	r3, #96	; 0x60
 800352c:	d007      	beq.n	800353e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003552:	d162      	bne.n	800361a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003562:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d020      	beq.n	80035b4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003576:	4a6a      	ldr	r2, [pc, #424]	; (8003720 <I2C_ITError+0x25c>)
 8003578:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357e:	4618      	mov	r0, r3
 8003580:	f7fe f9d9 	bl	8001936 <HAL_DMA_Abort_IT>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 8089 	beq.w	800369e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035ae:	4610      	mov	r0, r2
 80035b0:	4798      	blx	r3
 80035b2:	e074      	b.n	800369e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	4a59      	ldr	r2, [pc, #356]	; (8003720 <I2C_ITError+0x25c>)
 80035ba:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fe f9b8 	bl	8001936 <HAL_DMA_Abort_IT>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d068      	beq.n	800369e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b40      	cmp	r3, #64	; 0x40
 80035d8:	d10b      	bne.n	80035f2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003614:	4610      	mov	r0, r2
 8003616:	4798      	blx	r3
 8003618:	e041      	b.n	800369e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b60      	cmp	r3, #96	; 0x60
 8003624:	d125      	bne.n	8003672 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b40      	cmp	r3, #64	; 0x40
 8003640:	d10b      	bne.n	800365a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0201 	bic.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fe feec 	bl	8002448 <HAL_I2C_AbortCpltCallback>
 8003670:	e015      	b.n	800369e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d10b      	bne.n	8003698 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7fe fecb 	bl	8002434 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10e      	bne.n	80036cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d109      	bne.n	80036cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d104      	bne.n	80036cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d007      	beq.n	80036dc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036da:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d113      	bne.n	8003718 <I2C_ITError+0x254>
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	2b28      	cmp	r3, #40	; 0x28
 80036f4:	d110      	bne.n	8003718 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a0a      	ldr	r2, [pc, #40]	; (8003724 <I2C_ITError+0x260>)
 80036fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fe fe70 	bl	80023f8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003718:	bf00      	nop
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	08003729 	.word	0x08003729
 8003724:	ffff0000 	.word	0xffff0000

08003728 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003740:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003742:	4b4b      	ldr	r3, [pc, #300]	; (8003870 <I2C_DMAAbort+0x148>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	08db      	lsrs	r3, r3, #3
 8003748:	4a4a      	ldr	r2, [pc, #296]	; (8003874 <I2C_DMAAbort+0x14c>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	0a1a      	lsrs	r2, r3, #8
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	00da      	lsls	r2, r3, #3
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f043 0220 	orr.w	r2, r3, #32
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800376e:	e00a      	b.n	8003786 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	3b01      	subs	r3, #1
 8003774:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003784:	d0ea      	beq.n	800375c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003792:	2200      	movs	r2, #0
 8003794:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	2200      	movs	r2, #0
 80037a4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2200      	movs	r2, #0
 80037ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c8:	2200      	movs	r2, #0
 80037ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	2200      	movs	r2, #0
 80037da:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0201 	bic.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b60      	cmp	r3, #96	; 0x60
 80037f6:	d10e      	bne.n	8003816 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2200      	movs	r2, #0
 800380c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800380e:	6978      	ldr	r0, [r7, #20]
 8003810:	f7fe fe1a 	bl	8002448 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003814:	e027      	b.n	8003866 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003816:	7cfb      	ldrb	r3, [r7, #19]
 8003818:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800381c:	2b28      	cmp	r3, #40	; 0x28
 800381e:	d117      	bne.n	8003850 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800383e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2200      	movs	r2, #0
 8003844:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2228      	movs	r2, #40	; 0x28
 800384a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800384e:	e007      	b.n	8003860 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003860:	6978      	ldr	r0, [r7, #20]
 8003862:	f7fe fde7 	bl	8002434 <HAL_I2C_ErrorCallback>
}
 8003866:	bf00      	nop
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20000000 	.word	0x20000000
 8003874:	14f8b589 	.word	0x14f8b589

08003878 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003884:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	08db      	lsrs	r3, r3, #3
 800388a:	4a13      	ldr	r2, [pc, #76]	; (80038d8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800388c:	fba2 2303 	umull	r2, r3, r2, r3
 8003890:	0a1a      	lsrs	r2, r3, #8
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	3b01      	subs	r3, #1
 800389e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d107      	bne.n	80038b6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f043 0220 	orr.w	r2, r3, #32
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e008      	b.n	80038c8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c4:	d0e9      	beq.n	800389a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	20000000 	.word	0x20000000
 80038d8:	14f8b589 	.word	0x14f8b589

080038dc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80038ec:	d103      	bne.n	80038f6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80038f4:	e007      	b.n	8003906 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80038fe:	d102      	bne.n	8003906 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2208      	movs	r2, #8
 8003904:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e267      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d075      	beq.n	8003a1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003932:	4b88      	ldr	r3, [pc, #544]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 030c 	and.w	r3, r3, #12
 800393a:	2b04      	cmp	r3, #4
 800393c:	d00c      	beq.n	8003958 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800393e:	4b85      	ldr	r3, [pc, #532]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003946:	2b08      	cmp	r3, #8
 8003948:	d112      	bne.n	8003970 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800394a:	4b82      	ldr	r3, [pc, #520]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003956:	d10b      	bne.n	8003970 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003958:	4b7e      	ldr	r3, [pc, #504]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d05b      	beq.n	8003a1c <HAL_RCC_OscConfig+0x108>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d157      	bne.n	8003a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e242      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003978:	d106      	bne.n	8003988 <HAL_RCC_OscConfig+0x74>
 800397a:	4b76      	ldr	r3, [pc, #472]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a75      	ldr	r2, [pc, #468]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e01d      	b.n	80039c4 <HAL_RCC_OscConfig+0xb0>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003990:	d10c      	bne.n	80039ac <HAL_RCC_OscConfig+0x98>
 8003992:	4b70      	ldr	r3, [pc, #448]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a6f      	ldr	r2, [pc, #444]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	4b6d      	ldr	r3, [pc, #436]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a6c      	ldr	r2, [pc, #432]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	e00b      	b.n	80039c4 <HAL_RCC_OscConfig+0xb0>
 80039ac:	4b69      	ldr	r3, [pc, #420]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a68      	ldr	r2, [pc, #416]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	4b66      	ldr	r3, [pc, #408]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a65      	ldr	r2, [pc, #404]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d013      	beq.n	80039f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039cc:	f7fd fe02 	bl	80015d4 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d4:	f7fd fdfe 	bl	80015d4 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b64      	cmp	r3, #100	; 0x64
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e207      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e6:	4b5b      	ldr	r3, [pc, #364]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0xc0>
 80039f2:	e014      	b.n	8003a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f4:	f7fd fdee 	bl	80015d4 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039fc:	f7fd fdea 	bl	80015d4 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	; 0x64
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e1f3      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0e:	4b51      	ldr	r3, [pc, #324]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f0      	bne.n	80039fc <HAL_RCC_OscConfig+0xe8>
 8003a1a:	e000      	b.n	8003a1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d063      	beq.n	8003af2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a2a:	4b4a      	ldr	r3, [pc, #296]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00b      	beq.n	8003a4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a36:	4b47      	ldr	r3, [pc, #284]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d11c      	bne.n	8003a7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a42:	4b44      	ldr	r3, [pc, #272]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d116      	bne.n	8003a7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a4e:	4b41      	ldr	r3, [pc, #260]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <HAL_RCC_OscConfig+0x152>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d001      	beq.n	8003a66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e1c7      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a66:	4b3b      	ldr	r3, [pc, #236]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4937      	ldr	r1, [pc, #220]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7a:	e03a      	b.n	8003af2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d020      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a84:	4b34      	ldr	r3, [pc, #208]	; (8003b58 <HAL_RCC_OscConfig+0x244>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8a:	f7fd fda3 	bl	80015d4 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a92:	f7fd fd9f 	bl	80015d4 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e1a8      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa4:	4b2b      	ldr	r3, [pc, #172]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab0:	4b28      	ldr	r3, [pc, #160]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4925      	ldr	r1, [pc, #148]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	600b      	str	r3, [r1, #0]
 8003ac4:	e015      	b.n	8003af2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac6:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <HAL_RCC_OscConfig+0x244>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003acc:	f7fd fd82 	bl	80015d4 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad4:	f7fd fd7e 	bl	80015d4 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e187      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae6:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d036      	beq.n	8003b6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d016      	beq.n	8003b34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <HAL_RCC_OscConfig+0x248>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0c:	f7fd fd62 	bl	80015d4 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b14:	f7fd fd5e 	bl	80015d4 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e167      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b26:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0x200>
 8003b32:	e01b      	b.n	8003b6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b34:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <HAL_RCC_OscConfig+0x248>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3a:	f7fd fd4b 	bl	80015d4 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b40:	e00e      	b.n	8003b60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b42:	f7fd fd47 	bl	80015d4 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d907      	bls.n	8003b60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e150      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
 8003b54:	40023800 	.word	0x40023800
 8003b58:	42470000 	.word	0x42470000
 8003b5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b60:	4b88      	ldr	r3, [pc, #544]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1ea      	bne.n	8003b42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8097 	beq.w	8003ca8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7e:	4b81      	ldr	r3, [pc, #516]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10f      	bne.n	8003baa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	4b7d      	ldr	r3, [pc, #500]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	4a7c      	ldr	r2, [pc, #496]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b98:	6413      	str	r3, [r2, #64]	; 0x40
 8003b9a:	4b7a      	ldr	r3, [pc, #488]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	60bb      	str	r3, [r7, #8]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003baa:	4b77      	ldr	r3, [pc, #476]	; (8003d88 <HAL_RCC_OscConfig+0x474>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d118      	bne.n	8003be8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bb6:	4b74      	ldr	r3, [pc, #464]	; (8003d88 <HAL_RCC_OscConfig+0x474>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a73      	ldr	r2, [pc, #460]	; (8003d88 <HAL_RCC_OscConfig+0x474>)
 8003bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc2:	f7fd fd07 	bl	80015d4 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bca:	f7fd fd03 	bl	80015d4 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e10c      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bdc:	4b6a      	ldr	r3, [pc, #424]	; (8003d88 <HAL_RCC_OscConfig+0x474>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0f0      	beq.n	8003bca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d106      	bne.n	8003bfe <HAL_RCC_OscConfig+0x2ea>
 8003bf0:	4b64      	ldr	r3, [pc, #400]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	4a63      	ldr	r2, [pc, #396]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfc:	e01c      	b.n	8003c38 <HAL_RCC_OscConfig+0x324>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b05      	cmp	r3, #5
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x30c>
 8003c06:	4b5f      	ldr	r3, [pc, #380]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	4a5e      	ldr	r2, [pc, #376]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	f043 0304 	orr.w	r3, r3, #4
 8003c10:	6713      	str	r3, [r2, #112]	; 0x70
 8003c12:	4b5c      	ldr	r3, [pc, #368]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	4a5b      	ldr	r2, [pc, #364]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1e:	e00b      	b.n	8003c38 <HAL_RCC_OscConfig+0x324>
 8003c20:	4b58      	ldr	r3, [pc, #352]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	4a57      	ldr	r2, [pc, #348]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c26:	f023 0301 	bic.w	r3, r3, #1
 8003c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c2c:	4b55      	ldr	r3, [pc, #340]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c30:	4a54      	ldr	r2, [pc, #336]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c32:	f023 0304 	bic.w	r3, r3, #4
 8003c36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d015      	beq.n	8003c6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c40:	f7fd fcc8 	bl	80015d4 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c46:	e00a      	b.n	8003c5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c48:	f7fd fcc4 	bl	80015d4 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e0cb      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5e:	4b49      	ldr	r3, [pc, #292]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0ee      	beq.n	8003c48 <HAL_RCC_OscConfig+0x334>
 8003c6a:	e014      	b.n	8003c96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6c:	f7fd fcb2 	bl	80015d4 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c72:	e00a      	b.n	8003c8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c74:	f7fd fcae 	bl	80015d4 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e0b5      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c8a:	4b3e      	ldr	r3, [pc, #248]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1ee      	bne.n	8003c74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c96:	7dfb      	ldrb	r3, [r7, #23]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d105      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c9c:	4b39      	ldr	r3, [pc, #228]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	4a38      	ldr	r2, [pc, #224]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80a1 	beq.w	8003df4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cb2:	4b34      	ldr	r3, [pc, #208]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d05c      	beq.n	8003d78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d141      	bne.n	8003d4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc6:	4b31      	ldr	r3, [pc, #196]	; (8003d8c <HAL_RCC_OscConfig+0x478>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7fd fc82 	bl	80015d4 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd4:	f7fd fc7e 	bl	80015d4 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e087      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce6:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69da      	ldr	r2, [r3, #28]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	019b      	lsls	r3, r3, #6
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	085b      	lsrs	r3, r3, #1
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	041b      	lsls	r3, r3, #16
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	061b      	lsls	r3, r3, #24
 8003d16:	491b      	ldr	r1, [pc, #108]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d1c:	4b1b      	ldr	r3, [pc, #108]	; (8003d8c <HAL_RCC_OscConfig+0x478>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d22:	f7fd fc57 	bl	80015d4 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d2a:	f7fd fc53 	bl	80015d4 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e05c      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3c:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0x416>
 8003d48:	e054      	b.n	8003df4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4a:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <HAL_RCC_OscConfig+0x478>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d50:	f7fd fc40 	bl	80015d4 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d58:	f7fd fc3c 	bl	80015d4 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e045      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6a:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x444>
 8003d76:	e03d      	b.n	8003df4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d107      	bne.n	8003d90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e038      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
 8003d84:	40023800 	.word	0x40023800
 8003d88:	40007000 	.word	0x40007000
 8003d8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d90:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <HAL_RCC_OscConfig+0x4ec>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d028      	beq.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d121      	bne.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d11a      	bne.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d111      	bne.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd6:	085b      	lsrs	r3, r3, #1
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d107      	bne.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e000      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800

08003e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0cc      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e18:	4b68      	ldr	r3, [pc, #416]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d90c      	bls.n	8003e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b65      	ldr	r3, [pc, #404]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2e:	4b63      	ldr	r3, [pc, #396]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0b8      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d020      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e58:	4b59      	ldr	r3, [pc, #356]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	4a58      	ldr	r2, [pc, #352]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e70:	4b53      	ldr	r3, [pc, #332]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	4a52      	ldr	r2, [pc, #328]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e7c:	4b50      	ldr	r3, [pc, #320]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	494d      	ldr	r1, [pc, #308]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d044      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d107      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	4b47      	ldr	r3, [pc, #284]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d119      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e07f      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d003      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d107      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec2:	4b3f      	ldr	r3, [pc, #252]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e06f      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed2:	4b3b      	ldr	r3, [pc, #236]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e067      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ee2:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f023 0203 	bic.w	r2, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4934      	ldr	r1, [pc, #208]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ef4:	f7fd fb6e 	bl	80015d4 <HAL_GetTick>
 8003ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efa:	e00a      	b.n	8003f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003efc:	f7fd fb6a 	bl	80015d4 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e04f      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f12:	4b2b      	ldr	r3, [pc, #172]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 020c 	and.w	r2, r3, #12
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d1eb      	bne.n	8003efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f24:	4b25      	ldr	r3, [pc, #148]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d20c      	bcs.n	8003f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f32:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3a:	4b20      	ldr	r3, [pc, #128]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d001      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e032      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f58:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4916      	ldr	r1, [pc, #88]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f76:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	490e      	ldr	r1, [pc, #56]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f8a:	f000 f821 	bl	8003fd0 <HAL_RCC_GetSysClockFreq>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	490a      	ldr	r1, [pc, #40]	; (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f9c:	5ccb      	ldrb	r3, [r1, r3]
 8003f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa2:	4a09      	ldr	r2, [pc, #36]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fa6:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <HAL_RCC_ClockConfig+0x1c8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fd face 	bl	800154c <HAL_InitTick>

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40023c00 	.word	0x40023c00
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	08006e50 	.word	0x08006e50
 8003fc8:	20000000 	.word	0x20000000
 8003fcc:	20000004 	.word	0x20000004

08003fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd4:	b090      	sub	sp, #64	; 0x40
 8003fd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	637b      	str	r3, [r7, #52]	; 0x34
 8003fdc:	2300      	movs	r3, #0
 8003fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fe8:	4b59      	ldr	r3, [pc, #356]	; (8004150 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 030c 	and.w	r3, r3, #12
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d00d      	beq.n	8004010 <HAL_RCC_GetSysClockFreq+0x40>
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	f200 80a1 	bhi.w	800413c <HAL_RCC_GetSysClockFreq+0x16c>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <HAL_RCC_GetSysClockFreq+0x34>
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d003      	beq.n	800400a <HAL_RCC_GetSysClockFreq+0x3a>
 8004002:	e09b      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004004:	4b53      	ldr	r3, [pc, #332]	; (8004154 <HAL_RCC_GetSysClockFreq+0x184>)
 8004006:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004008:	e09b      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800400a:	4b53      	ldr	r3, [pc, #332]	; (8004158 <HAL_RCC_GetSysClockFreq+0x188>)
 800400c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800400e:	e098      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004010:	4b4f      	ldr	r3, [pc, #316]	; (8004150 <HAL_RCC_GetSysClockFreq+0x180>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004018:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800401a:	4b4d      	ldr	r3, [pc, #308]	; (8004150 <HAL_RCC_GetSysClockFreq+0x180>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d028      	beq.n	8004078 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004026:	4b4a      	ldr	r3, [pc, #296]	; (8004150 <HAL_RCC_GetSysClockFreq+0x180>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	099b      	lsrs	r3, r3, #6
 800402c:	2200      	movs	r2, #0
 800402e:	623b      	str	r3, [r7, #32]
 8004030:	627a      	str	r2, [r7, #36]	; 0x24
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004038:	2100      	movs	r1, #0
 800403a:	4b47      	ldr	r3, [pc, #284]	; (8004158 <HAL_RCC_GetSysClockFreq+0x188>)
 800403c:	fb03 f201 	mul.w	r2, r3, r1
 8004040:	2300      	movs	r3, #0
 8004042:	fb00 f303 	mul.w	r3, r0, r3
 8004046:	4413      	add	r3, r2
 8004048:	4a43      	ldr	r2, [pc, #268]	; (8004158 <HAL_RCC_GetSysClockFreq+0x188>)
 800404a:	fba0 1202 	umull	r1, r2, r0, r2
 800404e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004050:	460a      	mov	r2, r1
 8004052:	62ba      	str	r2, [r7, #40]	; 0x28
 8004054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004056:	4413      	add	r3, r2
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800405a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405c:	2200      	movs	r2, #0
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	61fa      	str	r2, [r7, #28]
 8004062:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004066:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800406a:	f7fc f909 	bl	8000280 <__aeabi_uldivmod>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4613      	mov	r3, r2
 8004074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004076:	e053      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004078:	4b35      	ldr	r3, [pc, #212]	; (8004150 <HAL_RCC_GetSysClockFreq+0x180>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	099b      	lsrs	r3, r3, #6
 800407e:	2200      	movs	r2, #0
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	617a      	str	r2, [r7, #20]
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800408a:	f04f 0b00 	mov.w	fp, #0
 800408e:	4652      	mov	r2, sl
 8004090:	465b      	mov	r3, fp
 8004092:	f04f 0000 	mov.w	r0, #0
 8004096:	f04f 0100 	mov.w	r1, #0
 800409a:	0159      	lsls	r1, r3, #5
 800409c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040a0:	0150      	lsls	r0, r2, #5
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	ebb2 080a 	subs.w	r8, r2, sl
 80040aa:	eb63 090b 	sbc.w	r9, r3, fp
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80040ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80040be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80040c2:	ebb2 0408 	subs.w	r4, r2, r8
 80040c6:	eb63 0509 	sbc.w	r5, r3, r9
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	00eb      	lsls	r3, r5, #3
 80040d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040d8:	00e2      	lsls	r2, r4, #3
 80040da:	4614      	mov	r4, r2
 80040dc:	461d      	mov	r5, r3
 80040de:	eb14 030a 	adds.w	r3, r4, sl
 80040e2:	603b      	str	r3, [r7, #0]
 80040e4:	eb45 030b 	adc.w	r3, r5, fp
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040f6:	4629      	mov	r1, r5
 80040f8:	028b      	lsls	r3, r1, #10
 80040fa:	4621      	mov	r1, r4
 80040fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004100:	4621      	mov	r1, r4
 8004102:	028a      	lsls	r2, r1, #10
 8004104:	4610      	mov	r0, r2
 8004106:	4619      	mov	r1, r3
 8004108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800410a:	2200      	movs	r2, #0
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	60fa      	str	r2, [r7, #12]
 8004110:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004114:	f7fc f8b4 	bl	8000280 <__aeabi_uldivmod>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4613      	mov	r3, r2
 800411e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <HAL_RCC_GetSysClockFreq+0x180>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	0c1b      	lsrs	r3, r3, #16
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	3301      	adds	r3, #1
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004130:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004134:	fbb2 f3f3 	udiv	r3, r2, r3
 8004138:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800413a:	e002      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <HAL_RCC_GetSysClockFreq+0x184>)
 800413e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004144:	4618      	mov	r0, r3
 8004146:	3740      	adds	r7, #64	; 0x40
 8004148:	46bd      	mov	sp, r7
 800414a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800414e:	bf00      	nop
 8004150:	40023800 	.word	0x40023800
 8004154:	00f42400 	.word	0x00f42400
 8004158:	017d7840 	.word	0x017d7840

0800415c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004160:	4b03      	ldr	r3, [pc, #12]	; (8004170 <HAL_RCC_GetHCLKFreq+0x14>)
 8004162:	681b      	ldr	r3, [r3, #0]
}
 8004164:	4618      	mov	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000000 	.word	0x20000000

08004174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004178:	f7ff fff0 	bl	800415c <HAL_RCC_GetHCLKFreq>
 800417c:	4602      	mov	r2, r0
 800417e:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	0a9b      	lsrs	r3, r3, #10
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	4903      	ldr	r1, [pc, #12]	; (8004198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800418a:	5ccb      	ldrb	r3, [r1, r3]
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40023800 	.word	0x40023800
 8004198:	08006e60 	.word	0x08006e60

0800419c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041a0:	f7ff ffdc 	bl	800415c <HAL_RCC_GetHCLKFreq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	0b5b      	lsrs	r3, r3, #13
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4903      	ldr	r1, [pc, #12]	; (80041c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041b2:	5ccb      	ldrb	r3, [r1, r3]
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40023800 	.word	0x40023800
 80041c0:	08006e60 	.word	0x08006e60

080041c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e041      	b.n	800425a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fc ff96 	bl	800111c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3304      	adds	r3, #4
 8004200:	4619      	mov	r1, r3
 8004202:	4610      	mov	r0, r2
 8004204:	f000 fd66 	bl	8004cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e041      	b.n	80042f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d106      	bne.n	800428e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7fc ffcd 	bl	8001228 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2202      	movs	r2, #2
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3304      	adds	r3, #4
 800429e:	4619      	mov	r1, r3
 80042a0:	4610      	mov	r0, r2
 80042a2:	f000 fd17 	bl	8004cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d109      	bne.n	8004324 <HAL_TIM_PWM_Start+0x24>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b01      	cmp	r3, #1
 800431a:	bf14      	ite	ne
 800431c:	2301      	movne	r3, #1
 800431e:	2300      	moveq	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	e022      	b.n	800436a <HAL_TIM_PWM_Start+0x6a>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2b04      	cmp	r3, #4
 8004328:	d109      	bne.n	800433e <HAL_TIM_PWM_Start+0x3e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b01      	cmp	r3, #1
 8004334:	bf14      	ite	ne
 8004336:	2301      	movne	r3, #1
 8004338:	2300      	moveq	r3, #0
 800433a:	b2db      	uxtb	r3, r3
 800433c:	e015      	b.n	800436a <HAL_TIM_PWM_Start+0x6a>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b08      	cmp	r3, #8
 8004342:	d109      	bne.n	8004358 <HAL_TIM_PWM_Start+0x58>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	bf14      	ite	ne
 8004350:	2301      	movne	r3, #1
 8004352:	2300      	moveq	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	e008      	b.n	800436a <HAL_TIM_PWM_Start+0x6a>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b01      	cmp	r3, #1
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e068      	b.n	8004444 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d104      	bne.n	8004382 <HAL_TIM_PWM_Start+0x82>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004380:	e013      	b.n	80043aa <HAL_TIM_PWM_Start+0xaa>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b04      	cmp	r3, #4
 8004386:	d104      	bne.n	8004392 <HAL_TIM_PWM_Start+0x92>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004390:	e00b      	b.n	80043aa <HAL_TIM_PWM_Start+0xaa>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b08      	cmp	r3, #8
 8004396:	d104      	bne.n	80043a2 <HAL_TIM_PWM_Start+0xa2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a0:	e003      	b.n	80043aa <HAL_TIM_PWM_Start+0xaa>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2202      	movs	r2, #2
 80043a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2201      	movs	r2, #1
 80043b0:	6839      	ldr	r1, [r7, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 ffc5 	bl	8005342 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a23      	ldr	r2, [pc, #140]	; (800444c <HAL_TIM_PWM_Start+0x14c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d107      	bne.n	80043d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1d      	ldr	r2, [pc, #116]	; (800444c <HAL_TIM_PWM_Start+0x14c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d018      	beq.n	800440e <HAL_TIM_PWM_Start+0x10e>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e4:	d013      	beq.n	800440e <HAL_TIM_PWM_Start+0x10e>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a19      	ldr	r2, [pc, #100]	; (8004450 <HAL_TIM_PWM_Start+0x150>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00e      	beq.n	800440e <HAL_TIM_PWM_Start+0x10e>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a17      	ldr	r2, [pc, #92]	; (8004454 <HAL_TIM_PWM_Start+0x154>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d009      	beq.n	800440e <HAL_TIM_PWM_Start+0x10e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a16      	ldr	r2, [pc, #88]	; (8004458 <HAL_TIM_PWM_Start+0x158>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d004      	beq.n	800440e <HAL_TIM_PWM_Start+0x10e>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a14      	ldr	r2, [pc, #80]	; (800445c <HAL_TIM_PWM_Start+0x15c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d111      	bne.n	8004432 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2b06      	cmp	r3, #6
 800441e:	d010      	beq.n	8004442 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004430:	e007      	b.n	8004442 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0201 	orr.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40010000 	.word	0x40010000
 8004450:	40000400 	.word	0x40000400
 8004454:	40000800 	.word	0x40000800
 8004458:	40000c00 	.word	0x40000c00
 800445c:	40014000 	.word	0x40014000

08004460 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e097      	b.n	80045a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d106      	bne.n	800448e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7fc fe7d 	bl	8001188 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2202      	movs	r2, #2
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044a4:	f023 0307 	bic.w	r3, r3, #7
 80044a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3304      	adds	r3, #4
 80044b2:	4619      	mov	r1, r3
 80044b4:	4610      	mov	r0, r2
 80044b6:	f000 fc0d 	bl	8004cd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e2:	f023 0303 	bic.w	r3, r3, #3
 80044e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	021b      	lsls	r3, r3, #8
 80044f2:	4313      	orrs	r3, r2
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004500:	f023 030c 	bic.w	r3, r3, #12
 8004504:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800450c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004510:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	4313      	orrs	r3, r2
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4313      	orrs	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	011a      	lsls	r2, r3, #4
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	031b      	lsls	r3, r3, #12
 8004530:	4313      	orrs	r3, r2
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800453e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004546:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	4313      	orrs	r3, r2
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d110      	bne.n	80045fe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d102      	bne.n	80045e8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80045e2:	7b7b      	ldrb	r3, [r7, #13]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d001      	beq.n	80045ec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e069      	b.n	80046c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045fc:	e031      	b.n	8004662 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b04      	cmp	r3, #4
 8004602:	d110      	bne.n	8004626 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004604:	7bbb      	ldrb	r3, [r7, #14]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d102      	bne.n	8004610 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800460a:	7b3b      	ldrb	r3, [r7, #12]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d001      	beq.n	8004614 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e055      	b.n	80046c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004624:	e01d      	b.n	8004662 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004626:	7bfb      	ldrb	r3, [r7, #15]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d108      	bne.n	800463e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800462c:	7bbb      	ldrb	r3, [r7, #14]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d105      	bne.n	800463e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004632:	7b7b      	ldrb	r3, [r7, #13]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d102      	bne.n	800463e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004638:	7b3b      	ldrb	r3, [r7, #12]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d001      	beq.n	8004642 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e03e      	b.n	80046c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2202      	movs	r2, #2
 8004646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2202      	movs	r2, #2
 800464e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2202      	movs	r2, #2
 8004656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2202      	movs	r2, #2
 800465e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <HAL_TIM_Encoder_Start+0xc4>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2b04      	cmp	r3, #4
 800466c:	d008      	beq.n	8004680 <HAL_TIM_Encoder_Start+0xd4>
 800466e:	e00f      	b.n	8004690 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2201      	movs	r2, #1
 8004676:	2100      	movs	r1, #0
 8004678:	4618      	mov	r0, r3
 800467a:	f000 fe62 	bl	8005342 <TIM_CCxChannelCmd>
      break;
 800467e:	e016      	b.n	80046ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2201      	movs	r2, #1
 8004686:	2104      	movs	r1, #4
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fe5a 	bl	8005342 <TIM_CCxChannelCmd>
      break;
 800468e:	e00e      	b.n	80046ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2201      	movs	r2, #1
 8004696:	2100      	movs	r1, #0
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fe52 	bl	8005342 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2201      	movs	r2, #1
 80046a4:	2104      	movs	r1, #4
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fe4b 	bl	8005342 <TIM_CCxChannelCmd>
      break;
 80046ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f042 0201 	orr.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d122      	bne.n	8004724 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d11b      	bne.n	8004724 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f06f 0202 	mvn.w	r2, #2
 80046f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fac3 	bl	8004c96 <HAL_TIM_IC_CaptureCallback>
 8004710:	e005      	b.n	800471e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fab5 	bl	8004c82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fac6 	bl	8004caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b04      	cmp	r3, #4
 8004730:	d122      	bne.n	8004778 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b04      	cmp	r3, #4
 800473e:	d11b      	bne.n	8004778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f06f 0204 	mvn.w	r2, #4
 8004748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2202      	movs	r2, #2
 800474e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fa99 	bl	8004c96 <HAL_TIM_IC_CaptureCallback>
 8004764:	e005      	b.n	8004772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fa8b 	bl	8004c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fa9c 	bl	8004caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b08      	cmp	r3, #8
 8004784:	d122      	bne.n	80047cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b08      	cmp	r3, #8
 8004792:	d11b      	bne.n	80047cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0208 	mvn.w	r2, #8
 800479c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2204      	movs	r2, #4
 80047a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fa6f 	bl	8004c96 <HAL_TIM_IC_CaptureCallback>
 80047b8:	e005      	b.n	80047c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fa61 	bl	8004c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fa72 	bl	8004caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0310 	and.w	r3, r3, #16
 80047d6:	2b10      	cmp	r3, #16
 80047d8:	d122      	bne.n	8004820 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d11b      	bne.n	8004820 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0210 	mvn.w	r2, #16
 80047f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2208      	movs	r2, #8
 80047f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fa45 	bl	8004c96 <HAL_TIM_IC_CaptureCallback>
 800480c:	e005      	b.n	800481a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fa37 	bl	8004c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fa48 	bl	8004caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b01      	cmp	r3, #1
 800482c:	d10e      	bne.n	800484c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b01      	cmp	r3, #1
 800483a:	d107      	bne.n	800484c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0201 	mvn.w	r2, #1
 8004844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fa11 	bl	8004c6e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004856:	2b80      	cmp	r3, #128	; 0x80
 8004858:	d10e      	bne.n	8004878 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004864:	2b80      	cmp	r3, #128	; 0x80
 8004866:	d107      	bne.n	8004878 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fe02 	bl	800547c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004882:	2b40      	cmp	r3, #64	; 0x40
 8004884:	d10e      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	d107      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800489c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fa0d 	bl	8004cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	d10e      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f003 0320 	and.w	r3, r3, #32
 80048bc:	2b20      	cmp	r3, #32
 80048be:	d107      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0220 	mvn.w	r2, #32
 80048c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fdcc 	bl	8005468 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048d0:	bf00      	nop
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048e4:	2300      	movs	r3, #0
 80048e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e0ae      	b.n	8004a54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b0c      	cmp	r3, #12
 8004902:	f200 809f 	bhi.w	8004a44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004906:	a201      	add	r2, pc, #4	; (adr r2, 800490c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490c:	08004941 	.word	0x08004941
 8004910:	08004a45 	.word	0x08004a45
 8004914:	08004a45 	.word	0x08004a45
 8004918:	08004a45 	.word	0x08004a45
 800491c:	08004981 	.word	0x08004981
 8004920:	08004a45 	.word	0x08004a45
 8004924:	08004a45 	.word	0x08004a45
 8004928:	08004a45 	.word	0x08004a45
 800492c:	080049c3 	.word	0x080049c3
 8004930:	08004a45 	.word	0x08004a45
 8004934:	08004a45 	.word	0x08004a45
 8004938:	08004a45 	.word	0x08004a45
 800493c:	08004a03 	.word	0x08004a03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68b9      	ldr	r1, [r7, #8]
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fa44 	bl	8004dd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699a      	ldr	r2, [r3, #24]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0208 	orr.w	r2, r2, #8
 800495a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699a      	ldr	r2, [r3, #24]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0204 	bic.w	r2, r2, #4
 800496a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6999      	ldr	r1, [r3, #24]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	691a      	ldr	r2, [r3, #16]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	619a      	str	r2, [r3, #24]
      break;
 800497e:	e064      	b.n	8004a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fa8a 	bl	8004ea0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699a      	ldr	r2, [r3, #24]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800499a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6999      	ldr	r1, [r3, #24]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	021a      	lsls	r2, r3, #8
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	619a      	str	r2, [r3, #24]
      break;
 80049c0:	e043      	b.n	8004a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68b9      	ldr	r1, [r7, #8]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fad5 	bl	8004f78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69da      	ldr	r2, [r3, #28]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0208 	orr.w	r2, r2, #8
 80049dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69da      	ldr	r2, [r3, #28]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0204 	bic.w	r2, r2, #4
 80049ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69d9      	ldr	r1, [r3, #28]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	61da      	str	r2, [r3, #28]
      break;
 8004a00:	e023      	b.n	8004a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fb1f 	bl	800504c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69da      	ldr	r2, [r3, #28]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69d9      	ldr	r1, [r3, #28]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	021a      	lsls	r2, r3, #8
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	61da      	str	r2, [r3, #28]
      break;
 8004a42:	e002      	b.n	8004a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	75fb      	strb	r3, [r7, #23]
      break;
 8004a48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_TIM_ConfigClockSource+0x1c>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e0b4      	b.n	8004be2 <HAL_TIM_ConfigClockSource+0x186>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ab0:	d03e      	beq.n	8004b30 <HAL_TIM_ConfigClockSource+0xd4>
 8004ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ab6:	f200 8087 	bhi.w	8004bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004abe:	f000 8086 	beq.w	8004bce <HAL_TIM_ConfigClockSource+0x172>
 8004ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac6:	d87f      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac8:	2b70      	cmp	r3, #112	; 0x70
 8004aca:	d01a      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0xa6>
 8004acc:	2b70      	cmp	r3, #112	; 0x70
 8004ace:	d87b      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad0:	2b60      	cmp	r3, #96	; 0x60
 8004ad2:	d050      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0x11a>
 8004ad4:	2b60      	cmp	r3, #96	; 0x60
 8004ad6:	d877      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad8:	2b50      	cmp	r3, #80	; 0x50
 8004ada:	d03c      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0xfa>
 8004adc:	2b50      	cmp	r3, #80	; 0x50
 8004ade:	d873      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae0:	2b40      	cmp	r3, #64	; 0x40
 8004ae2:	d058      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0x13a>
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d86f      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae8:	2b30      	cmp	r3, #48	; 0x30
 8004aea:	d064      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004aec:	2b30      	cmp	r3, #48	; 0x30
 8004aee:	d86b      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d060      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d867      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d05c      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004afc:	2b10      	cmp	r3, #16
 8004afe:	d05a      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b00:	e062      	b.n	8004bc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6818      	ldr	r0, [r3, #0]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	6899      	ldr	r1, [r3, #8]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f000 fbf6 	bl	8005302 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	609a      	str	r2, [r3, #8]
      break;
 8004b2e:	e04f      	b.n	8004bd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6818      	ldr	r0, [r3, #0]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	6899      	ldr	r1, [r3, #8]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f000 fbdf 	bl	8005302 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b52:	609a      	str	r2, [r3, #8]
      break;
 8004b54:	e03c      	b.n	8004bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	6859      	ldr	r1, [r3, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	461a      	mov	r2, r3
 8004b64:	f000 fb53 	bl	800520e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2150      	movs	r1, #80	; 0x50
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fbac 	bl	80052cc <TIM_ITRx_SetConfig>
      break;
 8004b74:	e02c      	b.n	8004bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6859      	ldr	r1, [r3, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	461a      	mov	r2, r3
 8004b84:	f000 fb72 	bl	800526c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2160      	movs	r1, #96	; 0x60
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fb9c 	bl	80052cc <TIM_ITRx_SetConfig>
      break;
 8004b94:	e01c      	b.n	8004bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6859      	ldr	r1, [r3, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f000 fb33 	bl	800520e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2140      	movs	r1, #64	; 0x40
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fb8c 	bl	80052cc <TIM_ITRx_SetConfig>
      break;
 8004bb4:	e00c      	b.n	8004bd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	f000 fb83 	bl	80052cc <TIM_ITRx_SetConfig>
      break;
 8004bc6:	e003      	b.n	8004bd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	73fb      	strb	r3, [r7, #15]
      break;
 8004bcc:	e000      	b.n	8004bd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b082      	sub	sp, #8
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
 8004bf2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d101      	bne.n	8004c02 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e031      	b.n	8004c66 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004c12:	6839      	ldr	r1, [r7, #0]
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fa69 	bl	80050ec <TIM_SlaveTimer_SetConfig>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d009      	beq.n	8004c34 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e018      	b.n	8004c66 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c42:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c52:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
	...

08004cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a34      	ldr	r2, [pc, #208]	; (8004db8 <TIM_Base_SetConfig+0xe4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d00f      	beq.n	8004d0c <TIM_Base_SetConfig+0x38>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf2:	d00b      	beq.n	8004d0c <TIM_Base_SetConfig+0x38>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a31      	ldr	r2, [pc, #196]	; (8004dbc <TIM_Base_SetConfig+0xe8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d007      	beq.n	8004d0c <TIM_Base_SetConfig+0x38>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a30      	ldr	r2, [pc, #192]	; (8004dc0 <TIM_Base_SetConfig+0xec>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d003      	beq.n	8004d0c <TIM_Base_SetConfig+0x38>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a2f      	ldr	r2, [pc, #188]	; (8004dc4 <TIM_Base_SetConfig+0xf0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d108      	bne.n	8004d1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a25      	ldr	r2, [pc, #148]	; (8004db8 <TIM_Base_SetConfig+0xe4>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d01b      	beq.n	8004d5e <TIM_Base_SetConfig+0x8a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2c:	d017      	beq.n	8004d5e <TIM_Base_SetConfig+0x8a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a22      	ldr	r2, [pc, #136]	; (8004dbc <TIM_Base_SetConfig+0xe8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d013      	beq.n	8004d5e <TIM_Base_SetConfig+0x8a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a21      	ldr	r2, [pc, #132]	; (8004dc0 <TIM_Base_SetConfig+0xec>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00f      	beq.n	8004d5e <TIM_Base_SetConfig+0x8a>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a20      	ldr	r2, [pc, #128]	; (8004dc4 <TIM_Base_SetConfig+0xf0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00b      	beq.n	8004d5e <TIM_Base_SetConfig+0x8a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a1f      	ldr	r2, [pc, #124]	; (8004dc8 <TIM_Base_SetConfig+0xf4>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d007      	beq.n	8004d5e <TIM_Base_SetConfig+0x8a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a1e      	ldr	r2, [pc, #120]	; (8004dcc <TIM_Base_SetConfig+0xf8>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d003      	beq.n	8004d5e <TIM_Base_SetConfig+0x8a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a1d      	ldr	r2, [pc, #116]	; (8004dd0 <TIM_Base_SetConfig+0xfc>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d108      	bne.n	8004d70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a08      	ldr	r2, [pc, #32]	; (8004db8 <TIM_Base_SetConfig+0xe4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d103      	bne.n	8004da4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	615a      	str	r2, [r3, #20]
}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	40000400 	.word	0x40000400
 8004dc0:	40000800 	.word	0x40000800
 8004dc4:	40000c00 	.word	0x40000c00
 8004dc8:	40014000 	.word	0x40014000
 8004dcc:	40014400 	.word	0x40014400
 8004dd0:	40014800 	.word	0x40014800

08004dd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	f023 0201 	bic.w	r2, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0303 	bic.w	r3, r3, #3
 8004e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f023 0302 	bic.w	r3, r3, #2
 8004e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a1c      	ldr	r2, [pc, #112]	; (8004e9c <TIM_OC1_SetConfig+0xc8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d10c      	bne.n	8004e4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f023 0308 	bic.w	r3, r3, #8
 8004e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f023 0304 	bic.w	r3, r3, #4
 8004e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a13      	ldr	r2, [pc, #76]	; (8004e9c <TIM_OC1_SetConfig+0xc8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d111      	bne.n	8004e76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	621a      	str	r2, [r3, #32]
}
 8004e90:	bf00      	nop
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	40010000 	.word	0x40010000

08004ea0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	f023 0210 	bic.w	r2, r3, #16
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	021b      	lsls	r3, r3, #8
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f023 0320 	bic.w	r3, r3, #32
 8004eea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a1e      	ldr	r2, [pc, #120]	; (8004f74 <TIM_OC2_SetConfig+0xd4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d10d      	bne.n	8004f1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a15      	ldr	r2, [pc, #84]	; (8004f74 <TIM_OC2_SetConfig+0xd4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d113      	bne.n	8004f4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	621a      	str	r2, [r3, #32]
}
 8004f66:	bf00      	nop
 8004f68:	371c      	adds	r7, #28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	40010000 	.word	0x40010000

08004f78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0303 	bic.w	r3, r3, #3
 8004fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a1d      	ldr	r2, [pc, #116]	; (8005048 <TIM_OC3_SetConfig+0xd0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d10d      	bne.n	8004ff2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a14      	ldr	r2, [pc, #80]	; (8005048 <TIM_OC3_SetConfig+0xd0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d113      	bne.n	8005022 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	621a      	str	r2, [r3, #32]
}
 800503c:	bf00      	nop
 800503e:	371c      	adds	r7, #28
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	40010000 	.word	0x40010000

0800504c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800507a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	021b      	lsls	r3, r3, #8
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4313      	orrs	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005096:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	031b      	lsls	r3, r3, #12
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a10      	ldr	r2, [pc, #64]	; (80050e8 <TIM_OC4_SetConfig+0x9c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d109      	bne.n	80050c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	019b      	lsls	r3, r3, #6
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	621a      	str	r2, [r3, #32]
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40010000 	.word	0x40010000

080050ec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050f6:	2300      	movs	r3, #0
 80050f8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005108:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	4313      	orrs	r3, r2
 8005112:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f023 0307 	bic.w	r3, r3, #7
 800511a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b70      	cmp	r3, #112	; 0x70
 8005134:	d01a      	beq.n	800516c <TIM_SlaveTimer_SetConfig+0x80>
 8005136:	2b70      	cmp	r3, #112	; 0x70
 8005138:	d860      	bhi.n	80051fc <TIM_SlaveTimer_SetConfig+0x110>
 800513a:	2b60      	cmp	r3, #96	; 0x60
 800513c:	d054      	beq.n	80051e8 <TIM_SlaveTimer_SetConfig+0xfc>
 800513e:	2b60      	cmp	r3, #96	; 0x60
 8005140:	d85c      	bhi.n	80051fc <TIM_SlaveTimer_SetConfig+0x110>
 8005142:	2b50      	cmp	r3, #80	; 0x50
 8005144:	d046      	beq.n	80051d4 <TIM_SlaveTimer_SetConfig+0xe8>
 8005146:	2b50      	cmp	r3, #80	; 0x50
 8005148:	d858      	bhi.n	80051fc <TIM_SlaveTimer_SetConfig+0x110>
 800514a:	2b40      	cmp	r3, #64	; 0x40
 800514c:	d019      	beq.n	8005182 <TIM_SlaveTimer_SetConfig+0x96>
 800514e:	2b40      	cmp	r3, #64	; 0x40
 8005150:	d854      	bhi.n	80051fc <TIM_SlaveTimer_SetConfig+0x110>
 8005152:	2b30      	cmp	r3, #48	; 0x30
 8005154:	d055      	beq.n	8005202 <TIM_SlaveTimer_SetConfig+0x116>
 8005156:	2b30      	cmp	r3, #48	; 0x30
 8005158:	d850      	bhi.n	80051fc <TIM_SlaveTimer_SetConfig+0x110>
 800515a:	2b20      	cmp	r3, #32
 800515c:	d051      	beq.n	8005202 <TIM_SlaveTimer_SetConfig+0x116>
 800515e:	2b20      	cmp	r3, #32
 8005160:	d84c      	bhi.n	80051fc <TIM_SlaveTimer_SetConfig+0x110>
 8005162:	2b00      	cmp	r3, #0
 8005164:	d04d      	beq.n	8005202 <TIM_SlaveTimer_SetConfig+0x116>
 8005166:	2b10      	cmp	r3, #16
 8005168:	d04b      	beq.n	8005202 <TIM_SlaveTimer_SetConfig+0x116>
 800516a:	e047      	b.n	80051fc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68d9      	ldr	r1, [r3, #12]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f000 f8c1 	bl	8005302 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005180:	e040      	b.n	8005204 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b05      	cmp	r3, #5
 8005188:	d101      	bne.n	800518e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e03b      	b.n	8005206 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6a1a      	ldr	r2, [r3, #32]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0201 	bic.w	r2, r2, #1
 80051a4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051b4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	621a      	str	r2, [r3, #32]
      break;
 80051d2:	e017      	b.n	8005204 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6818      	ldr	r0, [r3, #0]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	6899      	ldr	r1, [r3, #8]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	461a      	mov	r2, r3
 80051e2:	f000 f814 	bl	800520e <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80051e6:	e00d      	b.n	8005204 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6818      	ldr	r0, [r3, #0]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	6899      	ldr	r1, [r3, #8]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	461a      	mov	r2, r3
 80051f6:	f000 f839 	bl	800526c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80051fa:	e003      	b.n	8005204 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005200:	e000      	b.n	8005204 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005202:	bf00      	nop
  }

  return status;
 8005204:	7dfb      	ldrb	r3, [r7, #23]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800520e:	b480      	push	{r7}
 8005210:	b087      	sub	sp, #28
 8005212:	af00      	add	r7, sp, #0
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	f023 0201 	bic.w	r2, r3, #1
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005238:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f023 030a 	bic.w	r3, r3, #10
 800524a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	621a      	str	r2, [r3, #32]
}
 8005260:	bf00      	nop
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f023 0210 	bic.w	r2, r3, #16
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005296:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	031b      	lsls	r3, r3, #12
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	621a      	str	r2, [r3, #32]
}
 80052c0:	bf00      	nop
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f043 0307 	orr.w	r3, r3, #7
 80052ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	609a      	str	r2, [r3, #8]
}
 80052f6:	bf00      	nop
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005302:	b480      	push	{r7}
 8005304:	b087      	sub	sp, #28
 8005306:	af00      	add	r7, sp, #0
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	607a      	str	r2, [r7, #4]
 800530e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800531c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	021a      	lsls	r2, r3, #8
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	431a      	orrs	r2, r3
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	4313      	orrs	r3, r2
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	609a      	str	r2, [r3, #8]
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005342:	b480      	push	{r7}
 8005344:	b087      	sub	sp, #28
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f003 031f 	and.w	r3, r3, #31
 8005354:	2201      	movs	r2, #1
 8005356:	fa02 f303 	lsl.w	r3, r2, r3
 800535a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a1a      	ldr	r2, [r3, #32]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	43db      	mvns	r3, r3
 8005364:	401a      	ands	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a1a      	ldr	r2, [r3, #32]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f003 031f 	and.w	r3, r3, #31
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	fa01 f303 	lsl.w	r3, r1, r3
 800537a:	431a      	orrs	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	621a      	str	r2, [r3, #32]
}
 8005380:	bf00      	nop
 8005382:	371c      	adds	r7, #28
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e050      	b.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1c      	ldr	r2, [pc, #112]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d018      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f0:	d013      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a18      	ldr	r2, [pc, #96]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00e      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a16      	ldr	r2, [pc, #88]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d009      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a15      	ldr	r2, [pc, #84]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d004      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a13      	ldr	r2, [pc, #76]	; (8005464 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d10c      	bne.n	8005434 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	4313      	orrs	r3, r2
 800542a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40010000 	.word	0x40010000
 8005458:	40000400 	.word	0x40000400
 800545c:	40000800 	.word	0x40000800
 8005460:	40000c00 	.word	0x40000c00
 8005464:	40014000 	.word	0x40014000

08005468 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e03f      	b.n	8005522 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fb ff12 	bl	80012e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2224      	movs	r2, #36	; 0x24
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fd7b 	bl	8005fd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	691a      	ldr	r2, [r3, #16]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	695a      	ldr	r2, [r3, #20]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005508:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b08a      	sub	sp, #40	; 0x28
 800552e:	af02      	add	r7, sp, #8
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	603b      	str	r3, [r7, #0]
 8005536:	4613      	mov	r3, r2
 8005538:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b20      	cmp	r3, #32
 8005548:	d17c      	bne.n	8005644 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <HAL_UART_Transmit+0x2c>
 8005550:	88fb      	ldrh	r3, [r7, #6]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e075      	b.n	8005646 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_UART_Transmit+0x3e>
 8005564:	2302      	movs	r3, #2
 8005566:	e06e      	b.n	8005646 <HAL_UART_Transmit+0x11c>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2221      	movs	r2, #33	; 0x21
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800557e:	f7fc f829 	bl	80015d4 <HAL_GetTick>
 8005582:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	88fa      	ldrh	r2, [r7, #6]
 8005588:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	88fa      	ldrh	r2, [r7, #6]
 800558e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005598:	d108      	bne.n	80055ac <HAL_UART_Transmit+0x82>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d104      	bne.n	80055ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	61bb      	str	r3, [r7, #24]
 80055aa:	e003      	b.n	80055b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80055bc:	e02a      	b.n	8005614 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2200      	movs	r2, #0
 80055c6:	2180      	movs	r1, #128	; 0x80
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 faf9 	bl	8005bc0 <UART_WaitOnFlagUntilTimeout>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e036      	b.n	8005646 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10b      	bne.n	80055f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	3302      	adds	r3, #2
 80055f2:	61bb      	str	r3, [r7, #24]
 80055f4:	e007      	b.n	8005606 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	781a      	ldrb	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	3301      	adds	r3, #1
 8005604:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800560a:	b29b      	uxth	r3, r3
 800560c:	3b01      	subs	r3, #1
 800560e:	b29a      	uxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005618:	b29b      	uxth	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1cf      	bne.n	80055be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2200      	movs	r2, #0
 8005626:	2140      	movs	r1, #64	; 0x40
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 fac9 	bl	8005bc0 <UART_WaitOnFlagUntilTimeout>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e006      	b.n	8005646 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	e000      	b.n	8005646 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005644:	2302      	movs	r3, #2
  }
}
 8005646:	4618      	mov	r0, r3
 8005648:	3720      	adds	r7, #32
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b0ba      	sub	sp, #232	; 0xe8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005676:	2300      	movs	r3, #0
 8005678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800567c:	2300      	movs	r3, #0
 800567e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800568e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10f      	bne.n	80056b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d009      	beq.n	80056b6 <HAL_UART_IRQHandler+0x66>
 80056a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a6:	f003 0320 	and.w	r3, r3, #32
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 fbd3 	bl	8005e5a <UART_Receive_IT>
      return;
 80056b4:	e256      	b.n	8005b64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 80de 	beq.w	800587c <HAL_UART_IRQHandler+0x22c>
 80056c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d106      	bne.n	80056da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 80d1 	beq.w	800587c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00b      	beq.n	80056fe <HAL_UART_IRQHandler+0xae>
 80056e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d005      	beq.n	80056fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	f043 0201 	orr.w	r2, r3, #1
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00b      	beq.n	8005722 <HAL_UART_IRQHandler+0xd2>
 800570a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f043 0202 	orr.w	r2, r3, #2
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00b      	beq.n	8005746 <HAL_UART_IRQHandler+0xf6>
 800572e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d005      	beq.n	8005746 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	f043 0204 	orr.w	r2, r3, #4
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d011      	beq.n	8005776 <HAL_UART_IRQHandler+0x126>
 8005752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b00      	cmp	r3, #0
 800575c:	d105      	bne.n	800576a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800575e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d005      	beq.n	8005776 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	f043 0208 	orr.w	r2, r3, #8
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 81ed 	beq.w	8005b5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b00      	cmp	r3, #0
 800578a:	d008      	beq.n	800579e <HAL_UART_IRQHandler+0x14e>
 800578c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fb5e 	bl	8005e5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a8:	2b40      	cmp	r3, #64	; 0x40
 80057aa:	bf0c      	ite	eq
 80057ac:	2301      	moveq	r3, #1
 80057ae:	2300      	movne	r3, #0
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d103      	bne.n	80057ca <HAL_UART_IRQHandler+0x17a>
 80057c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d04f      	beq.n	800586a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fa66 	bl	8005c9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057da:	2b40      	cmp	r3, #64	; 0x40
 80057dc:	d141      	bne.n	8005862 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3314      	adds	r3, #20
 80057e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3314      	adds	r3, #20
 8005806:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800580a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800580e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005816:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800581a:	e841 2300 	strex	r3, r2, [r1]
 800581e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1d9      	bne.n	80057de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	2b00      	cmp	r3, #0
 8005830:	d013      	beq.n	800585a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005836:	4a7d      	ldr	r2, [pc, #500]	; (8005a2c <HAL_UART_IRQHandler+0x3dc>)
 8005838:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	4618      	mov	r0, r3
 8005840:	f7fc f879 	bl	8001936 <HAL_DMA_Abort_IT>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d016      	beq.n	8005878 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005854:	4610      	mov	r0, r2
 8005856:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005858:	e00e      	b.n	8005878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f99a 	bl	8005b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005860:	e00a      	b.n	8005878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f996 	bl	8005b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005868:	e006      	b.n	8005878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f992 	bl	8005b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005876:	e170      	b.n	8005b5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005878:	bf00      	nop
    return;
 800587a:	e16e      	b.n	8005b5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005880:	2b01      	cmp	r3, #1
 8005882:	f040 814a 	bne.w	8005b1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800588a:	f003 0310 	and.w	r3, r3, #16
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 8143 	beq.w	8005b1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 813c 	beq.w	8005b1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058a2:	2300      	movs	r3, #0
 80058a4:	60bb      	str	r3, [r7, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	60bb      	str	r3, [r7, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c2:	2b40      	cmp	r3, #64	; 0x40
 80058c4:	f040 80b4 	bne.w	8005a30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 8140 	beq.w	8005b5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058e6:	429a      	cmp	r2, r3
 80058e8:	f080 8139 	bcs.w	8005b5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058fe:	f000 8088 	beq.w	8005a12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	330c      	adds	r3, #12
 8005908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005918:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800591c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	330c      	adds	r3, #12
 800592a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800592e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800593a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1d9      	bne.n	8005902 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3314      	adds	r3, #20
 8005954:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800595e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3314      	adds	r3, #20
 800596e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005972:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005976:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800597a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e1      	bne.n	800594e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3314      	adds	r3, #20
 8005990:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005994:	e853 3f00 	ldrex	r3, [r3]
 8005998:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800599a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800599c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3314      	adds	r3, #20
 80059aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1e3      	bne.n	800598a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059da:	e853 3f00 	ldrex	r3, [r3]
 80059de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e2:	f023 0310 	bic.w	r3, r3, #16
 80059e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	330c      	adds	r3, #12
 80059f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80059f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80059f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059fc:	e841 2300 	strex	r3, r2, [r1]
 8005a00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e3      	bne.n	80059d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7fb ff22 	bl	8001856 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	4619      	mov	r1, r3
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f8c0 	bl	8005ba8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a28:	e099      	b.n	8005b5e <HAL_UART_IRQHandler+0x50e>
 8005a2a:	bf00      	nop
 8005a2c:	08005d63 	.word	0x08005d63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 808b 	beq.w	8005b62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 8086 	beq.w	8005b62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	330c      	adds	r3, #12
 8005a5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a60:	e853 3f00 	ldrex	r3, [r3]
 8005a64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	330c      	adds	r3, #12
 8005a76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a7a:	647a      	str	r2, [r7, #68]	; 0x44
 8005a7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a82:	e841 2300 	strex	r3, r2, [r1]
 8005a86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1e3      	bne.n	8005a56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3314      	adds	r3, #20
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	e853 3f00 	ldrex	r3, [r3]
 8005a9c:	623b      	str	r3, [r7, #32]
   return(result);
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	f023 0301 	bic.w	r3, r3, #1
 8005aa4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3314      	adds	r3, #20
 8005aae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ab2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e3      	bne.n	8005a8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	330c      	adds	r3, #12
 8005ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	e853 3f00 	ldrex	r3, [r3]
 8005ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0310 	bic.w	r3, r3, #16
 8005aea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	330c      	adds	r3, #12
 8005af4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005af8:	61fa      	str	r2, [r7, #28]
 8005afa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afc:	69b9      	ldr	r1, [r7, #24]
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	e841 2300 	strex	r3, r2, [r1]
 8005b04:	617b      	str	r3, [r7, #20]
   return(result);
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1e3      	bne.n	8005ad4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b10:	4619      	mov	r1, r3
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f848 	bl	8005ba8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b18:	e023      	b.n	8005b62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d009      	beq.n	8005b3a <HAL_UART_IRQHandler+0x4ea>
 8005b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f929 	bl	8005d8a <UART_Transmit_IT>
    return;
 8005b38:	e014      	b.n	8005b64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00e      	beq.n	8005b64 <HAL_UART_IRQHandler+0x514>
 8005b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d008      	beq.n	8005b64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f969 	bl	8005e2a <UART_EndTransmit_IT>
    return;
 8005b58:	e004      	b.n	8005b64 <HAL_UART_IRQHandler+0x514>
    return;
 8005b5a:	bf00      	nop
 8005b5c:	e002      	b.n	8005b64 <HAL_UART_IRQHandler+0x514>
      return;
 8005b5e:	bf00      	nop
 8005b60:	e000      	b.n	8005b64 <HAL_UART_IRQHandler+0x514>
      return;
 8005b62:	bf00      	nop
  }
}
 8005b64:	37e8      	adds	r7, #232	; 0xe8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop

08005b6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b090      	sub	sp, #64	; 0x40
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd0:	e050      	b.n	8005c74 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd8:	d04c      	beq.n	8005c74 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d007      	beq.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005be0:	f7fb fcf8 	bl	80015d4 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d241      	bcs.n	8005c74 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	330c      	adds	r3, #12
 8005c0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c10:	637a      	str	r2, [r7, #52]	; 0x34
 8005c12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c18:	e841 2300 	strex	r3, r2, [r1]
 8005c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1e5      	bne.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3314      	adds	r3, #20
 8005c2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	613b      	str	r3, [r7, #16]
   return(result);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f023 0301 	bic.w	r3, r3, #1
 8005c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3314      	adds	r3, #20
 8005c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c44:	623a      	str	r2, [r7, #32]
 8005c46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	69f9      	ldr	r1, [r7, #28]
 8005c4a:	6a3a      	ldr	r2, [r7, #32]
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e5      	bne.n	8005c24 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2220      	movs	r2, #32
 8005c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e00f      	b.n	8005c94 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	bf0c      	ite	eq
 8005c84:	2301      	moveq	r3, #1
 8005c86:	2300      	movne	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	79fb      	ldrb	r3, [r7, #7]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d09f      	beq.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3740      	adds	r7, #64	; 0x40
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b095      	sub	sp, #84	; 0x54
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	330c      	adds	r3, #12
 8005caa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cae:	e853 3f00 	ldrex	r3, [r3]
 8005cb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	330c      	adds	r3, #12
 8005cc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cc4:	643a      	str	r2, [r7, #64]	; 0x40
 8005cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ccc:	e841 2300 	strex	r3, r2, [r1]
 8005cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e5      	bne.n	8005ca4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3314      	adds	r3, #20
 8005cde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	e853 3f00 	ldrex	r3, [r3]
 8005ce6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f023 0301 	bic.w	r3, r3, #1
 8005cee:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3314      	adds	r3, #20
 8005cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d00:	e841 2300 	strex	r3, r2, [r1]
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1e5      	bne.n	8005cd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d119      	bne.n	8005d48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	330c      	adds	r3, #12
 8005d1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f023 0310 	bic.w	r3, r3, #16
 8005d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	330c      	adds	r3, #12
 8005d32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d34:	61ba      	str	r2, [r7, #24]
 8005d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6979      	ldr	r1, [r7, #20]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	613b      	str	r3, [r7, #16]
   return(result);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e5      	bne.n	8005d14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d56:	bf00      	nop
 8005d58:	3754      	adds	r7, #84	; 0x54
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7ff ff09 	bl	8005b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d82:	bf00      	nop
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b085      	sub	sp, #20
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b21      	cmp	r3, #33	; 0x21
 8005d9c:	d13e      	bne.n	8005e1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da6:	d114      	bne.n	8005dd2 <UART_Transmit_IT+0x48>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d110      	bne.n	8005dd2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	1c9a      	adds	r2, r3, #2
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	621a      	str	r2, [r3, #32]
 8005dd0:	e008      	b.n	8005de4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	1c59      	adds	r1, r3, #1
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6211      	str	r1, [r2, #32]
 8005ddc:	781a      	ldrb	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	3b01      	subs	r3, #1
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	4619      	mov	r1, r3
 8005df2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10f      	bne.n	8005e18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	e000      	b.n	8005e1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e1c:	2302      	movs	r3, #2
  }
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff fe8e 	bl	8005b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b08c      	sub	sp, #48	; 0x30
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b22      	cmp	r3, #34	; 0x22
 8005e6c:	f040 80ab 	bne.w	8005fc6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e78:	d117      	bne.n	8005eaa <UART_Receive_IT+0x50>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d113      	bne.n	8005eaa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e82:	2300      	movs	r3, #0
 8005e84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	1c9a      	adds	r2, r3, #2
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	629a      	str	r2, [r3, #40]	; 0x28
 8005ea8:	e026      	b.n	8005ef8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ebc:	d007      	beq.n	8005ece <UART_Receive_IT+0x74>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10a      	bne.n	8005edc <UART_Receive_IT+0x82>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d106      	bne.n	8005edc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed8:	701a      	strb	r2, [r3, #0]
 8005eda:	e008      	b.n	8005eee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	3b01      	subs	r3, #1
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	4619      	mov	r1, r3
 8005f06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d15a      	bne.n	8005fc2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0220 	bic.w	r2, r2, #32
 8005f1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695a      	ldr	r2, [r3, #20]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0201 	bic.w	r2, r2, #1
 8005f3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d135      	bne.n	8005fb8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	330c      	adds	r3, #12
 8005f58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	613b      	str	r3, [r7, #16]
   return(result);
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f023 0310 	bic.w	r3, r3, #16
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	330c      	adds	r3, #12
 8005f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f72:	623a      	str	r2, [r7, #32]
 8005f74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	69f9      	ldr	r1, [r7, #28]
 8005f78:	6a3a      	ldr	r2, [r7, #32]
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1e5      	bne.n	8005f52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0310 	and.w	r3, r3, #16
 8005f90:	2b10      	cmp	r3, #16
 8005f92:	d10a      	bne.n	8005faa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f94:	2300      	movs	r3, #0
 8005f96:	60fb      	str	r3, [r7, #12]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff fdf9 	bl	8005ba8 <HAL_UARTEx_RxEventCallback>
 8005fb6:	e002      	b.n	8005fbe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff fde1 	bl	8005b80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	e002      	b.n	8005fc8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e000      	b.n	8005fc8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005fc6:	2302      	movs	r3, #2
  }
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3730      	adds	r7, #48	; 0x30
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fd4:	b0c0      	sub	sp, #256	; 0x100
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fec:	68d9      	ldr	r1, [r3, #12]
 8005fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	ea40 0301 	orr.w	r3, r0, r1
 8005ff8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	431a      	orrs	r2, r3
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	431a      	orrs	r2, r3
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	4313      	orrs	r3, r2
 8006018:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800601c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006028:	f021 010c 	bic.w	r1, r1, #12
 800602c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006036:	430b      	orrs	r3, r1
 8006038:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800603a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604a:	6999      	ldr	r1, [r3, #24]
 800604c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	ea40 0301 	orr.w	r3, r0, r1
 8006056:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	4b8f      	ldr	r3, [pc, #572]	; (800629c <UART_SetConfig+0x2cc>)
 8006060:	429a      	cmp	r2, r3
 8006062:	d005      	beq.n	8006070 <UART_SetConfig+0xa0>
 8006064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	4b8d      	ldr	r3, [pc, #564]	; (80062a0 <UART_SetConfig+0x2d0>)
 800606c:	429a      	cmp	r2, r3
 800606e:	d104      	bne.n	800607a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006070:	f7fe f894 	bl	800419c <HAL_RCC_GetPCLK2Freq>
 8006074:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006078:	e003      	b.n	8006082 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800607a:	f7fe f87b 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
 800607e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800608c:	f040 810c 	bne.w	80062a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006094:	2200      	movs	r2, #0
 8006096:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800609a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800609e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060a2:	4622      	mov	r2, r4
 80060a4:	462b      	mov	r3, r5
 80060a6:	1891      	adds	r1, r2, r2
 80060a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80060aa:	415b      	adcs	r3, r3
 80060ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060b2:	4621      	mov	r1, r4
 80060b4:	eb12 0801 	adds.w	r8, r2, r1
 80060b8:	4629      	mov	r1, r5
 80060ba:	eb43 0901 	adc.w	r9, r3, r1
 80060be:	f04f 0200 	mov.w	r2, #0
 80060c2:	f04f 0300 	mov.w	r3, #0
 80060c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060d2:	4690      	mov	r8, r2
 80060d4:	4699      	mov	r9, r3
 80060d6:	4623      	mov	r3, r4
 80060d8:	eb18 0303 	adds.w	r3, r8, r3
 80060dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060e0:	462b      	mov	r3, r5
 80060e2:	eb49 0303 	adc.w	r3, r9, r3
 80060e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060fe:	460b      	mov	r3, r1
 8006100:	18db      	adds	r3, r3, r3
 8006102:	653b      	str	r3, [r7, #80]	; 0x50
 8006104:	4613      	mov	r3, r2
 8006106:	eb42 0303 	adc.w	r3, r2, r3
 800610a:	657b      	str	r3, [r7, #84]	; 0x54
 800610c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006110:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006114:	f7fa f8b4 	bl	8000280 <__aeabi_uldivmod>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	4b61      	ldr	r3, [pc, #388]	; (80062a4 <UART_SetConfig+0x2d4>)
 800611e:	fba3 2302 	umull	r2, r3, r3, r2
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	011c      	lsls	r4, r3, #4
 8006126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800612a:	2200      	movs	r2, #0
 800612c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006130:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006134:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006138:	4642      	mov	r2, r8
 800613a:	464b      	mov	r3, r9
 800613c:	1891      	adds	r1, r2, r2
 800613e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006140:	415b      	adcs	r3, r3
 8006142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006144:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006148:	4641      	mov	r1, r8
 800614a:	eb12 0a01 	adds.w	sl, r2, r1
 800614e:	4649      	mov	r1, r9
 8006150:	eb43 0b01 	adc.w	fp, r3, r1
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	f04f 0300 	mov.w	r3, #0
 800615c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006160:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006164:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006168:	4692      	mov	sl, r2
 800616a:	469b      	mov	fp, r3
 800616c:	4643      	mov	r3, r8
 800616e:	eb1a 0303 	adds.w	r3, sl, r3
 8006172:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006176:	464b      	mov	r3, r9
 8006178:	eb4b 0303 	adc.w	r3, fp, r3
 800617c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800618c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006190:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006194:	460b      	mov	r3, r1
 8006196:	18db      	adds	r3, r3, r3
 8006198:	643b      	str	r3, [r7, #64]	; 0x40
 800619a:	4613      	mov	r3, r2
 800619c:	eb42 0303 	adc.w	r3, r2, r3
 80061a0:	647b      	str	r3, [r7, #68]	; 0x44
 80061a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061aa:	f7fa f869 	bl	8000280 <__aeabi_uldivmod>
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	4611      	mov	r1, r2
 80061b4:	4b3b      	ldr	r3, [pc, #236]	; (80062a4 <UART_SetConfig+0x2d4>)
 80061b6:	fba3 2301 	umull	r2, r3, r3, r1
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	2264      	movs	r2, #100	; 0x64
 80061be:	fb02 f303 	mul.w	r3, r2, r3
 80061c2:	1acb      	subs	r3, r1, r3
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061ca:	4b36      	ldr	r3, [pc, #216]	; (80062a4 <UART_SetConfig+0x2d4>)
 80061cc:	fba3 2302 	umull	r2, r3, r3, r2
 80061d0:	095b      	lsrs	r3, r3, #5
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061d8:	441c      	add	r4, r3
 80061da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061de:	2200      	movs	r2, #0
 80061e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061ec:	4642      	mov	r2, r8
 80061ee:	464b      	mov	r3, r9
 80061f0:	1891      	adds	r1, r2, r2
 80061f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80061f4:	415b      	adcs	r3, r3
 80061f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061fc:	4641      	mov	r1, r8
 80061fe:	1851      	adds	r1, r2, r1
 8006200:	6339      	str	r1, [r7, #48]	; 0x30
 8006202:	4649      	mov	r1, r9
 8006204:	414b      	adcs	r3, r1
 8006206:	637b      	str	r3, [r7, #52]	; 0x34
 8006208:	f04f 0200 	mov.w	r2, #0
 800620c:	f04f 0300 	mov.w	r3, #0
 8006210:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006214:	4659      	mov	r1, fp
 8006216:	00cb      	lsls	r3, r1, #3
 8006218:	4651      	mov	r1, sl
 800621a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800621e:	4651      	mov	r1, sl
 8006220:	00ca      	lsls	r2, r1, #3
 8006222:	4610      	mov	r0, r2
 8006224:	4619      	mov	r1, r3
 8006226:	4603      	mov	r3, r0
 8006228:	4642      	mov	r2, r8
 800622a:	189b      	adds	r3, r3, r2
 800622c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006230:	464b      	mov	r3, r9
 8006232:	460a      	mov	r2, r1
 8006234:	eb42 0303 	adc.w	r3, r2, r3
 8006238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800623c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006248:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800624c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006250:	460b      	mov	r3, r1
 8006252:	18db      	adds	r3, r3, r3
 8006254:	62bb      	str	r3, [r7, #40]	; 0x28
 8006256:	4613      	mov	r3, r2
 8006258:	eb42 0303 	adc.w	r3, r2, r3
 800625c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800625e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006262:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006266:	f7fa f80b 	bl	8000280 <__aeabi_uldivmod>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	4b0d      	ldr	r3, [pc, #52]	; (80062a4 <UART_SetConfig+0x2d4>)
 8006270:	fba3 1302 	umull	r1, r3, r3, r2
 8006274:	095b      	lsrs	r3, r3, #5
 8006276:	2164      	movs	r1, #100	; 0x64
 8006278:	fb01 f303 	mul.w	r3, r1, r3
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	3332      	adds	r3, #50	; 0x32
 8006282:	4a08      	ldr	r2, [pc, #32]	; (80062a4 <UART_SetConfig+0x2d4>)
 8006284:	fba2 2303 	umull	r2, r3, r2, r3
 8006288:	095b      	lsrs	r3, r3, #5
 800628a:	f003 0207 	and.w	r2, r3, #7
 800628e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4422      	add	r2, r4
 8006296:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006298:	e105      	b.n	80064a6 <UART_SetConfig+0x4d6>
 800629a:	bf00      	nop
 800629c:	40011000 	.word	0x40011000
 80062a0:	40011400 	.word	0x40011400
 80062a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062ac:	2200      	movs	r2, #0
 80062ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80062ba:	4642      	mov	r2, r8
 80062bc:	464b      	mov	r3, r9
 80062be:	1891      	adds	r1, r2, r2
 80062c0:	6239      	str	r1, [r7, #32]
 80062c2:	415b      	adcs	r3, r3
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
 80062c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062ca:	4641      	mov	r1, r8
 80062cc:	1854      	adds	r4, r2, r1
 80062ce:	4649      	mov	r1, r9
 80062d0:	eb43 0501 	adc.w	r5, r3, r1
 80062d4:	f04f 0200 	mov.w	r2, #0
 80062d8:	f04f 0300 	mov.w	r3, #0
 80062dc:	00eb      	lsls	r3, r5, #3
 80062de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062e2:	00e2      	lsls	r2, r4, #3
 80062e4:	4614      	mov	r4, r2
 80062e6:	461d      	mov	r5, r3
 80062e8:	4643      	mov	r3, r8
 80062ea:	18e3      	adds	r3, r4, r3
 80062ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062f0:	464b      	mov	r3, r9
 80062f2:	eb45 0303 	adc.w	r3, r5, r3
 80062f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006306:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800630a:	f04f 0200 	mov.w	r2, #0
 800630e:	f04f 0300 	mov.w	r3, #0
 8006312:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006316:	4629      	mov	r1, r5
 8006318:	008b      	lsls	r3, r1, #2
 800631a:	4621      	mov	r1, r4
 800631c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006320:	4621      	mov	r1, r4
 8006322:	008a      	lsls	r2, r1, #2
 8006324:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006328:	f7f9 ffaa 	bl	8000280 <__aeabi_uldivmod>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4b60      	ldr	r3, [pc, #384]	; (80064b4 <UART_SetConfig+0x4e4>)
 8006332:	fba3 2302 	umull	r2, r3, r3, r2
 8006336:	095b      	lsrs	r3, r3, #5
 8006338:	011c      	lsls	r4, r3, #4
 800633a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800633e:	2200      	movs	r2, #0
 8006340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006344:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006348:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800634c:	4642      	mov	r2, r8
 800634e:	464b      	mov	r3, r9
 8006350:	1891      	adds	r1, r2, r2
 8006352:	61b9      	str	r1, [r7, #24]
 8006354:	415b      	adcs	r3, r3
 8006356:	61fb      	str	r3, [r7, #28]
 8006358:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800635c:	4641      	mov	r1, r8
 800635e:	1851      	adds	r1, r2, r1
 8006360:	6139      	str	r1, [r7, #16]
 8006362:	4649      	mov	r1, r9
 8006364:	414b      	adcs	r3, r1
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	f04f 0200 	mov.w	r2, #0
 800636c:	f04f 0300 	mov.w	r3, #0
 8006370:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006374:	4659      	mov	r1, fp
 8006376:	00cb      	lsls	r3, r1, #3
 8006378:	4651      	mov	r1, sl
 800637a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800637e:	4651      	mov	r1, sl
 8006380:	00ca      	lsls	r2, r1, #3
 8006382:	4610      	mov	r0, r2
 8006384:	4619      	mov	r1, r3
 8006386:	4603      	mov	r3, r0
 8006388:	4642      	mov	r2, r8
 800638a:	189b      	adds	r3, r3, r2
 800638c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006390:	464b      	mov	r3, r9
 8006392:	460a      	mov	r2, r1
 8006394:	eb42 0303 	adc.w	r3, r2, r3
 8006398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800639c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80063a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063a8:	f04f 0200 	mov.w	r2, #0
 80063ac:	f04f 0300 	mov.w	r3, #0
 80063b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063b4:	4649      	mov	r1, r9
 80063b6:	008b      	lsls	r3, r1, #2
 80063b8:	4641      	mov	r1, r8
 80063ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063be:	4641      	mov	r1, r8
 80063c0:	008a      	lsls	r2, r1, #2
 80063c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80063c6:	f7f9 ff5b 	bl	8000280 <__aeabi_uldivmod>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	4b39      	ldr	r3, [pc, #228]	; (80064b4 <UART_SetConfig+0x4e4>)
 80063d0:	fba3 1302 	umull	r1, r3, r3, r2
 80063d4:	095b      	lsrs	r3, r3, #5
 80063d6:	2164      	movs	r1, #100	; 0x64
 80063d8:	fb01 f303 	mul.w	r3, r1, r3
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	3332      	adds	r3, #50	; 0x32
 80063e2:	4a34      	ldr	r2, [pc, #208]	; (80064b4 <UART_SetConfig+0x4e4>)
 80063e4:	fba2 2303 	umull	r2, r3, r2, r3
 80063e8:	095b      	lsrs	r3, r3, #5
 80063ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063ee:	441c      	add	r4, r3
 80063f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063f4:	2200      	movs	r2, #0
 80063f6:	673b      	str	r3, [r7, #112]	; 0x70
 80063f8:	677a      	str	r2, [r7, #116]	; 0x74
 80063fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063fe:	4642      	mov	r2, r8
 8006400:	464b      	mov	r3, r9
 8006402:	1891      	adds	r1, r2, r2
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	415b      	adcs	r3, r3
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800640e:	4641      	mov	r1, r8
 8006410:	1851      	adds	r1, r2, r1
 8006412:	6039      	str	r1, [r7, #0]
 8006414:	4649      	mov	r1, r9
 8006416:	414b      	adcs	r3, r1
 8006418:	607b      	str	r3, [r7, #4]
 800641a:	f04f 0200 	mov.w	r2, #0
 800641e:	f04f 0300 	mov.w	r3, #0
 8006422:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006426:	4659      	mov	r1, fp
 8006428:	00cb      	lsls	r3, r1, #3
 800642a:	4651      	mov	r1, sl
 800642c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006430:	4651      	mov	r1, sl
 8006432:	00ca      	lsls	r2, r1, #3
 8006434:	4610      	mov	r0, r2
 8006436:	4619      	mov	r1, r3
 8006438:	4603      	mov	r3, r0
 800643a:	4642      	mov	r2, r8
 800643c:	189b      	adds	r3, r3, r2
 800643e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006440:	464b      	mov	r3, r9
 8006442:	460a      	mov	r2, r1
 8006444:	eb42 0303 	adc.w	r3, r2, r3
 8006448:	66fb      	str	r3, [r7, #108]	; 0x6c
 800644a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	663b      	str	r3, [r7, #96]	; 0x60
 8006454:	667a      	str	r2, [r7, #100]	; 0x64
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	f04f 0300 	mov.w	r3, #0
 800645e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006462:	4649      	mov	r1, r9
 8006464:	008b      	lsls	r3, r1, #2
 8006466:	4641      	mov	r1, r8
 8006468:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800646c:	4641      	mov	r1, r8
 800646e:	008a      	lsls	r2, r1, #2
 8006470:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006474:	f7f9 ff04 	bl	8000280 <__aeabi_uldivmod>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <UART_SetConfig+0x4e4>)
 800647e:	fba3 1302 	umull	r1, r3, r3, r2
 8006482:	095b      	lsrs	r3, r3, #5
 8006484:	2164      	movs	r1, #100	; 0x64
 8006486:	fb01 f303 	mul.w	r3, r1, r3
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	011b      	lsls	r3, r3, #4
 800648e:	3332      	adds	r3, #50	; 0x32
 8006490:	4a08      	ldr	r2, [pc, #32]	; (80064b4 <UART_SetConfig+0x4e4>)
 8006492:	fba2 2303 	umull	r2, r3, r2, r3
 8006496:	095b      	lsrs	r3, r3, #5
 8006498:	f003 020f 	and.w	r2, r3, #15
 800649c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4422      	add	r2, r4
 80064a4:	609a      	str	r2, [r3, #8]
}
 80064a6:	bf00      	nop
 80064a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064ac:	46bd      	mov	sp, r7
 80064ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064b2:	bf00      	nop
 80064b4:	51eb851f 	.word	0x51eb851f

080064b8 <__errno>:
 80064b8:	4b01      	ldr	r3, [pc, #4]	; (80064c0 <__errno+0x8>)
 80064ba:	6818      	ldr	r0, [r3, #0]
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	2000000c 	.word	0x2000000c

080064c4 <__libc_init_array>:
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	4d0d      	ldr	r5, [pc, #52]	; (80064fc <__libc_init_array+0x38>)
 80064c8:	4c0d      	ldr	r4, [pc, #52]	; (8006500 <__libc_init_array+0x3c>)
 80064ca:	1b64      	subs	r4, r4, r5
 80064cc:	10a4      	asrs	r4, r4, #2
 80064ce:	2600      	movs	r6, #0
 80064d0:	42a6      	cmp	r6, r4
 80064d2:	d109      	bne.n	80064e8 <__libc_init_array+0x24>
 80064d4:	4d0b      	ldr	r5, [pc, #44]	; (8006504 <__libc_init_array+0x40>)
 80064d6:	4c0c      	ldr	r4, [pc, #48]	; (8006508 <__libc_init_array+0x44>)
 80064d8:	f000 fc8e 	bl	8006df8 <_init>
 80064dc:	1b64      	subs	r4, r4, r5
 80064de:	10a4      	asrs	r4, r4, #2
 80064e0:	2600      	movs	r6, #0
 80064e2:	42a6      	cmp	r6, r4
 80064e4:	d105      	bne.n	80064f2 <__libc_init_array+0x2e>
 80064e6:	bd70      	pop	{r4, r5, r6, pc}
 80064e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ec:	4798      	blx	r3
 80064ee:	3601      	adds	r6, #1
 80064f0:	e7ee      	b.n	80064d0 <__libc_init_array+0xc>
 80064f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f6:	4798      	blx	r3
 80064f8:	3601      	adds	r6, #1
 80064fa:	e7f2      	b.n	80064e2 <__libc_init_array+0x1e>
 80064fc:	08006ea4 	.word	0x08006ea4
 8006500:	08006ea4 	.word	0x08006ea4
 8006504:	08006ea4 	.word	0x08006ea4
 8006508:	08006eac 	.word	0x08006eac

0800650c <memset>:
 800650c:	4402      	add	r2, r0
 800650e:	4603      	mov	r3, r0
 8006510:	4293      	cmp	r3, r2
 8006512:	d100      	bne.n	8006516 <memset+0xa>
 8006514:	4770      	bx	lr
 8006516:	f803 1b01 	strb.w	r1, [r3], #1
 800651a:	e7f9      	b.n	8006510 <memset+0x4>

0800651c <siprintf>:
 800651c:	b40e      	push	{r1, r2, r3}
 800651e:	b500      	push	{lr}
 8006520:	b09c      	sub	sp, #112	; 0x70
 8006522:	ab1d      	add	r3, sp, #116	; 0x74
 8006524:	9002      	str	r0, [sp, #8]
 8006526:	9006      	str	r0, [sp, #24]
 8006528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800652c:	4809      	ldr	r0, [pc, #36]	; (8006554 <siprintf+0x38>)
 800652e:	9107      	str	r1, [sp, #28]
 8006530:	9104      	str	r1, [sp, #16]
 8006532:	4909      	ldr	r1, [pc, #36]	; (8006558 <siprintf+0x3c>)
 8006534:	f853 2b04 	ldr.w	r2, [r3], #4
 8006538:	9105      	str	r1, [sp, #20]
 800653a:	6800      	ldr	r0, [r0, #0]
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	a902      	add	r1, sp, #8
 8006540:	f000 f868 	bl	8006614 <_svfiprintf_r>
 8006544:	9b02      	ldr	r3, [sp, #8]
 8006546:	2200      	movs	r2, #0
 8006548:	701a      	strb	r2, [r3, #0]
 800654a:	b01c      	add	sp, #112	; 0x70
 800654c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006550:	b003      	add	sp, #12
 8006552:	4770      	bx	lr
 8006554:	2000000c 	.word	0x2000000c
 8006558:	ffff0208 	.word	0xffff0208

0800655c <__ssputs_r>:
 800655c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006560:	688e      	ldr	r6, [r1, #8]
 8006562:	429e      	cmp	r6, r3
 8006564:	4682      	mov	sl, r0
 8006566:	460c      	mov	r4, r1
 8006568:	4690      	mov	r8, r2
 800656a:	461f      	mov	r7, r3
 800656c:	d838      	bhi.n	80065e0 <__ssputs_r+0x84>
 800656e:	898a      	ldrh	r2, [r1, #12]
 8006570:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006574:	d032      	beq.n	80065dc <__ssputs_r+0x80>
 8006576:	6825      	ldr	r5, [r4, #0]
 8006578:	6909      	ldr	r1, [r1, #16]
 800657a:	eba5 0901 	sub.w	r9, r5, r1
 800657e:	6965      	ldr	r5, [r4, #20]
 8006580:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006584:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006588:	3301      	adds	r3, #1
 800658a:	444b      	add	r3, r9
 800658c:	106d      	asrs	r5, r5, #1
 800658e:	429d      	cmp	r5, r3
 8006590:	bf38      	it	cc
 8006592:	461d      	movcc	r5, r3
 8006594:	0553      	lsls	r3, r2, #21
 8006596:	d531      	bpl.n	80065fc <__ssputs_r+0xa0>
 8006598:	4629      	mov	r1, r5
 800659a:	f000 fb63 	bl	8006c64 <_malloc_r>
 800659e:	4606      	mov	r6, r0
 80065a0:	b950      	cbnz	r0, 80065b8 <__ssputs_r+0x5c>
 80065a2:	230c      	movs	r3, #12
 80065a4:	f8ca 3000 	str.w	r3, [sl]
 80065a8:	89a3      	ldrh	r3, [r4, #12]
 80065aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065ae:	81a3      	strh	r3, [r4, #12]
 80065b0:	f04f 30ff 	mov.w	r0, #4294967295
 80065b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b8:	6921      	ldr	r1, [r4, #16]
 80065ba:	464a      	mov	r2, r9
 80065bc:	f000 fabe 	bl	8006b3c <memcpy>
 80065c0:	89a3      	ldrh	r3, [r4, #12]
 80065c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ca:	81a3      	strh	r3, [r4, #12]
 80065cc:	6126      	str	r6, [r4, #16]
 80065ce:	6165      	str	r5, [r4, #20]
 80065d0:	444e      	add	r6, r9
 80065d2:	eba5 0509 	sub.w	r5, r5, r9
 80065d6:	6026      	str	r6, [r4, #0]
 80065d8:	60a5      	str	r5, [r4, #8]
 80065da:	463e      	mov	r6, r7
 80065dc:	42be      	cmp	r6, r7
 80065de:	d900      	bls.n	80065e2 <__ssputs_r+0x86>
 80065e0:	463e      	mov	r6, r7
 80065e2:	6820      	ldr	r0, [r4, #0]
 80065e4:	4632      	mov	r2, r6
 80065e6:	4641      	mov	r1, r8
 80065e8:	f000 fab6 	bl	8006b58 <memmove>
 80065ec:	68a3      	ldr	r3, [r4, #8]
 80065ee:	1b9b      	subs	r3, r3, r6
 80065f0:	60a3      	str	r3, [r4, #8]
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	4433      	add	r3, r6
 80065f6:	6023      	str	r3, [r4, #0]
 80065f8:	2000      	movs	r0, #0
 80065fa:	e7db      	b.n	80065b4 <__ssputs_r+0x58>
 80065fc:	462a      	mov	r2, r5
 80065fe:	f000 fba5 	bl	8006d4c <_realloc_r>
 8006602:	4606      	mov	r6, r0
 8006604:	2800      	cmp	r0, #0
 8006606:	d1e1      	bne.n	80065cc <__ssputs_r+0x70>
 8006608:	6921      	ldr	r1, [r4, #16]
 800660a:	4650      	mov	r0, sl
 800660c:	f000 fabe 	bl	8006b8c <_free_r>
 8006610:	e7c7      	b.n	80065a2 <__ssputs_r+0x46>
	...

08006614 <_svfiprintf_r>:
 8006614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006618:	4698      	mov	r8, r3
 800661a:	898b      	ldrh	r3, [r1, #12]
 800661c:	061b      	lsls	r3, r3, #24
 800661e:	b09d      	sub	sp, #116	; 0x74
 8006620:	4607      	mov	r7, r0
 8006622:	460d      	mov	r5, r1
 8006624:	4614      	mov	r4, r2
 8006626:	d50e      	bpl.n	8006646 <_svfiprintf_r+0x32>
 8006628:	690b      	ldr	r3, [r1, #16]
 800662a:	b963      	cbnz	r3, 8006646 <_svfiprintf_r+0x32>
 800662c:	2140      	movs	r1, #64	; 0x40
 800662e:	f000 fb19 	bl	8006c64 <_malloc_r>
 8006632:	6028      	str	r0, [r5, #0]
 8006634:	6128      	str	r0, [r5, #16]
 8006636:	b920      	cbnz	r0, 8006642 <_svfiprintf_r+0x2e>
 8006638:	230c      	movs	r3, #12
 800663a:	603b      	str	r3, [r7, #0]
 800663c:	f04f 30ff 	mov.w	r0, #4294967295
 8006640:	e0d1      	b.n	80067e6 <_svfiprintf_r+0x1d2>
 8006642:	2340      	movs	r3, #64	; 0x40
 8006644:	616b      	str	r3, [r5, #20]
 8006646:	2300      	movs	r3, #0
 8006648:	9309      	str	r3, [sp, #36]	; 0x24
 800664a:	2320      	movs	r3, #32
 800664c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006650:	f8cd 800c 	str.w	r8, [sp, #12]
 8006654:	2330      	movs	r3, #48	; 0x30
 8006656:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006800 <_svfiprintf_r+0x1ec>
 800665a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800665e:	f04f 0901 	mov.w	r9, #1
 8006662:	4623      	mov	r3, r4
 8006664:	469a      	mov	sl, r3
 8006666:	f813 2b01 	ldrb.w	r2, [r3], #1
 800666a:	b10a      	cbz	r2, 8006670 <_svfiprintf_r+0x5c>
 800666c:	2a25      	cmp	r2, #37	; 0x25
 800666e:	d1f9      	bne.n	8006664 <_svfiprintf_r+0x50>
 8006670:	ebba 0b04 	subs.w	fp, sl, r4
 8006674:	d00b      	beq.n	800668e <_svfiprintf_r+0x7a>
 8006676:	465b      	mov	r3, fp
 8006678:	4622      	mov	r2, r4
 800667a:	4629      	mov	r1, r5
 800667c:	4638      	mov	r0, r7
 800667e:	f7ff ff6d 	bl	800655c <__ssputs_r>
 8006682:	3001      	adds	r0, #1
 8006684:	f000 80aa 	beq.w	80067dc <_svfiprintf_r+0x1c8>
 8006688:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800668a:	445a      	add	r2, fp
 800668c:	9209      	str	r2, [sp, #36]	; 0x24
 800668e:	f89a 3000 	ldrb.w	r3, [sl]
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 80a2 	beq.w	80067dc <_svfiprintf_r+0x1c8>
 8006698:	2300      	movs	r3, #0
 800669a:	f04f 32ff 	mov.w	r2, #4294967295
 800669e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066a2:	f10a 0a01 	add.w	sl, sl, #1
 80066a6:	9304      	str	r3, [sp, #16]
 80066a8:	9307      	str	r3, [sp, #28]
 80066aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066ae:	931a      	str	r3, [sp, #104]	; 0x68
 80066b0:	4654      	mov	r4, sl
 80066b2:	2205      	movs	r2, #5
 80066b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066b8:	4851      	ldr	r0, [pc, #324]	; (8006800 <_svfiprintf_r+0x1ec>)
 80066ba:	f7f9 fd91 	bl	80001e0 <memchr>
 80066be:	9a04      	ldr	r2, [sp, #16]
 80066c0:	b9d8      	cbnz	r0, 80066fa <_svfiprintf_r+0xe6>
 80066c2:	06d0      	lsls	r0, r2, #27
 80066c4:	bf44      	itt	mi
 80066c6:	2320      	movmi	r3, #32
 80066c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066cc:	0711      	lsls	r1, r2, #28
 80066ce:	bf44      	itt	mi
 80066d0:	232b      	movmi	r3, #43	; 0x2b
 80066d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066d6:	f89a 3000 	ldrb.w	r3, [sl]
 80066da:	2b2a      	cmp	r3, #42	; 0x2a
 80066dc:	d015      	beq.n	800670a <_svfiprintf_r+0xf6>
 80066de:	9a07      	ldr	r2, [sp, #28]
 80066e0:	4654      	mov	r4, sl
 80066e2:	2000      	movs	r0, #0
 80066e4:	f04f 0c0a 	mov.w	ip, #10
 80066e8:	4621      	mov	r1, r4
 80066ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066ee:	3b30      	subs	r3, #48	; 0x30
 80066f0:	2b09      	cmp	r3, #9
 80066f2:	d94e      	bls.n	8006792 <_svfiprintf_r+0x17e>
 80066f4:	b1b0      	cbz	r0, 8006724 <_svfiprintf_r+0x110>
 80066f6:	9207      	str	r2, [sp, #28]
 80066f8:	e014      	b.n	8006724 <_svfiprintf_r+0x110>
 80066fa:	eba0 0308 	sub.w	r3, r0, r8
 80066fe:	fa09 f303 	lsl.w	r3, r9, r3
 8006702:	4313      	orrs	r3, r2
 8006704:	9304      	str	r3, [sp, #16]
 8006706:	46a2      	mov	sl, r4
 8006708:	e7d2      	b.n	80066b0 <_svfiprintf_r+0x9c>
 800670a:	9b03      	ldr	r3, [sp, #12]
 800670c:	1d19      	adds	r1, r3, #4
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	9103      	str	r1, [sp, #12]
 8006712:	2b00      	cmp	r3, #0
 8006714:	bfbb      	ittet	lt
 8006716:	425b      	neglt	r3, r3
 8006718:	f042 0202 	orrlt.w	r2, r2, #2
 800671c:	9307      	strge	r3, [sp, #28]
 800671e:	9307      	strlt	r3, [sp, #28]
 8006720:	bfb8      	it	lt
 8006722:	9204      	strlt	r2, [sp, #16]
 8006724:	7823      	ldrb	r3, [r4, #0]
 8006726:	2b2e      	cmp	r3, #46	; 0x2e
 8006728:	d10c      	bne.n	8006744 <_svfiprintf_r+0x130>
 800672a:	7863      	ldrb	r3, [r4, #1]
 800672c:	2b2a      	cmp	r3, #42	; 0x2a
 800672e:	d135      	bne.n	800679c <_svfiprintf_r+0x188>
 8006730:	9b03      	ldr	r3, [sp, #12]
 8006732:	1d1a      	adds	r2, r3, #4
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	9203      	str	r2, [sp, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	bfb8      	it	lt
 800673c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006740:	3402      	adds	r4, #2
 8006742:	9305      	str	r3, [sp, #20]
 8006744:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006810 <_svfiprintf_r+0x1fc>
 8006748:	7821      	ldrb	r1, [r4, #0]
 800674a:	2203      	movs	r2, #3
 800674c:	4650      	mov	r0, sl
 800674e:	f7f9 fd47 	bl	80001e0 <memchr>
 8006752:	b140      	cbz	r0, 8006766 <_svfiprintf_r+0x152>
 8006754:	2340      	movs	r3, #64	; 0x40
 8006756:	eba0 000a 	sub.w	r0, r0, sl
 800675a:	fa03 f000 	lsl.w	r0, r3, r0
 800675e:	9b04      	ldr	r3, [sp, #16]
 8006760:	4303      	orrs	r3, r0
 8006762:	3401      	adds	r4, #1
 8006764:	9304      	str	r3, [sp, #16]
 8006766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800676a:	4826      	ldr	r0, [pc, #152]	; (8006804 <_svfiprintf_r+0x1f0>)
 800676c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006770:	2206      	movs	r2, #6
 8006772:	f7f9 fd35 	bl	80001e0 <memchr>
 8006776:	2800      	cmp	r0, #0
 8006778:	d038      	beq.n	80067ec <_svfiprintf_r+0x1d8>
 800677a:	4b23      	ldr	r3, [pc, #140]	; (8006808 <_svfiprintf_r+0x1f4>)
 800677c:	bb1b      	cbnz	r3, 80067c6 <_svfiprintf_r+0x1b2>
 800677e:	9b03      	ldr	r3, [sp, #12]
 8006780:	3307      	adds	r3, #7
 8006782:	f023 0307 	bic.w	r3, r3, #7
 8006786:	3308      	adds	r3, #8
 8006788:	9303      	str	r3, [sp, #12]
 800678a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800678c:	4433      	add	r3, r6
 800678e:	9309      	str	r3, [sp, #36]	; 0x24
 8006790:	e767      	b.n	8006662 <_svfiprintf_r+0x4e>
 8006792:	fb0c 3202 	mla	r2, ip, r2, r3
 8006796:	460c      	mov	r4, r1
 8006798:	2001      	movs	r0, #1
 800679a:	e7a5      	b.n	80066e8 <_svfiprintf_r+0xd4>
 800679c:	2300      	movs	r3, #0
 800679e:	3401      	adds	r4, #1
 80067a0:	9305      	str	r3, [sp, #20]
 80067a2:	4619      	mov	r1, r3
 80067a4:	f04f 0c0a 	mov.w	ip, #10
 80067a8:	4620      	mov	r0, r4
 80067aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067ae:	3a30      	subs	r2, #48	; 0x30
 80067b0:	2a09      	cmp	r2, #9
 80067b2:	d903      	bls.n	80067bc <_svfiprintf_r+0x1a8>
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d0c5      	beq.n	8006744 <_svfiprintf_r+0x130>
 80067b8:	9105      	str	r1, [sp, #20]
 80067ba:	e7c3      	b.n	8006744 <_svfiprintf_r+0x130>
 80067bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80067c0:	4604      	mov	r4, r0
 80067c2:	2301      	movs	r3, #1
 80067c4:	e7f0      	b.n	80067a8 <_svfiprintf_r+0x194>
 80067c6:	ab03      	add	r3, sp, #12
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	462a      	mov	r2, r5
 80067cc:	4b0f      	ldr	r3, [pc, #60]	; (800680c <_svfiprintf_r+0x1f8>)
 80067ce:	a904      	add	r1, sp, #16
 80067d0:	4638      	mov	r0, r7
 80067d2:	f3af 8000 	nop.w
 80067d6:	1c42      	adds	r2, r0, #1
 80067d8:	4606      	mov	r6, r0
 80067da:	d1d6      	bne.n	800678a <_svfiprintf_r+0x176>
 80067dc:	89ab      	ldrh	r3, [r5, #12]
 80067de:	065b      	lsls	r3, r3, #25
 80067e0:	f53f af2c 	bmi.w	800663c <_svfiprintf_r+0x28>
 80067e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067e6:	b01d      	add	sp, #116	; 0x74
 80067e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ec:	ab03      	add	r3, sp, #12
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	462a      	mov	r2, r5
 80067f2:	4b06      	ldr	r3, [pc, #24]	; (800680c <_svfiprintf_r+0x1f8>)
 80067f4:	a904      	add	r1, sp, #16
 80067f6:	4638      	mov	r0, r7
 80067f8:	f000 f87a 	bl	80068f0 <_printf_i>
 80067fc:	e7eb      	b.n	80067d6 <_svfiprintf_r+0x1c2>
 80067fe:	bf00      	nop
 8006800:	08006e68 	.word	0x08006e68
 8006804:	08006e72 	.word	0x08006e72
 8006808:	00000000 	.word	0x00000000
 800680c:	0800655d 	.word	0x0800655d
 8006810:	08006e6e 	.word	0x08006e6e

08006814 <_printf_common>:
 8006814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006818:	4616      	mov	r6, r2
 800681a:	4699      	mov	r9, r3
 800681c:	688a      	ldr	r2, [r1, #8]
 800681e:	690b      	ldr	r3, [r1, #16]
 8006820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006824:	4293      	cmp	r3, r2
 8006826:	bfb8      	it	lt
 8006828:	4613      	movlt	r3, r2
 800682a:	6033      	str	r3, [r6, #0]
 800682c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006830:	4607      	mov	r7, r0
 8006832:	460c      	mov	r4, r1
 8006834:	b10a      	cbz	r2, 800683a <_printf_common+0x26>
 8006836:	3301      	adds	r3, #1
 8006838:	6033      	str	r3, [r6, #0]
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	0699      	lsls	r1, r3, #26
 800683e:	bf42      	ittt	mi
 8006840:	6833      	ldrmi	r3, [r6, #0]
 8006842:	3302      	addmi	r3, #2
 8006844:	6033      	strmi	r3, [r6, #0]
 8006846:	6825      	ldr	r5, [r4, #0]
 8006848:	f015 0506 	ands.w	r5, r5, #6
 800684c:	d106      	bne.n	800685c <_printf_common+0x48>
 800684e:	f104 0a19 	add.w	sl, r4, #25
 8006852:	68e3      	ldr	r3, [r4, #12]
 8006854:	6832      	ldr	r2, [r6, #0]
 8006856:	1a9b      	subs	r3, r3, r2
 8006858:	42ab      	cmp	r3, r5
 800685a:	dc26      	bgt.n	80068aa <_printf_common+0x96>
 800685c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006860:	1e13      	subs	r3, r2, #0
 8006862:	6822      	ldr	r2, [r4, #0]
 8006864:	bf18      	it	ne
 8006866:	2301      	movne	r3, #1
 8006868:	0692      	lsls	r2, r2, #26
 800686a:	d42b      	bmi.n	80068c4 <_printf_common+0xb0>
 800686c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006870:	4649      	mov	r1, r9
 8006872:	4638      	mov	r0, r7
 8006874:	47c0      	blx	r8
 8006876:	3001      	adds	r0, #1
 8006878:	d01e      	beq.n	80068b8 <_printf_common+0xa4>
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	68e5      	ldr	r5, [r4, #12]
 800687e:	6832      	ldr	r2, [r6, #0]
 8006880:	f003 0306 	and.w	r3, r3, #6
 8006884:	2b04      	cmp	r3, #4
 8006886:	bf08      	it	eq
 8006888:	1aad      	subeq	r5, r5, r2
 800688a:	68a3      	ldr	r3, [r4, #8]
 800688c:	6922      	ldr	r2, [r4, #16]
 800688e:	bf0c      	ite	eq
 8006890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006894:	2500      	movne	r5, #0
 8006896:	4293      	cmp	r3, r2
 8006898:	bfc4      	itt	gt
 800689a:	1a9b      	subgt	r3, r3, r2
 800689c:	18ed      	addgt	r5, r5, r3
 800689e:	2600      	movs	r6, #0
 80068a0:	341a      	adds	r4, #26
 80068a2:	42b5      	cmp	r5, r6
 80068a4:	d11a      	bne.n	80068dc <_printf_common+0xc8>
 80068a6:	2000      	movs	r0, #0
 80068a8:	e008      	b.n	80068bc <_printf_common+0xa8>
 80068aa:	2301      	movs	r3, #1
 80068ac:	4652      	mov	r2, sl
 80068ae:	4649      	mov	r1, r9
 80068b0:	4638      	mov	r0, r7
 80068b2:	47c0      	blx	r8
 80068b4:	3001      	adds	r0, #1
 80068b6:	d103      	bne.n	80068c0 <_printf_common+0xac>
 80068b8:	f04f 30ff 	mov.w	r0, #4294967295
 80068bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c0:	3501      	adds	r5, #1
 80068c2:	e7c6      	b.n	8006852 <_printf_common+0x3e>
 80068c4:	18e1      	adds	r1, r4, r3
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	2030      	movs	r0, #48	; 0x30
 80068ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068ce:	4422      	add	r2, r4
 80068d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068d8:	3302      	adds	r3, #2
 80068da:	e7c7      	b.n	800686c <_printf_common+0x58>
 80068dc:	2301      	movs	r3, #1
 80068de:	4622      	mov	r2, r4
 80068e0:	4649      	mov	r1, r9
 80068e2:	4638      	mov	r0, r7
 80068e4:	47c0      	blx	r8
 80068e6:	3001      	adds	r0, #1
 80068e8:	d0e6      	beq.n	80068b8 <_printf_common+0xa4>
 80068ea:	3601      	adds	r6, #1
 80068ec:	e7d9      	b.n	80068a2 <_printf_common+0x8e>
	...

080068f0 <_printf_i>:
 80068f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068f4:	7e0f      	ldrb	r7, [r1, #24]
 80068f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068f8:	2f78      	cmp	r7, #120	; 0x78
 80068fa:	4691      	mov	r9, r2
 80068fc:	4680      	mov	r8, r0
 80068fe:	460c      	mov	r4, r1
 8006900:	469a      	mov	sl, r3
 8006902:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006906:	d807      	bhi.n	8006918 <_printf_i+0x28>
 8006908:	2f62      	cmp	r7, #98	; 0x62
 800690a:	d80a      	bhi.n	8006922 <_printf_i+0x32>
 800690c:	2f00      	cmp	r7, #0
 800690e:	f000 80d8 	beq.w	8006ac2 <_printf_i+0x1d2>
 8006912:	2f58      	cmp	r7, #88	; 0x58
 8006914:	f000 80a3 	beq.w	8006a5e <_printf_i+0x16e>
 8006918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800691c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006920:	e03a      	b.n	8006998 <_printf_i+0xa8>
 8006922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006926:	2b15      	cmp	r3, #21
 8006928:	d8f6      	bhi.n	8006918 <_printf_i+0x28>
 800692a:	a101      	add	r1, pc, #4	; (adr r1, 8006930 <_printf_i+0x40>)
 800692c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006930:	08006989 	.word	0x08006989
 8006934:	0800699d 	.word	0x0800699d
 8006938:	08006919 	.word	0x08006919
 800693c:	08006919 	.word	0x08006919
 8006940:	08006919 	.word	0x08006919
 8006944:	08006919 	.word	0x08006919
 8006948:	0800699d 	.word	0x0800699d
 800694c:	08006919 	.word	0x08006919
 8006950:	08006919 	.word	0x08006919
 8006954:	08006919 	.word	0x08006919
 8006958:	08006919 	.word	0x08006919
 800695c:	08006aa9 	.word	0x08006aa9
 8006960:	080069cd 	.word	0x080069cd
 8006964:	08006a8b 	.word	0x08006a8b
 8006968:	08006919 	.word	0x08006919
 800696c:	08006919 	.word	0x08006919
 8006970:	08006acb 	.word	0x08006acb
 8006974:	08006919 	.word	0x08006919
 8006978:	080069cd 	.word	0x080069cd
 800697c:	08006919 	.word	0x08006919
 8006980:	08006919 	.word	0x08006919
 8006984:	08006a93 	.word	0x08006a93
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	1d1a      	adds	r2, r3, #4
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	602a      	str	r2, [r5, #0]
 8006990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006998:	2301      	movs	r3, #1
 800699a:	e0a3      	b.n	8006ae4 <_printf_i+0x1f4>
 800699c:	6820      	ldr	r0, [r4, #0]
 800699e:	6829      	ldr	r1, [r5, #0]
 80069a0:	0606      	lsls	r6, r0, #24
 80069a2:	f101 0304 	add.w	r3, r1, #4
 80069a6:	d50a      	bpl.n	80069be <_printf_i+0xce>
 80069a8:	680e      	ldr	r6, [r1, #0]
 80069aa:	602b      	str	r3, [r5, #0]
 80069ac:	2e00      	cmp	r6, #0
 80069ae:	da03      	bge.n	80069b8 <_printf_i+0xc8>
 80069b0:	232d      	movs	r3, #45	; 0x2d
 80069b2:	4276      	negs	r6, r6
 80069b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069b8:	485e      	ldr	r0, [pc, #376]	; (8006b34 <_printf_i+0x244>)
 80069ba:	230a      	movs	r3, #10
 80069bc:	e019      	b.n	80069f2 <_printf_i+0x102>
 80069be:	680e      	ldr	r6, [r1, #0]
 80069c0:	602b      	str	r3, [r5, #0]
 80069c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069c6:	bf18      	it	ne
 80069c8:	b236      	sxthne	r6, r6
 80069ca:	e7ef      	b.n	80069ac <_printf_i+0xbc>
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	6820      	ldr	r0, [r4, #0]
 80069d0:	1d19      	adds	r1, r3, #4
 80069d2:	6029      	str	r1, [r5, #0]
 80069d4:	0601      	lsls	r1, r0, #24
 80069d6:	d501      	bpl.n	80069dc <_printf_i+0xec>
 80069d8:	681e      	ldr	r6, [r3, #0]
 80069da:	e002      	b.n	80069e2 <_printf_i+0xf2>
 80069dc:	0646      	lsls	r6, r0, #25
 80069de:	d5fb      	bpl.n	80069d8 <_printf_i+0xe8>
 80069e0:	881e      	ldrh	r6, [r3, #0]
 80069e2:	4854      	ldr	r0, [pc, #336]	; (8006b34 <_printf_i+0x244>)
 80069e4:	2f6f      	cmp	r7, #111	; 0x6f
 80069e6:	bf0c      	ite	eq
 80069e8:	2308      	moveq	r3, #8
 80069ea:	230a      	movne	r3, #10
 80069ec:	2100      	movs	r1, #0
 80069ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069f2:	6865      	ldr	r5, [r4, #4]
 80069f4:	60a5      	str	r5, [r4, #8]
 80069f6:	2d00      	cmp	r5, #0
 80069f8:	bfa2      	ittt	ge
 80069fa:	6821      	ldrge	r1, [r4, #0]
 80069fc:	f021 0104 	bicge.w	r1, r1, #4
 8006a00:	6021      	strge	r1, [r4, #0]
 8006a02:	b90e      	cbnz	r6, 8006a08 <_printf_i+0x118>
 8006a04:	2d00      	cmp	r5, #0
 8006a06:	d04d      	beq.n	8006aa4 <_printf_i+0x1b4>
 8006a08:	4615      	mov	r5, r2
 8006a0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a0e:	fb03 6711 	mls	r7, r3, r1, r6
 8006a12:	5dc7      	ldrb	r7, [r0, r7]
 8006a14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a18:	4637      	mov	r7, r6
 8006a1a:	42bb      	cmp	r3, r7
 8006a1c:	460e      	mov	r6, r1
 8006a1e:	d9f4      	bls.n	8006a0a <_printf_i+0x11a>
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d10b      	bne.n	8006a3c <_printf_i+0x14c>
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	07de      	lsls	r6, r3, #31
 8006a28:	d508      	bpl.n	8006a3c <_printf_i+0x14c>
 8006a2a:	6923      	ldr	r3, [r4, #16]
 8006a2c:	6861      	ldr	r1, [r4, #4]
 8006a2e:	4299      	cmp	r1, r3
 8006a30:	bfde      	ittt	le
 8006a32:	2330      	movle	r3, #48	; 0x30
 8006a34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a3c:	1b52      	subs	r2, r2, r5
 8006a3e:	6122      	str	r2, [r4, #16]
 8006a40:	f8cd a000 	str.w	sl, [sp]
 8006a44:	464b      	mov	r3, r9
 8006a46:	aa03      	add	r2, sp, #12
 8006a48:	4621      	mov	r1, r4
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	f7ff fee2 	bl	8006814 <_printf_common>
 8006a50:	3001      	adds	r0, #1
 8006a52:	d14c      	bne.n	8006aee <_printf_i+0x1fe>
 8006a54:	f04f 30ff 	mov.w	r0, #4294967295
 8006a58:	b004      	add	sp, #16
 8006a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a5e:	4835      	ldr	r0, [pc, #212]	; (8006b34 <_printf_i+0x244>)
 8006a60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a64:	6829      	ldr	r1, [r5, #0]
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a6c:	6029      	str	r1, [r5, #0]
 8006a6e:	061d      	lsls	r5, r3, #24
 8006a70:	d514      	bpl.n	8006a9c <_printf_i+0x1ac>
 8006a72:	07df      	lsls	r7, r3, #31
 8006a74:	bf44      	itt	mi
 8006a76:	f043 0320 	orrmi.w	r3, r3, #32
 8006a7a:	6023      	strmi	r3, [r4, #0]
 8006a7c:	b91e      	cbnz	r6, 8006a86 <_printf_i+0x196>
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	f023 0320 	bic.w	r3, r3, #32
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	2310      	movs	r3, #16
 8006a88:	e7b0      	b.n	80069ec <_printf_i+0xfc>
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	f043 0320 	orr.w	r3, r3, #32
 8006a90:	6023      	str	r3, [r4, #0]
 8006a92:	2378      	movs	r3, #120	; 0x78
 8006a94:	4828      	ldr	r0, [pc, #160]	; (8006b38 <_printf_i+0x248>)
 8006a96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a9a:	e7e3      	b.n	8006a64 <_printf_i+0x174>
 8006a9c:	0659      	lsls	r1, r3, #25
 8006a9e:	bf48      	it	mi
 8006aa0:	b2b6      	uxthmi	r6, r6
 8006aa2:	e7e6      	b.n	8006a72 <_printf_i+0x182>
 8006aa4:	4615      	mov	r5, r2
 8006aa6:	e7bb      	b.n	8006a20 <_printf_i+0x130>
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	6826      	ldr	r6, [r4, #0]
 8006aac:	6961      	ldr	r1, [r4, #20]
 8006aae:	1d18      	adds	r0, r3, #4
 8006ab0:	6028      	str	r0, [r5, #0]
 8006ab2:	0635      	lsls	r5, r6, #24
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	d501      	bpl.n	8006abc <_printf_i+0x1cc>
 8006ab8:	6019      	str	r1, [r3, #0]
 8006aba:	e002      	b.n	8006ac2 <_printf_i+0x1d2>
 8006abc:	0670      	lsls	r0, r6, #25
 8006abe:	d5fb      	bpl.n	8006ab8 <_printf_i+0x1c8>
 8006ac0:	8019      	strh	r1, [r3, #0]
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	6123      	str	r3, [r4, #16]
 8006ac6:	4615      	mov	r5, r2
 8006ac8:	e7ba      	b.n	8006a40 <_printf_i+0x150>
 8006aca:	682b      	ldr	r3, [r5, #0]
 8006acc:	1d1a      	adds	r2, r3, #4
 8006ace:	602a      	str	r2, [r5, #0]
 8006ad0:	681d      	ldr	r5, [r3, #0]
 8006ad2:	6862      	ldr	r2, [r4, #4]
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f7f9 fb82 	bl	80001e0 <memchr>
 8006adc:	b108      	cbz	r0, 8006ae2 <_printf_i+0x1f2>
 8006ade:	1b40      	subs	r0, r0, r5
 8006ae0:	6060      	str	r0, [r4, #4]
 8006ae2:	6863      	ldr	r3, [r4, #4]
 8006ae4:	6123      	str	r3, [r4, #16]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aec:	e7a8      	b.n	8006a40 <_printf_i+0x150>
 8006aee:	6923      	ldr	r3, [r4, #16]
 8006af0:	462a      	mov	r2, r5
 8006af2:	4649      	mov	r1, r9
 8006af4:	4640      	mov	r0, r8
 8006af6:	47d0      	blx	sl
 8006af8:	3001      	adds	r0, #1
 8006afa:	d0ab      	beq.n	8006a54 <_printf_i+0x164>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	079b      	lsls	r3, r3, #30
 8006b00:	d413      	bmi.n	8006b2a <_printf_i+0x23a>
 8006b02:	68e0      	ldr	r0, [r4, #12]
 8006b04:	9b03      	ldr	r3, [sp, #12]
 8006b06:	4298      	cmp	r0, r3
 8006b08:	bfb8      	it	lt
 8006b0a:	4618      	movlt	r0, r3
 8006b0c:	e7a4      	b.n	8006a58 <_printf_i+0x168>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	4632      	mov	r2, r6
 8006b12:	4649      	mov	r1, r9
 8006b14:	4640      	mov	r0, r8
 8006b16:	47d0      	blx	sl
 8006b18:	3001      	adds	r0, #1
 8006b1a:	d09b      	beq.n	8006a54 <_printf_i+0x164>
 8006b1c:	3501      	adds	r5, #1
 8006b1e:	68e3      	ldr	r3, [r4, #12]
 8006b20:	9903      	ldr	r1, [sp, #12]
 8006b22:	1a5b      	subs	r3, r3, r1
 8006b24:	42ab      	cmp	r3, r5
 8006b26:	dcf2      	bgt.n	8006b0e <_printf_i+0x21e>
 8006b28:	e7eb      	b.n	8006b02 <_printf_i+0x212>
 8006b2a:	2500      	movs	r5, #0
 8006b2c:	f104 0619 	add.w	r6, r4, #25
 8006b30:	e7f5      	b.n	8006b1e <_printf_i+0x22e>
 8006b32:	bf00      	nop
 8006b34:	08006e79 	.word	0x08006e79
 8006b38:	08006e8a 	.word	0x08006e8a

08006b3c <memcpy>:
 8006b3c:	440a      	add	r2, r1
 8006b3e:	4291      	cmp	r1, r2
 8006b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b44:	d100      	bne.n	8006b48 <memcpy+0xc>
 8006b46:	4770      	bx	lr
 8006b48:	b510      	push	{r4, lr}
 8006b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b52:	4291      	cmp	r1, r2
 8006b54:	d1f9      	bne.n	8006b4a <memcpy+0xe>
 8006b56:	bd10      	pop	{r4, pc}

08006b58 <memmove>:
 8006b58:	4288      	cmp	r0, r1
 8006b5a:	b510      	push	{r4, lr}
 8006b5c:	eb01 0402 	add.w	r4, r1, r2
 8006b60:	d902      	bls.n	8006b68 <memmove+0x10>
 8006b62:	4284      	cmp	r4, r0
 8006b64:	4623      	mov	r3, r4
 8006b66:	d807      	bhi.n	8006b78 <memmove+0x20>
 8006b68:	1e43      	subs	r3, r0, #1
 8006b6a:	42a1      	cmp	r1, r4
 8006b6c:	d008      	beq.n	8006b80 <memmove+0x28>
 8006b6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b76:	e7f8      	b.n	8006b6a <memmove+0x12>
 8006b78:	4402      	add	r2, r0
 8006b7a:	4601      	mov	r1, r0
 8006b7c:	428a      	cmp	r2, r1
 8006b7e:	d100      	bne.n	8006b82 <memmove+0x2a>
 8006b80:	bd10      	pop	{r4, pc}
 8006b82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b8a:	e7f7      	b.n	8006b7c <memmove+0x24>

08006b8c <_free_r>:
 8006b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b8e:	2900      	cmp	r1, #0
 8006b90:	d044      	beq.n	8006c1c <_free_r+0x90>
 8006b92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b96:	9001      	str	r0, [sp, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b9e:	bfb8      	it	lt
 8006ba0:	18e4      	addlt	r4, r4, r3
 8006ba2:	f000 f913 	bl	8006dcc <__malloc_lock>
 8006ba6:	4a1e      	ldr	r2, [pc, #120]	; (8006c20 <_free_r+0x94>)
 8006ba8:	9801      	ldr	r0, [sp, #4]
 8006baa:	6813      	ldr	r3, [r2, #0]
 8006bac:	b933      	cbnz	r3, 8006bbc <_free_r+0x30>
 8006bae:	6063      	str	r3, [r4, #4]
 8006bb0:	6014      	str	r4, [r2, #0]
 8006bb2:	b003      	add	sp, #12
 8006bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bb8:	f000 b90e 	b.w	8006dd8 <__malloc_unlock>
 8006bbc:	42a3      	cmp	r3, r4
 8006bbe:	d908      	bls.n	8006bd2 <_free_r+0x46>
 8006bc0:	6825      	ldr	r5, [r4, #0]
 8006bc2:	1961      	adds	r1, r4, r5
 8006bc4:	428b      	cmp	r3, r1
 8006bc6:	bf01      	itttt	eq
 8006bc8:	6819      	ldreq	r1, [r3, #0]
 8006bca:	685b      	ldreq	r3, [r3, #4]
 8006bcc:	1949      	addeq	r1, r1, r5
 8006bce:	6021      	streq	r1, [r4, #0]
 8006bd0:	e7ed      	b.n	8006bae <_free_r+0x22>
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	b10b      	cbz	r3, 8006bdc <_free_r+0x50>
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	d9fa      	bls.n	8006bd2 <_free_r+0x46>
 8006bdc:	6811      	ldr	r1, [r2, #0]
 8006bde:	1855      	adds	r5, r2, r1
 8006be0:	42a5      	cmp	r5, r4
 8006be2:	d10b      	bne.n	8006bfc <_free_r+0x70>
 8006be4:	6824      	ldr	r4, [r4, #0]
 8006be6:	4421      	add	r1, r4
 8006be8:	1854      	adds	r4, r2, r1
 8006bea:	42a3      	cmp	r3, r4
 8006bec:	6011      	str	r1, [r2, #0]
 8006bee:	d1e0      	bne.n	8006bb2 <_free_r+0x26>
 8006bf0:	681c      	ldr	r4, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	6053      	str	r3, [r2, #4]
 8006bf6:	4421      	add	r1, r4
 8006bf8:	6011      	str	r1, [r2, #0]
 8006bfa:	e7da      	b.n	8006bb2 <_free_r+0x26>
 8006bfc:	d902      	bls.n	8006c04 <_free_r+0x78>
 8006bfe:	230c      	movs	r3, #12
 8006c00:	6003      	str	r3, [r0, #0]
 8006c02:	e7d6      	b.n	8006bb2 <_free_r+0x26>
 8006c04:	6825      	ldr	r5, [r4, #0]
 8006c06:	1961      	adds	r1, r4, r5
 8006c08:	428b      	cmp	r3, r1
 8006c0a:	bf04      	itt	eq
 8006c0c:	6819      	ldreq	r1, [r3, #0]
 8006c0e:	685b      	ldreq	r3, [r3, #4]
 8006c10:	6063      	str	r3, [r4, #4]
 8006c12:	bf04      	itt	eq
 8006c14:	1949      	addeq	r1, r1, r5
 8006c16:	6021      	streq	r1, [r4, #0]
 8006c18:	6054      	str	r4, [r2, #4]
 8006c1a:	e7ca      	b.n	8006bb2 <_free_r+0x26>
 8006c1c:	b003      	add	sp, #12
 8006c1e:	bd30      	pop	{r4, r5, pc}
 8006c20:	20000354 	.word	0x20000354

08006c24 <sbrk_aligned>:
 8006c24:	b570      	push	{r4, r5, r6, lr}
 8006c26:	4e0e      	ldr	r6, [pc, #56]	; (8006c60 <sbrk_aligned+0x3c>)
 8006c28:	460c      	mov	r4, r1
 8006c2a:	6831      	ldr	r1, [r6, #0]
 8006c2c:	4605      	mov	r5, r0
 8006c2e:	b911      	cbnz	r1, 8006c36 <sbrk_aligned+0x12>
 8006c30:	f000 f8bc 	bl	8006dac <_sbrk_r>
 8006c34:	6030      	str	r0, [r6, #0]
 8006c36:	4621      	mov	r1, r4
 8006c38:	4628      	mov	r0, r5
 8006c3a:	f000 f8b7 	bl	8006dac <_sbrk_r>
 8006c3e:	1c43      	adds	r3, r0, #1
 8006c40:	d00a      	beq.n	8006c58 <sbrk_aligned+0x34>
 8006c42:	1cc4      	adds	r4, r0, #3
 8006c44:	f024 0403 	bic.w	r4, r4, #3
 8006c48:	42a0      	cmp	r0, r4
 8006c4a:	d007      	beq.n	8006c5c <sbrk_aligned+0x38>
 8006c4c:	1a21      	subs	r1, r4, r0
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f000 f8ac 	bl	8006dac <_sbrk_r>
 8006c54:	3001      	adds	r0, #1
 8006c56:	d101      	bne.n	8006c5c <sbrk_aligned+0x38>
 8006c58:	f04f 34ff 	mov.w	r4, #4294967295
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	bd70      	pop	{r4, r5, r6, pc}
 8006c60:	20000358 	.word	0x20000358

08006c64 <_malloc_r>:
 8006c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c68:	1ccd      	adds	r5, r1, #3
 8006c6a:	f025 0503 	bic.w	r5, r5, #3
 8006c6e:	3508      	adds	r5, #8
 8006c70:	2d0c      	cmp	r5, #12
 8006c72:	bf38      	it	cc
 8006c74:	250c      	movcc	r5, #12
 8006c76:	2d00      	cmp	r5, #0
 8006c78:	4607      	mov	r7, r0
 8006c7a:	db01      	blt.n	8006c80 <_malloc_r+0x1c>
 8006c7c:	42a9      	cmp	r1, r5
 8006c7e:	d905      	bls.n	8006c8c <_malloc_r+0x28>
 8006c80:	230c      	movs	r3, #12
 8006c82:	603b      	str	r3, [r7, #0]
 8006c84:	2600      	movs	r6, #0
 8006c86:	4630      	mov	r0, r6
 8006c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c8c:	4e2e      	ldr	r6, [pc, #184]	; (8006d48 <_malloc_r+0xe4>)
 8006c8e:	f000 f89d 	bl	8006dcc <__malloc_lock>
 8006c92:	6833      	ldr	r3, [r6, #0]
 8006c94:	461c      	mov	r4, r3
 8006c96:	bb34      	cbnz	r4, 8006ce6 <_malloc_r+0x82>
 8006c98:	4629      	mov	r1, r5
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	f7ff ffc2 	bl	8006c24 <sbrk_aligned>
 8006ca0:	1c43      	adds	r3, r0, #1
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	d14d      	bne.n	8006d42 <_malloc_r+0xde>
 8006ca6:	6834      	ldr	r4, [r6, #0]
 8006ca8:	4626      	mov	r6, r4
 8006caa:	2e00      	cmp	r6, #0
 8006cac:	d140      	bne.n	8006d30 <_malloc_r+0xcc>
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	4631      	mov	r1, r6
 8006cb2:	4638      	mov	r0, r7
 8006cb4:	eb04 0803 	add.w	r8, r4, r3
 8006cb8:	f000 f878 	bl	8006dac <_sbrk_r>
 8006cbc:	4580      	cmp	r8, r0
 8006cbe:	d13a      	bne.n	8006d36 <_malloc_r+0xd2>
 8006cc0:	6821      	ldr	r1, [r4, #0]
 8006cc2:	3503      	adds	r5, #3
 8006cc4:	1a6d      	subs	r5, r5, r1
 8006cc6:	f025 0503 	bic.w	r5, r5, #3
 8006cca:	3508      	adds	r5, #8
 8006ccc:	2d0c      	cmp	r5, #12
 8006cce:	bf38      	it	cc
 8006cd0:	250c      	movcc	r5, #12
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	4638      	mov	r0, r7
 8006cd6:	f7ff ffa5 	bl	8006c24 <sbrk_aligned>
 8006cda:	3001      	adds	r0, #1
 8006cdc:	d02b      	beq.n	8006d36 <_malloc_r+0xd2>
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	442b      	add	r3, r5
 8006ce2:	6023      	str	r3, [r4, #0]
 8006ce4:	e00e      	b.n	8006d04 <_malloc_r+0xa0>
 8006ce6:	6822      	ldr	r2, [r4, #0]
 8006ce8:	1b52      	subs	r2, r2, r5
 8006cea:	d41e      	bmi.n	8006d2a <_malloc_r+0xc6>
 8006cec:	2a0b      	cmp	r2, #11
 8006cee:	d916      	bls.n	8006d1e <_malloc_r+0xba>
 8006cf0:	1961      	adds	r1, r4, r5
 8006cf2:	42a3      	cmp	r3, r4
 8006cf4:	6025      	str	r5, [r4, #0]
 8006cf6:	bf18      	it	ne
 8006cf8:	6059      	strne	r1, [r3, #4]
 8006cfa:	6863      	ldr	r3, [r4, #4]
 8006cfc:	bf08      	it	eq
 8006cfe:	6031      	streq	r1, [r6, #0]
 8006d00:	5162      	str	r2, [r4, r5]
 8006d02:	604b      	str	r3, [r1, #4]
 8006d04:	4638      	mov	r0, r7
 8006d06:	f104 060b 	add.w	r6, r4, #11
 8006d0a:	f000 f865 	bl	8006dd8 <__malloc_unlock>
 8006d0e:	f026 0607 	bic.w	r6, r6, #7
 8006d12:	1d23      	adds	r3, r4, #4
 8006d14:	1af2      	subs	r2, r6, r3
 8006d16:	d0b6      	beq.n	8006c86 <_malloc_r+0x22>
 8006d18:	1b9b      	subs	r3, r3, r6
 8006d1a:	50a3      	str	r3, [r4, r2]
 8006d1c:	e7b3      	b.n	8006c86 <_malloc_r+0x22>
 8006d1e:	6862      	ldr	r2, [r4, #4]
 8006d20:	42a3      	cmp	r3, r4
 8006d22:	bf0c      	ite	eq
 8006d24:	6032      	streq	r2, [r6, #0]
 8006d26:	605a      	strne	r2, [r3, #4]
 8006d28:	e7ec      	b.n	8006d04 <_malloc_r+0xa0>
 8006d2a:	4623      	mov	r3, r4
 8006d2c:	6864      	ldr	r4, [r4, #4]
 8006d2e:	e7b2      	b.n	8006c96 <_malloc_r+0x32>
 8006d30:	4634      	mov	r4, r6
 8006d32:	6876      	ldr	r6, [r6, #4]
 8006d34:	e7b9      	b.n	8006caa <_malloc_r+0x46>
 8006d36:	230c      	movs	r3, #12
 8006d38:	603b      	str	r3, [r7, #0]
 8006d3a:	4638      	mov	r0, r7
 8006d3c:	f000 f84c 	bl	8006dd8 <__malloc_unlock>
 8006d40:	e7a1      	b.n	8006c86 <_malloc_r+0x22>
 8006d42:	6025      	str	r5, [r4, #0]
 8006d44:	e7de      	b.n	8006d04 <_malloc_r+0xa0>
 8006d46:	bf00      	nop
 8006d48:	20000354 	.word	0x20000354

08006d4c <_realloc_r>:
 8006d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d50:	4680      	mov	r8, r0
 8006d52:	4614      	mov	r4, r2
 8006d54:	460e      	mov	r6, r1
 8006d56:	b921      	cbnz	r1, 8006d62 <_realloc_r+0x16>
 8006d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	f7ff bf81 	b.w	8006c64 <_malloc_r>
 8006d62:	b92a      	cbnz	r2, 8006d70 <_realloc_r+0x24>
 8006d64:	f7ff ff12 	bl	8006b8c <_free_r>
 8006d68:	4625      	mov	r5, r4
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d70:	f000 f838 	bl	8006de4 <_malloc_usable_size_r>
 8006d74:	4284      	cmp	r4, r0
 8006d76:	4607      	mov	r7, r0
 8006d78:	d802      	bhi.n	8006d80 <_realloc_r+0x34>
 8006d7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d7e:	d812      	bhi.n	8006da6 <_realloc_r+0x5a>
 8006d80:	4621      	mov	r1, r4
 8006d82:	4640      	mov	r0, r8
 8006d84:	f7ff ff6e 	bl	8006c64 <_malloc_r>
 8006d88:	4605      	mov	r5, r0
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d0ed      	beq.n	8006d6a <_realloc_r+0x1e>
 8006d8e:	42bc      	cmp	r4, r7
 8006d90:	4622      	mov	r2, r4
 8006d92:	4631      	mov	r1, r6
 8006d94:	bf28      	it	cs
 8006d96:	463a      	movcs	r2, r7
 8006d98:	f7ff fed0 	bl	8006b3c <memcpy>
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4640      	mov	r0, r8
 8006da0:	f7ff fef4 	bl	8006b8c <_free_r>
 8006da4:	e7e1      	b.n	8006d6a <_realloc_r+0x1e>
 8006da6:	4635      	mov	r5, r6
 8006da8:	e7df      	b.n	8006d6a <_realloc_r+0x1e>
	...

08006dac <_sbrk_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	4d06      	ldr	r5, [pc, #24]	; (8006dc8 <_sbrk_r+0x1c>)
 8006db0:	2300      	movs	r3, #0
 8006db2:	4604      	mov	r4, r0
 8006db4:	4608      	mov	r0, r1
 8006db6:	602b      	str	r3, [r5, #0]
 8006db8:	f7fa fb34 	bl	8001424 <_sbrk>
 8006dbc:	1c43      	adds	r3, r0, #1
 8006dbe:	d102      	bne.n	8006dc6 <_sbrk_r+0x1a>
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	b103      	cbz	r3, 8006dc6 <_sbrk_r+0x1a>
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	bd38      	pop	{r3, r4, r5, pc}
 8006dc8:	2000035c 	.word	0x2000035c

08006dcc <__malloc_lock>:
 8006dcc:	4801      	ldr	r0, [pc, #4]	; (8006dd4 <__malloc_lock+0x8>)
 8006dce:	f000 b811 	b.w	8006df4 <__retarget_lock_acquire_recursive>
 8006dd2:	bf00      	nop
 8006dd4:	20000360 	.word	0x20000360

08006dd8 <__malloc_unlock>:
 8006dd8:	4801      	ldr	r0, [pc, #4]	; (8006de0 <__malloc_unlock+0x8>)
 8006dda:	f000 b80c 	b.w	8006df6 <__retarget_lock_release_recursive>
 8006dde:	bf00      	nop
 8006de0:	20000360 	.word	0x20000360

08006de4 <_malloc_usable_size_r>:
 8006de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006de8:	1f18      	subs	r0, r3, #4
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	bfbc      	itt	lt
 8006dee:	580b      	ldrlt	r3, [r1, r0]
 8006df0:	18c0      	addlt	r0, r0, r3
 8006df2:	4770      	bx	lr

08006df4 <__retarget_lock_acquire_recursive>:
 8006df4:	4770      	bx	lr

08006df6 <__retarget_lock_release_recursive>:
 8006df6:	4770      	bx	lr

08006df8 <_init>:
 8006df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfa:	bf00      	nop
 8006dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dfe:	bc08      	pop	{r3}
 8006e00:	469e      	mov	lr, r3
 8006e02:	4770      	bx	lr

08006e04 <_fini>:
 8006e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e06:	bf00      	nop
 8006e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0a:	bc08      	pop	{r3}
 8006e0c:	469e      	mov	lr, r3
 8006e0e:	4770      	bx	lr
