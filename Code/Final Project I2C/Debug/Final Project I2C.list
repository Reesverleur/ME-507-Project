
Final Project I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000623c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080063dc  080063dc  000163dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006450  08006450  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006450  08006450  00016450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006458  08006458  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006458  08006458  00016458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800645c  0800645c  0001645c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000070  080064d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  080064d0  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f34  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ac  00000000  00000000  00030fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00033280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00034198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195ac  00000000  00000000  00035000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e0c  00000000  00000000  0004e5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093783  00000000  00000000  000613b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4b3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000448c  00000000  00000000  000f4b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080063c4 	.word	0x080063c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080063c4 	.word	0x080063c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <_ZN5CSensC1EP17I2C_HandleTypeDef>:
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <numeric>

CSens::CSens(I2C_HandleTypeDef* hi2c){
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af04      	add	r7, sp, #16
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2252      	movs	r2, #82	; 0x52
 8000592:	801a      	strh	r2, [r3, #0]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2203      	movs	r2, #3
 8000598:	805a      	strh	r2, [r3, #2]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	221b      	movs	r2, #27
 800059e:	809a      	strh	r2, [r3, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2203      	movs	r2, #3
 80005a4:	719a      	strb	r2, [r3, #6]
	i2c = hi2c;
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <_ZN5CSensC1EP17I2C_HandleTypeDef+0x5c>)
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	6013      	str	r3, [r2, #0]
	HAL_I2C_Mem_Write(i2c,Address,0x00,I2C_MEMADD_SIZE_8BIT,Init,1,1000);
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <_ZN5CSensC1EP17I2C_HandleTypeDef+0x5c>)
 80005ae:	6818      	ldr	r0, [r3, #0]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005b6:	b299      	uxth	r1, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3306      	adds	r3, #6
 80005bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005c0:	9202      	str	r2, [sp, #8]
 80005c2:	2201      	movs	r2, #1
 80005c4:	9201      	str	r2, [sp, #4]
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2301      	movs	r3, #1
 80005ca:	2200      	movs	r2, #0
 80005cc:	f001 f9e0 	bl	8001990 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 80005d0:	2005      	movs	r0, #5
 80005d2:	f000 fd25 	bl	8001020 <HAL_Delay>
}
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000240 	.word	0x20000240

080005e4 <_ZN5CSens8getCdataEv>:

void CSens::getCdata(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_IT(i2c,Address,MemAddr,I2C_MEMADD_SIZE_8BIT,Cdata,Length);
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <_ZN5CSens8getCdataEv+0x38>)
 80005ee:	6818      	ldr	r0, [r3, #0]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005f6:	b299      	uxth	r1, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005fe:	b29a      	uxth	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000606:	b29b      	uxth	r3, r3
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <_ZN5CSens8getCdataEv+0x3c>)
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2301      	movs	r3, #1
 8000610:	f001 fab8 	bl	8001b84 <HAL_I2C_Mem_Read_IT>
	//Clr_Val = (Cdata[1]<<8)+Cdata[0];
	//Red_Val = (Cdata[3]<<8)+Cdata[2];
	//Grn_Val = (Cdata[5]<<8)+Cdata[4];
	//Blu_Val = (Cdata[7]<<8)+Cdata[6];
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000240 	.word	0x20000240
 8000620:	20000224 	.word	0x20000224

08000624 <HAL_I2C_MemRxCpltCallback>:


void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef* hi2c){			// Memory read callback function
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
		if(hi2c == CSens::i2c){
 800062c:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <HAL_I2C_MemRxCpltCallback+0x80>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	429a      	cmp	r2, r3
 8000634:	d12f      	bne.n	8000696 <HAL_I2C_MemRxCpltCallback+0x72>
			CSens::Clr_Val = (CSens::Cdata[20]<<8)+CSens::Cdata[19];	// Clear data is little endian
 8000636:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <HAL_I2C_MemRxCpltCallback+0x84>)
 8000638:	7d1b      	ldrb	r3, [r3, #20]
 800063a:	b29b      	uxth	r3, r3
 800063c:	021b      	lsls	r3, r3, #8
 800063e:	b29a      	uxth	r2, r3
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <HAL_I2C_MemRxCpltCallback+0x84>)
 8000642:	7cdb      	ldrb	r3, [r3, #19]
 8000644:	b29b      	uxth	r3, r3
 8000646:	4413      	add	r3, r2
 8000648:	b29a      	uxth	r2, r3
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <HAL_I2C_MemRxCpltCallback+0x88>)
 800064c:	801a      	strh	r2, [r3, #0]
			CSens::Red_Val = (CSens::Cdata[21]<<8)+CSens::Cdata[22];	// RGB data is big endian
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <HAL_I2C_MemRxCpltCallback+0x84>)
 8000650:	7d5b      	ldrb	r3, [r3, #21]
 8000652:	b29b      	uxth	r3, r3
 8000654:	021b      	lsls	r3, r3, #8
 8000656:	b29a      	uxth	r2, r3
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <HAL_I2C_MemRxCpltCallback+0x84>)
 800065a:	7d9b      	ldrb	r3, [r3, #22]
 800065c:	b29b      	uxth	r3, r3
 800065e:	4413      	add	r3, r2
 8000660:	b29a      	uxth	r2, r3
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8000664:	801a      	strh	r2, [r3, #0]
			CSens::Grn_Val = (CSens::Cdata[23]<<8)+CSens::Cdata[24];
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <HAL_I2C_MemRxCpltCallback+0x84>)
 8000668:	7ddb      	ldrb	r3, [r3, #23]
 800066a:	b29b      	uxth	r3, r3
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <HAL_I2C_MemRxCpltCallback+0x84>)
 8000672:	7e1b      	ldrb	r3, [r3, #24]
 8000674:	b29b      	uxth	r3, r3
 8000676:	4413      	add	r3, r2
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <HAL_I2C_MemRxCpltCallback+0x90>)
 800067c:	801a      	strh	r2, [r3, #0]
			CSens::Blu_Val = (CSens::Cdata[25]<<8)+CSens::Cdata[26];
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <HAL_I2C_MemRxCpltCallback+0x84>)
 8000680:	7e5b      	ldrb	r3, [r3, #25]
 8000682:	b29b      	uxth	r3, r3
 8000684:	021b      	lsls	r3, r3, #8
 8000686:	b29a      	uxth	r2, r3
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <HAL_I2C_MemRxCpltCallback+0x84>)
 800068a:	7e9b      	ldrb	r3, [r3, #26]
 800068c:	b29b      	uxth	r3, r3
 800068e:	4413      	add	r3, r2
 8000690:	b29a      	uxth	r2, r3
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <HAL_I2C_MemRxCpltCallback+0x94>)
 8000694:	801a      	strh	r2, [r3, #0]
		}
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000240 	.word	0x20000240
 80006a8:	20000224 	.word	0x20000224
 80006ac:	20000244 	.word	0x20000244
 80006b0:	20000246 	.word	0x20000246
 80006b4:	20000248 	.word	0x20000248
 80006b8:	2000024a 	.word	0x2000024a

080006bc <HAL_I2C_MemTxCpltCallback>:
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef* hi2c){			// Memory read callback function
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
		if(hi2c == CSens::i2c){
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_I2C_MemTxCpltCallback+0x24>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d102      	bne.n	80006d4 <HAL_I2C_MemTxCpltCallback+0x18>
			CSens::fTx = 1;
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <HAL_I2C_MemTxCpltCallback+0x28>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	601a      	str	r2, [r3, #0]
		}
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	20000240 	.word	0x20000240
 80006e4:	20000220 	.word	0x20000220

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ee:	f000 fc25 	bl	8000f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f2:	f000 f859 	bl	80007a8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f6:	f000 f9e9 	bl	8000acc <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 80006fa:	f000 f95d 	bl	80009b8 <_ZL12MX_TIM2_Initv>
  MX_USART1_UART_Init();
 80006fe:	f000 f9b7 	bl	8000a70 <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 8000702:	f000 f8f7 	bl	80008f4 <_ZL12MX_TIM1_Initv>
  MX_I2C2_Init();
 8000706:	f000 f8c1 	bl	800088c <_ZL12MX_I2C2_Initv>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Init(&hi2c2);
 800070a:	481e      	ldr	r0, [pc, #120]	; (8000784 <main+0x9c>)
 800070c:	f000 fffc 	bl	8001708 <HAL_I2C_Init>
  CSens Col = CSens(&hi2c2);
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	491c      	ldr	r1, [pc, #112]	; (8000784 <main+0x9c>)
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff35 	bl	8000584 <_ZN5CSensC1EP17I2C_HandleTypeDef>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(250);
 800071a:	20fa      	movs	r0, #250	; 0xfa
 800071c:	f000 fc80 	bl	8001020 <HAL_Delay>
	  Col.getCdata();
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ff5e 	bl	80005e4 <_ZN5CSens8getCdataEv>
	  Color[0] = Col.Clr_Val;
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <main+0xa0>)
 800072a:	881a      	ldrh	r2, [r3, #0]
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <main+0xa4>)
 800072e:	801a      	strh	r2, [r3, #0]
	  Color[1] = Col.Red_Val;
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <main+0xa8>)
 8000732:	881a      	ldrh	r2, [r3, #0]
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <main+0xa4>)
 8000736:	805a      	strh	r2, [r3, #2]
	  Color[2] = Col.Grn_Val;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <main+0xac>)
 800073a:	881a      	ldrh	r2, [r3, #0]
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <main+0xa4>)
 800073e:	809a      	strh	r2, [r3, #4]
	  Color[3] = Col.Blu_Val;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <main+0xb0>)
 8000742:	881a      	ldrh	r2, [r3, #0]
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <main+0xa4>)
 8000746:	80da      	strh	r2, [r3, #6]

	  int32_t len = sprintf(msg_buff, "Color Detected is: %i , %i , %i , %i\r\n",Color[0],Color[1],Color[2],Color[3]);
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <main+0xa4>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <main+0xa4>)
 8000750:	885b      	ldrh	r3, [r3, #2]
 8000752:	4618      	mov	r0, r3
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <main+0xa4>)
 8000756:	889b      	ldrh	r3, [r3, #4]
 8000758:	461a      	mov	r2, r3
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <main+0xa4>)
 800075c:	88db      	ldrh	r3, [r3, #6]
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	9200      	str	r2, [sp, #0]
 8000762:	4603      	mov	r3, r0
 8000764:	460a      	mov	r2, r1
 8000766:	490d      	ldr	r1, [pc, #52]	; (800079c <main+0xb4>)
 8000768:	480d      	ldr	r0, [pc, #52]	; (80007a0 <main+0xb8>)
 800076a:	f005 f9bd 	bl	8005ae8 <siprintf>
 800076e:	60f8      	str	r0, [r7, #12]
	  	// print string to uart
	  	HAL_UART_Transmit(&huart1,(uint8_t*) &msg_buff,len,1000);
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	b29a      	uxth	r2, r3
 8000774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000778:	4909      	ldr	r1, [pc, #36]	; (80007a0 <main+0xb8>)
 800077a:	480a      	ldr	r0, [pc, #40]	; (80007a4 <main+0xbc>)
 800077c:	f004 f9bb 	bl	8004af6 <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000780:	e7cb      	b.n	800071a <main+0x32>
 8000782:	bf00      	nop
 8000784:	2000008c 	.word	0x2000008c
 8000788:	20000244 	.word	0x20000244
 800078c:	200001b4 	.word	0x200001b4
 8000790:	20000246 	.word	0x20000246
 8000794:	20000248 	.word	0x20000248
 8000798:	2000024a 	.word	0x2000024a
 800079c:	080063dc 	.word	0x080063dc
 80007a0:	200001bc 	.word	0x200001bc
 80007a4:	20000170 	.word	0x20000170

080007a8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	; 0x50
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0320 	add.w	r3, r7, #32
 80007b2:	2230      	movs	r2, #48	; 0x30
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f005 f98e 	bl	8005ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007cc:	2300      	movs	r3, #0
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <_Z18SystemClock_Configv+0xdc>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	4a2b      	ldr	r2, [pc, #172]	; (8000884 <_Z18SystemClock_Configv+0xdc>)
 80007d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007da:	6413      	str	r3, [r2, #64]	; 0x40
 80007dc:	4b29      	ldr	r3, [pc, #164]	; (8000884 <_Z18SystemClock_Configv+0xdc>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	4b26      	ldr	r3, [pc, #152]	; (8000888 <_Z18SystemClock_Configv+0xe0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a25      	ldr	r2, [pc, #148]	; (8000888 <_Z18SystemClock_Configv+0xe0>)
 80007f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <_Z18SystemClock_Configv+0xe0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000804:	2301      	movs	r3, #1
 8000806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080e:	2302      	movs	r3, #2
 8000810:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000812:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000818:	2319      	movs	r3, #25
 800081a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800081c:	23c0      	movs	r3, #192	; 0xc0
 800081e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000820:	2302      	movs	r3, #2
 8000822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000824:	2304      	movs	r3, #4
 8000826:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0320 	add.w	r3, r7, #32
 800082c:	4618      	mov	r0, r3
 800082e:	f003 f94b 	bl	8003ac8 <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	bf14      	ite	ne
 8000838:	2301      	movne	r3, #1
 800083a:	2300      	moveq	r3, #0
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000842:	f000 f9a3 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2302      	movs	r3, #2
 800084c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000856:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2103      	movs	r1, #3
 8000862:	4618      	mov	r0, r3
 8000864:	f003 fba8 	bl	8003fb8 <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	bf14      	ite	ne
 800086e:	2301      	movne	r3, #1
 8000870:	2300      	moveq	r3, #0
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000878:	f000 f988 	bl	8000b8c <Error_Handler>
  }
}
 800087c:	bf00      	nop
 800087e:	3750      	adds	r7, #80	; 0x50
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40007000 	.word	0x40007000

0800088c <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <_ZL12MX_I2C2_Initv+0x5c>)
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <_ZL12MX_I2C2_Initv+0x60>)
 8000894:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <_ZL12MX_I2C2_Initv+0x5c>)
 8000898:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <_ZL12MX_I2C2_Initv+0x64>)
 800089a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <_ZL12MX_I2C2_Initv+0x5c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <_ZL12MX_I2C2_Initv+0x5c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <_ZL12MX_I2C2_Initv+0x5c>)
 80008aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b0:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <_ZL12MX_I2C2_Initv+0x5c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <_ZL12MX_I2C2_Initv+0x5c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <_ZL12MX_I2C2_Initv+0x5c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <_ZL12MX_I2C2_Initv+0x5c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008c8:	4807      	ldr	r0, [pc, #28]	; (80008e8 <_ZL12MX_I2C2_Initv+0x5c>)
 80008ca:	f000 ff1d 	bl	8001708 <HAL_I2C_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	bf14      	ite	ne
 80008d4:	2301      	movne	r3, #1
 80008d6:	2300      	moveq	r3, #0
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 80008de:	f000 f955 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000008c 	.word	0x2000008c
 80008ec:	40005800 	.word	0x40005800
 80008f0:	00061a80 	.word	0x00061a80

080008f4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000912:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000914:	4a27      	ldr	r2, [pc, #156]	; (80009b4 <_ZL12MX_TIM1_Initv+0xc0>)
 8000916:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000918:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <_ZL12MX_TIM1_Initv+0xbc>)
 800091a:	2200      	movs	r2, #0
 800091c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800092a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092c:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <_ZL12MX_TIM1_Initv+0xbc>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000932:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <_ZL12MX_TIM1_Initv+0xbc>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800093e:	481c      	ldr	r0, [pc, #112]	; (80009b0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000940:	f003 fd1a 	bl	8004378 <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	bf14      	ite	ne
 800094a:	2301      	movne	r3, #1
 800094c:	2300      	moveq	r3, #0
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8000954:	f000 f91a 	bl	8000b8c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	4619      	mov	r1, r3
 8000966:	4812      	ldr	r0, [pc, #72]	; (80009b0 <_ZL12MX_TIM1_Initv+0xbc>)
 8000968:	f003 fe1c 	bl	80045a4 <HAL_TIM_SlaveConfigSynchro>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	bf14      	ite	ne
 8000972:	2301      	movne	r3, #1
 8000974:	2300      	moveq	r3, #0
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <_ZL12MX_TIM1_Initv+0x8c>
  {
    Error_Handler();
 800097c:	f000 f906 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	4619      	mov	r1, r3
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <_ZL12MX_TIM1_Initv+0xbc>)
 800098e:	f003 fff7 	bl	8004980 <HAL_TIMEx_MasterConfigSynchronization>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	bf14      	ite	ne
 8000998:	2301      	movne	r3, #1
 800099a:	2300      	moveq	r3, #0
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 80009a2:	f000 f8f3 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	3720      	adds	r7, #32
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200000e0 	.word	0x200000e0
 80009b4:	40010000 	.word	0x40010000

080009b8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	463b      	mov	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009d4:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <_ZL12MX_TIM2_Initv+0xb4>)
 80009d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009dc:	4b23      	ldr	r3, [pc, #140]	; (8000a6c <_ZL12MX_TIM2_Initv+0xb4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <_ZL12MX_TIM2_Initv+0xb4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4799;
 80009e8:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <_ZL12MX_TIM2_Initv+0xb4>)
 80009ea:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80009ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <_ZL12MX_TIM2_Initv+0xb4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <_ZL12MX_TIM2_Initv+0xb4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009fc:	481b      	ldr	r0, [pc, #108]	; (8000a6c <_ZL12MX_TIM2_Initv+0xb4>)
 80009fe:	f003 fcbb 	bl	8004378 <HAL_TIM_Base_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bf14      	ite	ne
 8000a08:	2301      	movne	r3, #1
 8000a0a:	2300      	moveq	r3, #0
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8000a12:	f000 f8bb 	bl	8000b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a1c:	f107 0308 	add.w	r3, r7, #8
 8000a20:	4619      	mov	r1, r3
 8000a22:	4812      	ldr	r0, [pc, #72]	; (8000a6c <_ZL12MX_TIM2_Initv+0xb4>)
 8000a24:	f003 fcf7 	bl	8004416 <HAL_TIM_ConfigClockSource>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	bf14      	ite	ne
 8000a2e:	2301      	movne	r3, #1
 8000a30:	2300      	moveq	r3, #0
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8000a38:	f000 f8a8 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	4619      	mov	r1, r3
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <_ZL12MX_TIM2_Initv+0xb4>)
 8000a4a:	f003 ff99 	bl	8004980 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	bf14      	ite	ne
 8000a54:	2301      	movne	r3, #1
 8000a56:	2300      	moveq	r3, #0
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8000a5e:	f000 f895 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000128 	.word	0x20000128

08000a70 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000a76:	4a14      	ldr	r2, [pc, #80]	; (8000ac8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000a7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aa6:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000aa8:	f003 ffd8 	bl	8004a5c <HAL_UART_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	bf14      	ite	ne
 8000ab2:	2301      	movne	r3, #1
 8000ab4:	2300      	moveq	r3, #0
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000abc:	f000 f866 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000170 	.word	0x20000170
 8000ac8:	40011000 	.word	0x40011000

08000acc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <_ZL12MX_GPIO_Initv+0xb8>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a26      	ldr	r2, [pc, #152]	; (8000b84 <_ZL12MX_GPIO_Initv+0xb8>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <_ZL12MX_GPIO_Initv+0xb8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <_ZL12MX_GPIO_Initv+0xb8>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <_ZL12MX_GPIO_Initv+0xb8>)
 8000b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <_ZL12MX_GPIO_Initv+0xb8>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <_ZL12MX_GPIO_Initv+0xb8>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a18      	ldr	r2, [pc, #96]	; (8000b84 <_ZL12MX_GPIO_Initv+0xb8>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <_ZL12MX_GPIO_Initv+0xb8>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <_ZL12MX_GPIO_Initv+0xb8>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a11      	ldr	r2, [pc, #68]	; (8000b84 <_ZL12MX_GPIO_Initv+0xb8>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <_ZL12MX_GPIO_Initv+0xb8>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b58:	480b      	ldr	r0, [pc, #44]	; (8000b88 <_ZL12MX_GPIO_Initv+0xbc>)
 8000b5a:	f000 fdbb 	bl	80016d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4804      	ldr	r0, [pc, #16]	; (8000b88 <_ZL12MX_GPIO_Initv+0xbc>)
 8000b78:	f000 fc28 	bl	80013cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020800 	.word	0x40020800

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <Error_Handler+0x8>
	...

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	; (8000be4 <HAL_MspInit+0x4c>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bac:	6453      	str	r3, [r2, #68]	; 0x44
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800

08000be8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a2a      	ldr	r2, [pc, #168]	; (8000cb0 <HAL_I2C_MspInit+0xc8>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d14d      	bne.n	8000ca6 <HAL_I2C_MspInit+0xbe>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <HAL_I2C_MspInit+0xcc>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a28      	ldr	r2, [pc, #160]	; (8000cb4 <HAL_I2C_MspInit+0xcc>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <HAL_I2C_MspInit+0xcc>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c2c:	2312      	movs	r3, #18
 8000c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	481d      	ldr	r0, [pc, #116]	; (8000cb8 <HAL_I2C_MspInit+0xd0>)
 8000c44:	f000 fbc2 	bl	80013cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c4e:	2312      	movs	r3, #18
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000c5a:	2309      	movs	r3, #9
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4814      	ldr	r0, [pc, #80]	; (8000cb8 <HAL_I2C_MspInit+0xd0>)
 8000c66:	f000 fbb1 	bl	80013cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_I2C_MspInit+0xcc>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <HAL_I2C_MspInit+0xcc>)
 8000c74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_I2C_MspInit+0xcc>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2021      	movs	r0, #33	; 0x21
 8000c8c:	f000 fac7 	bl	800121e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000c90:	2021      	movs	r0, #33	; 0x21
 8000c92:	f000 fae0 	bl	8001256 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2022      	movs	r0, #34	; 0x22
 8000c9c:	f000 fabf 	bl	800121e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000ca0:	2022      	movs	r0, #34	; 0x22
 8000ca2:	f000 fad8 	bl	8001256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	; 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40005800 	.word	0x40005800
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020400 	.word	0x40020400

08000cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a15      	ldr	r2, [pc, #84]	; (8000d20 <HAL_TIM_Base_MspInit+0x64>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d10e      	bne.n	8000cec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <HAL_TIM_Base_MspInit+0x68>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a13      	ldr	r2, [pc, #76]	; (8000d24 <HAL_TIM_Base_MspInit+0x68>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_TIM_Base_MspInit+0x68>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cea:	e012      	b.n	8000d12 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf4:	d10d      	bne.n	8000d12 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_TIM_Base_MspInit+0x68>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <HAL_TIM_Base_MspInit+0x68>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6413      	str	r3, [r2, #64]	; 0x40
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <HAL_TIM_Base_MspInit+0x68>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40010000 	.word	0x40010000
 8000d24:	40023800 	.word	0x40023800

08000d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a1d      	ldr	r2, [pc, #116]	; (8000dbc <HAL_UART_MspInit+0x94>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d134      	bne.n	8000db4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <HAL_UART_MspInit+0x98>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a1b      	ldr	r2, [pc, #108]	; (8000dc0 <HAL_UART_MspInit+0x98>)
 8000d54:	f043 0310 	orr.w	r3, r3, #16
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_UART_MspInit+0x98>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_UART_MspInit+0x98>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <HAL_UART_MspInit+0x98>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_UART_MspInit+0x98>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d94:	2307      	movs	r3, #7
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <HAL_UART_MspInit+0x9c>)
 8000da0:	f000 fb14 	bl	80013cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	2025      	movs	r0, #37	; 0x25
 8000daa:	f000 fa38 	bl	800121e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dae:	2025      	movs	r0, #37	; 0x25
 8000db0:	f000 fa51 	bl	8001256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40011000 	.word	0x40011000
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <MemManage_Handler+0x4>

08000dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e14:	f000 f8e4 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <I2C2_EV_IRQHandler+0x10>)
 8000e22:	f000 ff6d 	bl	8001d00 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000008c 	.word	0x2000008c

08000e30 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <I2C2_ER_IRQHandler+0x10>)
 8000e36:	f001 f8d4 	bl	8001fe2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000008c 	.word	0x2000008c

08000e44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <USART1_IRQHandler+0x10>)
 8000e4a:	f003 fee7 	bl	8004c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000170 	.word	0x20000170

08000e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <_sbrk+0x5c>)
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <_sbrk+0x60>)
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <_sbrk+0x64>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <_sbrk+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d207      	bcs.n	8000e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e88:	f004 fdfc 	bl	8005a84 <__errno>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	220c      	movs	r2, #12
 8000e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	e009      	b.n	8000eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <_sbrk+0x64>)
 8000ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20020000 	.word	0x20020000
 8000eb8:	00000400 	.word	0x00000400
 8000ebc:	2000024c 	.word	0x2000024c
 8000ec0:	20000268 	.word	0x20000268

08000ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <SystemInit+0x20>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <SystemInit+0x20>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eee:	490e      	ldr	r1, [pc, #56]	; (8000f28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ef0:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef4:	e002      	b.n	8000efc <LoopCopyDataInit>

08000ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efa:	3304      	adds	r3, #4

08000efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f00:	d3f9      	bcc.n	8000ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f02:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f04:	4c0b      	ldr	r4, [pc, #44]	; (8000f34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f08:	e001      	b.n	8000f0e <LoopFillZerobss>

08000f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f0c:	3204      	adds	r2, #4

08000f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f10:	d3fb      	bcc.n	8000f0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f12:	f7ff ffd7 	bl	8000ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f16:	f004 fdbb 	bl	8005a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1a:	f7ff fbe5 	bl	80006e8 <main>
  bx  lr    
 8000f1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f2c:	08006460 	.word	0x08006460
  ldr r2, =_sbss
 8000f30:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f34:	20000264 	.word	0x20000264

08000f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC_IRQHandler>
	...

08000f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <HAL_Init+0x40>)
 8000f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <HAL_Init+0x40>)
 8000f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <HAL_Init+0x40>)
 8000f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f64:	2003      	movs	r0, #3
 8000f66:	f000 f94f 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6a:	200f      	movs	r0, #15
 8000f6c:	f000 f808 	bl	8000f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f70:	f7ff fe12 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023c00 	.word	0x40023c00

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x54>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0x58>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f967 	bl	8001272 <HAL_SYSTICK_Config>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00e      	b.n	8000fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b0f      	cmp	r3, #15
 8000fb2:	d80a      	bhi.n	8000fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f000 f92f 	bl	800121e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <HAL_InitTick+0x5c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e000      	b.n	8000fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000004 	.word	0x20000004

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x20>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_IncTick+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000008 	.word	0x20000008
 8001004:	20000250 	.word	0x20000250

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_GetTick+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000250 	.word	0x20000250

08001020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff ffee 	bl	8001008 <HAL_GetTick>
 800102c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	d005      	beq.n	8001046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_Delay+0x44>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001046:	bf00      	nop
 8001048:	f7ff ffde 	bl	8001008 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8f7      	bhi.n	8001048 <HAL_Delay+0x28>
  {
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008

08001068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109a:	4a04      	ldr	r2, [pc, #16]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60d3      	str	r3, [r2, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db0b      	blt.n	80010f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 021f 	and.w	r2, r3, #31
 80010e4:	4907      	ldr	r1, [pc, #28]	; (8001104 <__NVIC_EnableIRQ+0x38>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	2001      	movs	r0, #1
 80010ee:	fa00 f202 	lsl.w	r2, r0, r2
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff ff8e 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff29 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff3e 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff8e 	bl	800115c <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff31 	bl	80010cc <__NVIC_EnableIRQ>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffa2 	bl	80011c4 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b084      	sub	sp, #16
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff feb6 	bl	8001008 <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d008      	beq.n	80012bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e052      	b.n	8001362 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0216 	bic.w	r2, r2, #22
 80012ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	695a      	ldr	r2, [r3, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d103      	bne.n	80012ec <HAL_DMA_Abort+0x62>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d007      	beq.n	80012fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0208 	bic.w	r2, r2, #8
 80012fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0201 	bic.w	r2, r2, #1
 800130a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800130c:	e013      	b.n	8001336 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800130e:	f7ff fe7b 	bl	8001008 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b05      	cmp	r3, #5
 800131a:	d90c      	bls.n	8001336 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2220      	movs	r2, #32
 8001320:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2203      	movs	r2, #3
 8001326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e015      	b.n	8001362 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1e4      	bne.n	800130e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001348:	223f      	movs	r2, #63	; 0x3f
 800134a:	409a      	lsls	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d004      	beq.n	8001388 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2280      	movs	r2, #128	; 0x80
 8001382:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e00c      	b.n	80013a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2205      	movs	r2, #5
 800138c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0201 	bic.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013bc:	b2db      	uxtb	r3, r3
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	e159      	b.n	800169c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013e8:	2201      	movs	r2, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	429a      	cmp	r2, r3
 8001402:	f040 8148 	bne.w	8001696 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d005      	beq.n	800141e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141a:	2b02      	cmp	r3, #2
 800141c:	d130      	bne.n	8001480 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2203      	movs	r2, #3
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001454:	2201      	movs	r2, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	f003 0201 	and.w	r2, r3, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b03      	cmp	r3, #3
 800148a:	d017      	beq.n	80014bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d123      	bne.n	8001510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	08da      	lsrs	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3208      	adds	r2, #8
 80014d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	220f      	movs	r2, #15
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	691a      	ldr	r2, [r3, #16]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	08da      	lsrs	r2, r3, #3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3208      	adds	r2, #8
 800150a:	69b9      	ldr	r1, [r7, #24]
 800150c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0203 	and.w	r2, r3, #3
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80a2 	beq.w	8001696 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b57      	ldr	r3, [pc, #348]	; (80016b4 <HAL_GPIO_Init+0x2e8>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a56      	ldr	r2, [pc, #344]	; (80016b4 <HAL_GPIO_Init+0x2e8>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b54      	ldr	r3, [pc, #336]	; (80016b4 <HAL_GPIO_Init+0x2e8>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800156e:	4a52      	ldr	r2, [pc, #328]	; (80016b8 <HAL_GPIO_Init+0x2ec>)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3302      	adds	r3, #2
 8001576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	220f      	movs	r2, #15
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a49      	ldr	r2, [pc, #292]	; (80016bc <HAL_GPIO_Init+0x2f0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d019      	beq.n	80015ce <HAL_GPIO_Init+0x202>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a48      	ldr	r2, [pc, #288]	; (80016c0 <HAL_GPIO_Init+0x2f4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d013      	beq.n	80015ca <HAL_GPIO_Init+0x1fe>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a47      	ldr	r2, [pc, #284]	; (80016c4 <HAL_GPIO_Init+0x2f8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d00d      	beq.n	80015c6 <HAL_GPIO_Init+0x1fa>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a46      	ldr	r2, [pc, #280]	; (80016c8 <HAL_GPIO_Init+0x2fc>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d007      	beq.n	80015c2 <HAL_GPIO_Init+0x1f6>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a45      	ldr	r2, [pc, #276]	; (80016cc <HAL_GPIO_Init+0x300>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d101      	bne.n	80015be <HAL_GPIO_Init+0x1f2>
 80015ba:	2304      	movs	r3, #4
 80015bc:	e008      	b.n	80015d0 <HAL_GPIO_Init+0x204>
 80015be:	2307      	movs	r3, #7
 80015c0:	e006      	b.n	80015d0 <HAL_GPIO_Init+0x204>
 80015c2:	2303      	movs	r3, #3
 80015c4:	e004      	b.n	80015d0 <HAL_GPIO_Init+0x204>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e002      	b.n	80015d0 <HAL_GPIO_Init+0x204>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <HAL_GPIO_Init+0x204>
 80015ce:	2300      	movs	r3, #0
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	f002 0203 	and.w	r2, r2, #3
 80015d6:	0092      	lsls	r2, r2, #2
 80015d8:	4093      	lsls	r3, r2
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015e0:	4935      	ldr	r1, [pc, #212]	; (80016b8 <HAL_GPIO_Init+0x2ec>)
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	089b      	lsrs	r3, r3, #2
 80015e6:	3302      	adds	r3, #2
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_GPIO_Init+0x304>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001612:	4a2f      	ldr	r2, [pc, #188]	; (80016d0 <HAL_GPIO_Init+0x304>)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_GPIO_Init+0x304>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800163c:	4a24      	ldr	r2, [pc, #144]	; (80016d0 <HAL_GPIO_Init+0x304>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001642:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <HAL_GPIO_Init+0x304>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001666:	4a1a      	ldr	r2, [pc, #104]	; (80016d0 <HAL_GPIO_Init+0x304>)
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_GPIO_Init+0x304>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001690:	4a0f      	ldr	r2, [pc, #60]	; (80016d0 <HAL_GPIO_Init+0x304>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3301      	adds	r3, #1
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	2b0f      	cmp	r3, #15
 80016a0:	f67f aea2 	bls.w	80013e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3724      	adds	r7, #36	; 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40013800 	.word	0x40013800
 80016bc:	40020000 	.word	0x40020000
 80016c0:	40020400 	.word	0x40020400
 80016c4:	40020800 	.word	0x40020800
 80016c8:	40020c00 	.word	0x40020c00
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40013c00 	.word	0x40013c00

080016d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
 80016e0:	4613      	mov	r3, r2
 80016e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e4:	787b      	ldrb	r3, [r7, #1]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ea:	887a      	ldrh	r2, [r7, #2]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f0:	e003      	b.n	80016fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016f2:	887b      	ldrh	r3, [r7, #2]
 80016f4:	041a      	lsls	r2, r3, #16
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e12b      	b.n	8001972 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d106      	bne.n	8001734 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fa5a 	bl	8000be8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2224      	movs	r2, #36	; 0x24
 8001738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0201 	bic.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800175a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800176a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800176c:	f002 fddc 	bl	8004328 <HAL_RCC_GetPCLK1Freq>
 8001770:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4a81      	ldr	r2, [pc, #516]	; (800197c <HAL_I2C_Init+0x274>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d807      	bhi.n	800178c <HAL_I2C_Init+0x84>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4a80      	ldr	r2, [pc, #512]	; (8001980 <HAL_I2C_Init+0x278>)
 8001780:	4293      	cmp	r3, r2
 8001782:	bf94      	ite	ls
 8001784:	2301      	movls	r3, #1
 8001786:	2300      	movhi	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	e006      	b.n	800179a <HAL_I2C_Init+0x92>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4a7d      	ldr	r2, [pc, #500]	; (8001984 <HAL_I2C_Init+0x27c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	bf94      	ite	ls
 8001794:	2301      	movls	r3, #1
 8001796:	2300      	movhi	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e0e7      	b.n	8001972 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4a78      	ldr	r2, [pc, #480]	; (8001988 <HAL_I2C_Init+0x280>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	0c9b      	lsrs	r3, r3, #18
 80017ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	430a      	orrs	r2, r1
 80017c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	4a6a      	ldr	r2, [pc, #424]	; (800197c <HAL_I2C_Init+0x274>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d802      	bhi.n	80017dc <HAL_I2C_Init+0xd4>
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	3301      	adds	r3, #1
 80017da:	e009      	b.n	80017f0 <HAL_I2C_Init+0xe8>
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017e2:	fb02 f303 	mul.w	r3, r2, r3
 80017e6:	4a69      	ldr	r2, [pc, #420]	; (800198c <HAL_I2C_Init+0x284>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	099b      	lsrs	r3, r3, #6
 80017ee:	3301      	adds	r3, #1
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	430b      	orrs	r3, r1
 80017f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001802:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	495c      	ldr	r1, [pc, #368]	; (800197c <HAL_I2C_Init+0x274>)
 800180c:	428b      	cmp	r3, r1
 800180e:	d819      	bhi.n	8001844 <HAL_I2C_Init+0x13c>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	1e59      	subs	r1, r3, #1
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fbb1 f3f3 	udiv	r3, r1, r3
 800181e:	1c59      	adds	r1, r3, #1
 8001820:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001824:	400b      	ands	r3, r1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00a      	beq.n	8001840 <HAL_I2C_Init+0x138>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1e59      	subs	r1, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fbb1 f3f3 	udiv	r3, r1, r3
 8001838:	3301      	adds	r3, #1
 800183a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800183e:	e051      	b.n	80018e4 <HAL_I2C_Init+0x1dc>
 8001840:	2304      	movs	r3, #4
 8001842:	e04f      	b.n	80018e4 <HAL_I2C_Init+0x1dc>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d111      	bne.n	8001870 <HAL_I2C_Init+0x168>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	1e58      	subs	r0, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6859      	ldr	r1, [r3, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	440b      	add	r3, r1
 800185a:	fbb0 f3f3 	udiv	r3, r0, r3
 800185e:	3301      	adds	r3, #1
 8001860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf0c      	ite	eq
 8001868:	2301      	moveq	r3, #1
 800186a:	2300      	movne	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	e012      	b.n	8001896 <HAL_I2C_Init+0x18e>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1e58      	subs	r0, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6859      	ldr	r1, [r3, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	0099      	lsls	r1, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	fbb0 f3f3 	udiv	r3, r0, r3
 8001886:	3301      	adds	r3, #1
 8001888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf0c      	ite	eq
 8001890:	2301      	moveq	r3, #1
 8001892:	2300      	movne	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_I2C_Init+0x196>
 800189a:	2301      	movs	r3, #1
 800189c:	e022      	b.n	80018e4 <HAL_I2C_Init+0x1dc>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10e      	bne.n	80018c4 <HAL_I2C_Init+0x1bc>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1e58      	subs	r0, r3, #1
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6859      	ldr	r1, [r3, #4]
 80018ae:	460b      	mov	r3, r1
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	440b      	add	r3, r1
 80018b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b8:	3301      	adds	r3, #1
 80018ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018c2:	e00f      	b.n	80018e4 <HAL_I2C_Init+0x1dc>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	1e58      	subs	r0, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6859      	ldr	r1, [r3, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	0099      	lsls	r1, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018da:	3301      	adds	r3, #1
 80018dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	6809      	ldr	r1, [r1, #0]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69da      	ldr	r2, [r3, #28]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001912:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6911      	ldr	r1, [r2, #16]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68d2      	ldr	r2, [r2, #12]
 800191e:	4311      	orrs	r1, r2
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	430b      	orrs	r3, r1
 8001926:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695a      	ldr	r2, [r3, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0201 	orr.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2220      	movs	r2, #32
 800195e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	000186a0 	.word	0x000186a0
 8001980:	001e847f 	.word	0x001e847f
 8001984:	003d08ff 	.word	0x003d08ff
 8001988:	431bde83 	.word	0x431bde83
 800198c:	10624dd3 	.word	0x10624dd3

08001990 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af02      	add	r7, sp, #8
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	4608      	mov	r0, r1
 800199a:	4611      	mov	r1, r2
 800199c:	461a      	mov	r2, r3
 800199e:	4603      	mov	r3, r0
 80019a0:	817b      	strh	r3, [r7, #10]
 80019a2:	460b      	mov	r3, r1
 80019a4:	813b      	strh	r3, [r7, #8]
 80019a6:	4613      	mov	r3, r2
 80019a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019aa:	f7ff fb2d 	bl	8001008 <HAL_GetTick>
 80019ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b20      	cmp	r3, #32
 80019ba:	f040 80d9 	bne.w	8001b70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2319      	movs	r3, #25
 80019c4:	2201      	movs	r2, #1
 80019c6:	496d      	ldr	r1, [pc, #436]	; (8001b7c <HAL_I2C_Mem_Write+0x1ec>)
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f001 fea9 	bl	8003720 <I2C_WaitOnFlagUntilTimeout>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80019d4:	2302      	movs	r3, #2
 80019d6:	e0cc      	b.n	8001b72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_I2C_Mem_Write+0x56>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e0c5      	b.n	8001b72 <HAL_I2C_Mem_Write+0x1e2>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d007      	beq.n	8001a0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2221      	movs	r2, #33	; 0x21
 8001a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2240      	movs	r2, #64	; 0x40
 8001a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a3a      	ldr	r2, [r7, #32]
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4a4d      	ldr	r2, [pc, #308]	; (8001b80 <HAL_I2C_Mem_Write+0x1f0>)
 8001a4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a4e:	88f8      	ldrh	r0, [r7, #6]
 8001a50:	893a      	ldrh	r2, [r7, #8]
 8001a52:	8979      	ldrh	r1, [r7, #10]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f001 fd20 	bl	80034a4 <I2C_RequestMemoryWrite>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d052      	beq.n	8001b10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e081      	b.n	8001b72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f001 ff2a 	bl	80038cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00d      	beq.n	8001a9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d107      	bne.n	8001a96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e06b      	b.n	8001b72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	781a      	ldrb	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d11b      	bne.n	8001b10 <HAL_I2C_Mem_Write+0x180>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d017      	beq.n	8001b10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	781a      	ldrb	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1aa      	bne.n	8001a6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f001 ff16 	bl	800394e <I2C_WaitOnBTFFlagUntilTimeout>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00d      	beq.n	8001b44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d107      	bne.n	8001b40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e016      	b.n	8001b72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2220      	movs	r2, #32
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	e000      	b.n	8001b72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001b70:	2302      	movs	r3, #2
  }
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	00100002 	.word	0x00100002
 8001b80:	ffff0000 	.word	0xffff0000

08001b84 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	4608      	mov	r0, r1
 8001b8e:	4611      	mov	r1, r2
 8001b90:	461a      	mov	r2, r3
 8001b92:	4603      	mov	r3, r0
 8001b94:	817b      	strh	r3, [r7, #10]
 8001b96:	460b      	mov	r3, r1
 8001b98:	813b      	strh	r3, [r7, #8]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b20      	cmp	r3, #32
 8001bac:	f040 809a 	bne.w	8001ce4 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001bb0:	4b50      	ldr	r3, [pc, #320]	; (8001cf4 <HAL_I2C_Mem_Read_IT+0x170>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	08db      	lsrs	r3, r3, #3
 8001bb6:	4a50      	ldr	r2, [pc, #320]	; (8001cf8 <HAL_I2C_Mem_Read_IT+0x174>)
 8001bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbc:	0a1a      	lsrs	r2, r3, #8
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	009a      	lsls	r2, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d116      	bne.n	8001c04 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2220      	movs	r2, #32
 8001be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	f043 0220 	orr.w	r2, r3, #32
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e070      	b.n	8001ce6 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d0db      	beq.n	8001bca <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <HAL_I2C_Mem_Read_IT+0x9c>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e062      	b.n	8001ce6 <HAL_I2C_Mem_Read_IT+0x162>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d007      	beq.n	8001c46 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0201 	orr.w	r2, r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c54:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2222      	movs	r2, #34	; 0x22
 8001c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2240      	movs	r2, #64	; 0x40
 8001c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a3a      	ldr	r2, [r7, #32]
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <HAL_I2C_Mem_Read_IT+0x178>)
 8001c86:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001c88:	897a      	ldrh	r2, [r7, #10]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8001c8e:	893a      	ldrh	r2, [r7, #8]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001c94:	88fa      	ldrh	r2, [r7, #6]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cae:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cbe:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d007      	beq.n	8001ce0 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001cde:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	e000      	b.n	8001ce6 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8001ce4:	2302      	movs	r3, #2
  }
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	371c      	adds	r7, #28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	14f8b589 	.word	0x14f8b589
 8001cfc:	ffff0000 	.word	0xffff0000

08001d00 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d20:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d28:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	2b10      	cmp	r3, #16
 8001d2e:	d003      	beq.n	8001d38 <HAL_I2C_EV_IRQHandler+0x38>
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	2b40      	cmp	r3, #64	; 0x40
 8001d34:	f040 80c1 	bne.w	8001eba <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10d      	bne.n	8001d6e <HAL_I2C_EV_IRQHandler+0x6e>
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001d58:	d003      	beq.n	8001d62 <HAL_I2C_EV_IRQHandler+0x62>
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001d60:	d101      	bne.n	8001d66 <HAL_I2C_EV_IRQHandler+0x66>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_I2C_EV_IRQHandler+0x68>
 8001d66:	2300      	movs	r3, #0
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	f000 8132 	beq.w	8001fd2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00c      	beq.n	8001d92 <HAL_I2C_EV_IRQHandler+0x92>
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	0a5b      	lsrs	r3, r3, #9
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d006      	beq.n	8001d92 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f001 fe84 	bl	8003a92 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fd6f 	bl	800286e <I2C_Master_SB>
 8001d90:	e092      	b.n	8001eb8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	08db      	lsrs	r3, r3, #3
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d009      	beq.n	8001db2 <HAL_I2C_EV_IRQHandler+0xb2>
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	0a5b      	lsrs	r3, r3, #9
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fde5 	bl	800297a <I2C_Master_ADD10>
 8001db0:	e082      	b.n	8001eb8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	085b      	lsrs	r3, r3, #1
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d009      	beq.n	8001dd2 <HAL_I2C_EV_IRQHandler+0xd2>
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	0a5b      	lsrs	r3, r3, #9
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 fdff 	bl	80029ce <I2C_Master_ADDR>
 8001dd0:	e072      	b.n	8001eb8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d03b      	beq.n	8001e56 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dec:	f000 80f3 	beq.w	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	09db      	lsrs	r3, r3, #7
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00f      	beq.n	8001e1c <HAL_I2C_EV_IRQHandler+0x11c>
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	0a9b      	lsrs	r3, r3, #10
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d009      	beq.n	8001e1c <HAL_I2C_EV_IRQHandler+0x11c>
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d103      	bne.n	8001e1c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f9df 	bl	80021d8 <I2C_MasterTransmit_TXE>
 8001e1a:	e04d      	b.n	8001eb8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80d6 	beq.w	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	0a5b      	lsrs	r3, r3, #9
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 80cf 	beq.w	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001e38:	7bbb      	ldrb	r3, [r7, #14]
 8001e3a:	2b21      	cmp	r3, #33	; 0x21
 8001e3c:	d103      	bne.n	8001e46 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fa66 	bl	8002310 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e44:	e0c7      	b.n	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	2b40      	cmp	r3, #64	; 0x40
 8001e4a:	f040 80c4 	bne.w	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fad4 	bl	80023fc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e54:	e0bf      	b.n	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e64:	f000 80b7 	beq.w	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	099b      	lsrs	r3, r3, #6
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00f      	beq.n	8001e94 <HAL_I2C_EV_IRQHandler+0x194>
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	0a9b      	lsrs	r3, r3, #10
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d009      	beq.n	8001e94 <HAL_I2C_EV_IRQHandler+0x194>
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d103      	bne.n	8001e94 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 fb49 	bl	8002524 <I2C_MasterReceive_RXNE>
 8001e92:	e011      	b.n	8001eb8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 809a 	beq.w	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	0a5b      	lsrs	r3, r3, #9
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8093 	beq.w	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fbf2 	bl	800269a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eb6:	e08e      	b.n	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001eb8:	e08d      	b.n	8001fd6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d004      	beq.n	8001ecc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	e007      	b.n	8001edc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	085b      	lsrs	r3, r3, #1
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d012      	beq.n	8001f0e <HAL_I2C_EV_IRQHandler+0x20e>
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	0a5b      	lsrs	r3, r3, #9
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00c      	beq.n	8001f0e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001f04:	69b9      	ldr	r1, [r7, #24]
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 ffb0 	bl	8002e6c <I2C_Slave_ADDR>
 8001f0c:	e066      	b.n	8001fdc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d009      	beq.n	8001f2e <HAL_I2C_EV_IRQHandler+0x22e>
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	0a5b      	lsrs	r3, r3, #9
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 ffea 	bl	8002f00 <I2C_Slave_STOPF>
 8001f2c:	e056      	b.n	8001fdc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001f2e:	7bbb      	ldrb	r3, [r7, #14]
 8001f30:	2b21      	cmp	r3, #33	; 0x21
 8001f32:	d002      	beq.n	8001f3a <HAL_I2C_EV_IRQHandler+0x23a>
 8001f34:	7bbb      	ldrb	r3, [r7, #14]
 8001f36:	2b29      	cmp	r3, #41	; 0x29
 8001f38:	d125      	bne.n	8001f86 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	09db      	lsrs	r3, r3, #7
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00f      	beq.n	8001f66 <HAL_I2C_EV_IRQHandler+0x266>
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	0a9b      	lsrs	r3, r3, #10
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <HAL_I2C_EV_IRQHandler+0x266>
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d103      	bne.n	8001f66 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fec6 	bl	8002cf0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f64:	e039      	b.n	8001fda <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	089b      	lsrs	r3, r3, #2
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d033      	beq.n	8001fda <HAL_I2C_EV_IRQHandler+0x2da>
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	0a5b      	lsrs	r3, r3, #9
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d02d      	beq.n	8001fda <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 fef3 	bl	8002d6a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f84:	e029      	b.n	8001fda <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	099b      	lsrs	r3, r3, #6
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00f      	beq.n	8001fb2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	0a9b      	lsrs	r3, r3, #10
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d103      	bne.n	8001fb2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 fefe 	bl	8002dac <I2C_SlaveReceive_RXNE>
 8001fb0:	e014      	b.n	8001fdc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00e      	beq.n	8001fdc <HAL_I2C_EV_IRQHandler+0x2dc>
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	0a5b      	lsrs	r3, r3, #9
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d008      	beq.n	8001fdc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 ff2c 	bl	8002e28 <I2C_SlaveReceive_BTF>
 8001fd0:	e004      	b.n	8001fdc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001fd2:	bf00      	nop
 8001fd4:	e002      	b.n	8001fdc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fd6:	bf00      	nop
 8001fd8:	e000      	b.n	8001fdc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fda:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001fdc:	3720      	adds	r7, #32
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b08a      	sub	sp, #40	; 0x28
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002004:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00e      	beq.n	8002030 <HAL_I2C_ER_IRQHandler+0x4e>
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800202e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	0a5b      	lsrs	r3, r3, #9
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00e      	beq.n	800205a <HAL_I2C_ER_IRQHandler+0x78>
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	f043 0302 	orr.w	r3, r3, #2
 800204e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002058:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	0a9b      	lsrs	r3, r3, #10
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d03f      	beq.n	80020e6 <HAL_I2C_ER_IRQHandler+0x104>
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d039      	beq.n	80020e6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002072:	7efb      	ldrb	r3, [r7, #27]
 8002074:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207a:	b29b      	uxth	r3, r3
 800207c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002084:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800208c:	7ebb      	ldrb	r3, [r7, #26]
 800208e:	2b20      	cmp	r3, #32
 8002090:	d112      	bne.n	80020b8 <HAL_I2C_ER_IRQHandler+0xd6>
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10f      	bne.n	80020b8 <HAL_I2C_ER_IRQHandler+0xd6>
 8002098:	7cfb      	ldrb	r3, [r7, #19]
 800209a:	2b21      	cmp	r3, #33	; 0x21
 800209c:	d008      	beq.n	80020b0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800209e:	7cfb      	ldrb	r3, [r7, #19]
 80020a0:	2b29      	cmp	r3, #41	; 0x29
 80020a2:	d005      	beq.n	80020b0 <HAL_I2C_ER_IRQHandler+0xce>
 80020a4:	7cfb      	ldrb	r3, [r7, #19]
 80020a6:	2b28      	cmp	r3, #40	; 0x28
 80020a8:	d106      	bne.n	80020b8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b21      	cmp	r3, #33	; 0x21
 80020ae:	d103      	bne.n	80020b8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f001 f855 	bl	8003160 <I2C_Slave_AF>
 80020b6:	e016      	b.n	80020e6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020c0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80020ca:	7efb      	ldrb	r3, [r7, #27]
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d002      	beq.n	80020d6 <HAL_I2C_ER_IRQHandler+0xf4>
 80020d0:	7efb      	ldrb	r3, [r7, #27]
 80020d2:	2b40      	cmp	r3, #64	; 0x40
 80020d4:	d107      	bne.n	80020e6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	0adb      	lsrs	r3, r3, #11
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00e      	beq.n	8002110 <HAL_I2C_ER_IRQHandler+0x12e>
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d008      	beq.n	8002110 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	f043 0308 	orr.w	r3, r3, #8
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800210e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	2b00      	cmp	r3, #0
 8002114:	d008      	beq.n	8002128 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f001 f88c 	bl	8003240 <I2C_ITError>
  }
}
 8002128:	bf00      	nop
 800212a:	3728      	adds	r7, #40	; 0x28
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	70fb      	strb	r3, [r7, #3]
 800218c:	4613      	mov	r3, r2
 800218e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d150      	bne.n	80022a0 <I2C_MasterTransmit_TXE+0xc8>
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	2b21      	cmp	r3, #33	; 0x21
 8002202:	d14d      	bne.n	80022a0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b08      	cmp	r3, #8
 8002208:	d01d      	beq.n	8002246 <I2C_MasterTransmit_TXE+0x6e>
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b20      	cmp	r3, #32
 800220e:	d01a      	beq.n	8002246 <I2C_MasterTransmit_TXE+0x6e>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002216:	d016      	beq.n	8002246 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002226:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2211      	movs	r2, #17
 800222c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ff76 	bl	8002130 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002244:	e060      	b.n	8002308 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002254:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002264:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b40      	cmp	r3, #64	; 0x40
 800227e:	d107      	bne.n	8002290 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7fe fa17 	bl	80006bc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800228e:	e03b      	b.n	8002308 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ff49 	bl	8002130 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800229e:	e033      	b.n	8002308 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	2b21      	cmp	r3, #33	; 0x21
 80022a4:	d005      	beq.n	80022b2 <I2C_MasterTransmit_TXE+0xda>
 80022a6:	7bbb      	ldrb	r3, [r7, #14]
 80022a8:	2b40      	cmp	r3, #64	; 0x40
 80022aa:	d12d      	bne.n	8002308 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	2b22      	cmp	r3, #34	; 0x22
 80022b0:	d12a      	bne.n	8002308 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d108      	bne.n	80022ce <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ca:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80022cc:	e01c      	b.n	8002308 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b40      	cmp	r3, #64	; 0x40
 80022d8:	d103      	bne.n	80022e2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f88e 	bl	80023fc <I2C_MemoryTransmit_TXE_BTF>
}
 80022e0:	e012      	b.n	8002308 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	781a      	ldrb	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002306:	e7ff      	b.n	8002308 <I2C_MasterTransmit_TXE+0x130>
 8002308:	bf00      	nop
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b21      	cmp	r3, #33	; 0x21
 8002328:	d164      	bne.n	80023f4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232e:	b29b      	uxth	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d012      	beq.n	800235a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002358:	e04c      	b.n	80023f4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2b08      	cmp	r3, #8
 800235e:	d01d      	beq.n	800239c <I2C_MasterTransmit_BTF+0x8c>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b20      	cmp	r3, #32
 8002364:	d01a      	beq.n	800239c <I2C_MasterTransmit_BTF+0x8c>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800236c:	d016      	beq.n	800239c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800237c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2211      	movs	r2, #17
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff fecb 	bl	8002130 <HAL_I2C_MasterTxCpltCallback>
}
 800239a:	e02b      	b.n	80023f4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023aa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ba:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2220      	movs	r2, #32
 80023c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b40      	cmp	r3, #64	; 0x40
 80023d4:	d107      	bne.n	80023e6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7fe f96c 	bl	80006bc <HAL_I2C_MemTxCpltCallback>
}
 80023e4:	e006      	b.n	80023f4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff fe9e 	bl	8002130 <HAL_I2C_MasterTxCpltCallback>
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002410:	2b00      	cmp	r3, #0
 8002412:	d11d      	bne.n	8002450 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002418:	2b01      	cmp	r3, #1
 800241a:	d10b      	bne.n	8002434 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002420:	b2da      	uxtb	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800242c:	1c9a      	adds	r2, r3, #2
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002432:	e073      	b.n	800251c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002438:	b29b      	uxth	r3, r3
 800243a:	121b      	asrs	r3, r3, #8
 800243c:	b2da      	uxtb	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800244e:	e065      	b.n	800251c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002454:	2b01      	cmp	r3, #1
 8002456:	d10b      	bne.n	8002470 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800245c:	b2da      	uxtb	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800246e:	e055      	b.n	800251c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002474:	2b02      	cmp	r3, #2
 8002476:	d151      	bne.n	800251c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	2b22      	cmp	r3, #34	; 0x22
 800247c:	d10d      	bne.n	800249a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800248c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002498:	e040      	b.n	800251c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d015      	beq.n	80024d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	2b21      	cmp	r3, #33	; 0x21
 80024a8:	d112      	bne.n	80024d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	781a      	ldrb	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024ce:	e025      	b.n	800251c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d120      	bne.n	800251c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	2b21      	cmp	r3, #33	; 0x21
 80024de:	d11d      	bne.n	800251c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024ee:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7fe f8d0 	bl	80006bc <HAL_I2C_MemTxCpltCallback>
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b22      	cmp	r3, #34	; 0x22
 8002536:	f040 80ac 	bne.w	8002692 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253e:	b29b      	uxth	r3, r3
 8002540:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2b03      	cmp	r3, #3
 8002546:	d921      	bls.n	800258c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b03      	cmp	r3, #3
 8002576:	f040 808c 	bne.w	8002692 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002588:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800258a:	e082      	b.n	8002692 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	2b02      	cmp	r3, #2
 8002592:	d075      	beq.n	8002680 <I2C_MasterReceive_RXNE+0x15c>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d002      	beq.n	80025a0 <I2C_MasterReceive_RXNE+0x7c>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d16f      	bne.n	8002680 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f001 fa15 	bl	80039d0 <I2C_WaitOnSTOPRequestThroughIT>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d142      	bne.n	8002632 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ba:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025ca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b40      	cmp	r3, #64	; 0x40
 8002604:	d10a      	bne.n	800261c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7fe f805 	bl	8000624 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800261a:	e03a      	b.n	8002692 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2212      	movs	r2, #18
 8002628:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff fd8a 	bl	8002144 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002630:	e02f      	b.n	8002692 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002640:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff fd99 	bl	80021b0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800267e:	e008      	b.n	8002692 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800268e:	605a      	str	r2, [r3, #4]
}
 8002690:	e7ff      	b.n	8002692 <I2C_MasterReceive_RXNE+0x16e>
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d11b      	bne.n	80026ea <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80026e8:	e0bd      	b.n	8002866 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d129      	bne.n	8002748 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002702:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b04      	cmp	r3, #4
 8002708:	d00a      	beq.n	8002720 <I2C_MasterReceive_BTF+0x86>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d007      	beq.n	8002720 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002746:	e08e      	b.n	8002866 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d176      	bne.n	8002840 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d002      	beq.n	800275e <I2C_MasterReceive_BTF+0xc4>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b10      	cmp	r3, #16
 800275c:	d108      	bne.n	8002770 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	e019      	b.n	80027a4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b04      	cmp	r3, #4
 8002774:	d002      	beq.n	800277c <I2C_MasterReceive_BTF+0xe2>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d108      	bne.n	800278e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	e00a      	b.n	80027a4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b10      	cmp	r3, #16
 8002792:	d007      	beq.n	80027a4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80027fe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b40      	cmp	r3, #64	; 0x40
 8002812:	d10a      	bne.n	800282a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7fd fefe 	bl	8000624 <HAL_I2C_MemRxCpltCallback>
}
 8002828:	e01d      	b.n	8002866 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2212      	movs	r2, #18
 8002836:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff fc83 	bl	8002144 <HAL_I2C_MasterRxCpltCallback>
}
 800283e:	e012      	b.n	8002866 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691a      	ldr	r2, [r3, #16]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b40      	cmp	r3, #64	; 0x40
 8002880:	d117      	bne.n	80028b2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	b2db      	uxtb	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800289a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800289c:	e067      	b.n	800296e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	611a      	str	r2, [r3, #16]
}
 80028b0:	e05d      	b.n	800296e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028ba:	d133      	bne.n	8002924 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b21      	cmp	r3, #33	; 0x21
 80028c6:	d109      	bne.n	80028dc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028d8:	611a      	str	r2, [r3, #16]
 80028da:	e008      	b.n	80028ee <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d004      	beq.n	8002900 <I2C_Master_SB+0x92>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d108      	bne.n	8002912 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002904:	2b00      	cmp	r3, #0
 8002906:	d032      	beq.n	800296e <I2C_Master_SB+0x100>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290e:	2b00      	cmp	r3, #0
 8002910:	d02d      	beq.n	800296e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002920:	605a      	str	r2, [r3, #4]
}
 8002922:	e024      	b.n	800296e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10e      	bne.n	800294a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002930:	b29b      	uxth	r3, r3
 8002932:	11db      	asrs	r3, r3, #7
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f003 0306 	and.w	r3, r3, #6
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f063 030f 	orn	r3, r3, #15
 8002940:	b2da      	uxtb	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	611a      	str	r2, [r3, #16]
}
 8002948:	e011      	b.n	800296e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294e:	2b01      	cmp	r3, #1
 8002950:	d10d      	bne.n	800296e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	b29b      	uxth	r3, r3
 8002958:	11db      	asrs	r3, r3, #7
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f003 0306 	and.w	r3, r3, #6
 8002960:	b2db      	uxtb	r3, r3
 8002962:	f063 030e 	orn	r3, r3, #14
 8002966:	b2da      	uxtb	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	611a      	str	r2, [r3, #16]
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	b2da      	uxtb	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002992:	2b00      	cmp	r3, #0
 8002994:	d004      	beq.n	80029a0 <I2C_Master_ADD10+0x26>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d108      	bne.n	80029b2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00c      	beq.n	80029c2 <I2C_Master_ADD10+0x48>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d007      	beq.n	80029c2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029c0:	605a      	str	r2, [r3, #4]
  }
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b091      	sub	sp, #68	; 0x44
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b22      	cmp	r3, #34	; 0x22
 80029f6:	f040 8169 	bne.w	8002ccc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10f      	bne.n	8002a22 <I2C_Master_ADDR+0x54>
 8002a02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a06:	2b40      	cmp	r3, #64	; 0x40
 8002a08:	d10b      	bne.n	8002a22 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	633b      	str	r3, [r7, #48]	; 0x30
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a20:	e160      	b.n	8002ce4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d11d      	bne.n	8002a66 <I2C_Master_ADDR+0x98>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a32:	d118      	bne.n	8002a66 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a34:	2300      	movs	r3, #0
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a58:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	651a      	str	r2, [r3, #80]	; 0x50
 8002a64:	e13e      	b.n	8002ce4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d113      	bne.n	8002a98 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a70:	2300      	movs	r3, #0
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a84:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	e115      	b.n	8002cc4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	f040 808a 	bne.w	8002bb8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002aaa:	d137      	bne.n	8002b1c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aba:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aca:	d113      	bne.n	8002af4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ada:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002adc:	2300      	movs	r3, #0
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	e0e7      	b.n	8002cc4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af4:	2300      	movs	r3, #0
 8002af6:	623b      	str	r3, [r7, #32]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	623b      	str	r3, [r7, #32]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	623b      	str	r3, [r7, #32]
 8002b08:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e0d3      	b.n	8002cc4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d02e      	beq.n	8002b80 <I2C_Master_ADDR+0x1b2>
 8002b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	d02b      	beq.n	8002b80 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2a:	2b12      	cmp	r3, #18
 8002b2c:	d102      	bne.n	8002b34 <I2C_Master_ADDR+0x166>
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d125      	bne.n	8002b80 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d00e      	beq.n	8002b58 <I2C_Master_ADDR+0x18a>
 8002b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d00b      	beq.n	8002b58 <I2C_Master_ADDR+0x18a>
 8002b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b42:	2b10      	cmp	r3, #16
 8002b44:	d008      	beq.n	8002b58 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	e007      	b.n	8002b68 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b66:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	61fb      	str	r3, [r7, #28]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	61fb      	str	r3, [r7, #28]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	e0a1      	b.n	8002cc4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b8e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b90:	2300      	movs	r3, #0
 8002b92:	61bb      	str	r3, [r7, #24]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	61bb      	str	r3, [r7, #24]
 8002ba4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	e085      	b.n	8002cc4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d14d      	bne.n	8002c5e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d016      	beq.n	8002bf6 <I2C_Master_ADDR+0x228>
 8002bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d013      	beq.n	8002bf6 <I2C_Master_ADDR+0x228>
 8002bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd0:	2b10      	cmp	r3, #16
 8002bd2:	d010      	beq.n	8002bf6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	e007      	b.n	8002c06 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c04:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c14:	d117      	bne.n	8002c46 <I2C_Master_ADDR+0x278>
 8002c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c1c:	d00b      	beq.n	8002c36 <I2C_Master_ADDR+0x268>
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d008      	beq.n	8002c36 <I2C_Master_ADDR+0x268>
 8002c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d005      	beq.n	8002c36 <I2C_Master_ADDR+0x268>
 8002c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2c:	2b10      	cmp	r3, #16
 8002c2e:	d002      	beq.n	8002c36 <I2C_Master_ADDR+0x268>
 8002c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	d107      	bne.n	8002c46 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c44:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	e032      	b.n	8002cc4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c6c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c7c:	d117      	bne.n	8002cae <I2C_Master_ADDR+0x2e0>
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c84:	d00b      	beq.n	8002c9e <I2C_Master_ADDR+0x2d0>
 8002c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d008      	beq.n	8002c9e <I2C_Master_ADDR+0x2d0>
 8002c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d005      	beq.n	8002c9e <I2C_Master_ADDR+0x2d0>
 8002c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c94:	2b10      	cmp	r3, #16
 8002c96:	d002      	beq.n	8002c9e <I2C_Master_ADDR+0x2d0>
 8002c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	d107      	bne.n	8002cae <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002cca:	e00b      	b.n	8002ce4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
}
 8002ce2:	e7ff      	b.n	8002ce4 <I2C_Master_ADDR+0x316>
 8002ce4:	bf00      	nop
 8002ce6:	3744      	adds	r7, #68	; 0x44
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d02b      	beq.n	8002d62 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	781a      	ldrb	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d114      	bne.n	8002d62 <I2C_SlaveTransmit_TXE+0x72>
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	2b29      	cmp	r3, #41	; 0x29
 8002d3c:	d111      	bne.n	8002d62 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d4c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2221      	movs	r2, #33	; 0x21
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2228      	movs	r2, #40	; 0x28
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff f9fb 	bl	8002158 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d011      	beq.n	8002da0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	781a      	ldrb	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d02c      	beq.n	8002e20 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d114      	bne.n	8002e20 <I2C_SlaveReceive_RXNE+0x74>
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	2b2a      	cmp	r3, #42	; 0x2a
 8002dfa:	d111      	bne.n	8002e20 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e0a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2222      	movs	r2, #34	; 0x22
 8002e10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2228      	movs	r2, #40	; 0x28
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff f9a6 	bl	800216c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d012      	beq.n	8002e60 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002e76:	2300      	movs	r3, #0
 8002e78:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e86:	2b28      	cmp	r3, #40	; 0x28
 8002e88:	d127      	bne.n	8002eda <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e98:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	089b      	lsrs	r3, r3, #2
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	09db      	lsrs	r3, r3, #7
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d103      	bne.n	8002ebe <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	81bb      	strh	r3, [r7, #12]
 8002ebc:	e002      	b.n	8002ec4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002ecc:	89ba      	ldrh	r2, [r7, #12]
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff f954 	bl	8002180 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002ed8:	e00e      	b.n	8002ef8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f1e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002f20:	2300      	movs	r3, #0
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f4c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f5c:	d172      	bne.n	8003044 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	2b22      	cmp	r3, #34	; 0x22
 8002f62:	d002      	beq.n	8002f6a <I2C_Slave_STOPF+0x6a>
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b2a      	cmp	r3, #42	; 0x2a
 8002f68:	d135      	bne.n	8002fd6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d005      	beq.n	8002f8e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f043 0204 	orr.w	r2, r3, #4
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f9c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe fa03 	bl	80013ae <HAL_DMA_GetState>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d049      	beq.n	8003042 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	4a69      	ldr	r2, [pc, #420]	; (8003158 <I2C_Slave_STOPF+0x258>)
 8002fb4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe f9d5 	bl	800136a <HAL_DMA_Abort_IT>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d03d      	beq.n	8003042 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fd4:	e035      	b.n	8003042 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f043 0204 	orr.w	r2, r3, #4
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003008:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe f9cd 	bl	80013ae <HAL_DMA_GetState>
 8003014:	4603      	mov	r3, r0
 8003016:	2b01      	cmp	r3, #1
 8003018:	d014      	beq.n	8003044 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301e:	4a4e      	ldr	r2, [pc, #312]	; (8003158 <I2C_Slave_STOPF+0x258>)
 8003020:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe f99f 	bl	800136a <HAL_DMA_Abort_IT>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d008      	beq.n	8003044 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800303c:	4610      	mov	r0, r2
 800303e:	4798      	blx	r3
 8003040:	e000      	b.n	8003044 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003042:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d03e      	beq.n	80030cc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b04      	cmp	r3, #4
 800305a:	d112      	bne.n	8003082 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308c:	2b40      	cmp	r3, #64	; 0x40
 800308e:	d112      	bne.n	80030b6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	f043 0204 	orr.w	r2, r3, #4
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f8b3 	bl	8003240 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80030da:	e039      	b.n	8003150 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	2b2a      	cmp	r3, #42	; 0x2a
 80030e0:	d109      	bne.n	80030f6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2228      	movs	r2, #40	; 0x28
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff f83b 	bl	800216c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b28      	cmp	r3, #40	; 0x28
 8003100:	d111      	bne.n	8003126 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a15      	ldr	r2, [pc, #84]	; (800315c <I2C_Slave_STOPF+0x25c>)
 8003106:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff f83c 	bl	800219c <HAL_I2C_ListenCpltCallback>
}
 8003124:	e014      	b.n	8003150 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	2b22      	cmp	r3, #34	; 0x22
 800312c:	d002      	beq.n	8003134 <I2C_Slave_STOPF+0x234>
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	2b22      	cmp	r3, #34	; 0x22
 8003132:	d10d      	bne.n	8003150 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff f80e 	bl	800216c <HAL_I2C_SlaveRxCpltCallback>
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	080035d1 	.word	0x080035d1
 800315c:	ffff0000 	.word	0xffff0000

08003160 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b08      	cmp	r3, #8
 800317a:	d002      	beq.n	8003182 <I2C_Slave_AF+0x22>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b20      	cmp	r3, #32
 8003180:	d129      	bne.n	80031d6 <I2C_Slave_AF+0x76>
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	2b28      	cmp	r3, #40	; 0x28
 8003186:	d126      	bne.n	80031d6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a2c      	ldr	r2, [pc, #176]	; (800323c <I2C_Slave_AF+0xdc>)
 800318c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800319c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031a6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fe ffe4 	bl	800219c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80031d4:	e02e      	b.n	8003234 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	2b21      	cmp	r3, #33	; 0x21
 80031da:	d126      	bne.n	800322a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a17      	ldr	r2, [pc, #92]	; (800323c <I2C_Slave_AF+0xdc>)
 80031e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2221      	movs	r2, #33	; 0x21
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003206:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003210:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003220:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fe ff98 	bl	8002158 <HAL_I2C_SlaveTxCpltCallback>
}
 8003228:	e004      	b.n	8003234 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003232:	615a      	str	r2, [r3, #20]
}
 8003234:	bf00      	nop
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	ffff0000 	.word	0xffff0000

08003240 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003256:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003258:	7bbb      	ldrb	r3, [r7, #14]
 800325a:	2b10      	cmp	r3, #16
 800325c:	d002      	beq.n	8003264 <I2C_ITError+0x24>
 800325e:	7bbb      	ldrb	r3, [r7, #14]
 8003260:	2b40      	cmp	r3, #64	; 0x40
 8003262:	d10a      	bne.n	800327a <I2C_ITError+0x3a>
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	2b22      	cmp	r3, #34	; 0x22
 8003268:	d107      	bne.n	800327a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003278:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003280:	2b28      	cmp	r3, #40	; 0x28
 8003282:	d107      	bne.n	8003294 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2228      	movs	r2, #40	; 0x28
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003292:	e015      	b.n	80032c0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800329e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032a2:	d00a      	beq.n	80032ba <I2C_ITError+0x7a>
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	2b60      	cmp	r3, #96	; 0x60
 80032a8:	d007      	beq.n	80032ba <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ce:	d162      	bne.n	8003396 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032de:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d020      	beq.n	8003330 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f2:	4a6a      	ldr	r2, [pc, #424]	; (800349c <I2C_ITError+0x25c>)
 80032f4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe f835 	bl	800136a <HAL_DMA_Abort_IT>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 8089 	beq.w	800341a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0201 	bic.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800332a:	4610      	mov	r0, r2
 800332c:	4798      	blx	r3
 800332e:	e074      	b.n	800341a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003334:	4a59      	ldr	r2, [pc, #356]	; (800349c <I2C_ITError+0x25c>)
 8003336:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	4618      	mov	r0, r3
 800333e:	f7fe f814 	bl	800136a <HAL_DMA_Abort_IT>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d068      	beq.n	800341a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003352:	2b40      	cmp	r3, #64	; 0x40
 8003354:	d10b      	bne.n	800336e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0201 	bic.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003390:	4610      	mov	r0, r2
 8003392:	4798      	blx	r3
 8003394:	e041      	b.n	800341a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b60      	cmp	r3, #96	; 0x60
 80033a0:	d125      	bne.n	80033ee <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d10b      	bne.n	80033d6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fe feec 	bl	80021c4 <HAL_I2C_AbortCpltCallback>
 80033ec:	e015      	b.n	800341a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	d10b      	bne.n	8003414 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7fe fecb 	bl	80021b0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10e      	bne.n	8003448 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003430:	2b00      	cmp	r3, #0
 8003432:	d109      	bne.n	8003448 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800343a:	2b00      	cmp	r3, #0
 800343c:	d104      	bne.n	8003448 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003444:	2b00      	cmp	r3, #0
 8003446:	d007      	beq.n	8003458 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003456:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b04      	cmp	r3, #4
 800346a:	d113      	bne.n	8003494 <I2C_ITError+0x254>
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	2b28      	cmp	r3, #40	; 0x28
 8003470:	d110      	bne.n	8003494 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a0a      	ldr	r2, [pc, #40]	; (80034a0 <I2C_ITError+0x260>)
 8003476:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fe fe84 	bl	800219c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003494:	bf00      	nop
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	080035d1 	.word	0x080035d1
 80034a0:	ffff0000 	.word	0xffff0000

080034a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	4608      	mov	r0, r1
 80034ae:	4611      	mov	r1, r2
 80034b0:	461a      	mov	r2, r3
 80034b2:	4603      	mov	r3, r0
 80034b4:	817b      	strh	r3, [r7, #10]
 80034b6:	460b      	mov	r3, r1
 80034b8:	813b      	strh	r3, [r7, #8]
 80034ba:	4613      	mov	r3, r2
 80034bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f920 	bl	8003720 <I2C_WaitOnFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00d      	beq.n	8003502 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f4:	d103      	bne.n	80034fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e05f      	b.n	80035c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003502:	897b      	ldrh	r3, [r7, #10]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003510:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	6a3a      	ldr	r2, [r7, #32]
 8003516:	492d      	ldr	r1, [pc, #180]	; (80035cc <I2C_RequestMemoryWrite+0x128>)
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f958 	bl	80037ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e04c      	b.n	80035c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800353e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003540:	6a39      	ldr	r1, [r7, #32]
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f9c2 	bl	80038cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2b04      	cmp	r3, #4
 8003554:	d107      	bne.n	8003566 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003564:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e02b      	b.n	80035c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d105      	bne.n	800357c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003570:	893b      	ldrh	r3, [r7, #8]
 8003572:	b2da      	uxtb	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	611a      	str	r2, [r3, #16]
 800357a:	e021      	b.n	80035c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800357c:	893b      	ldrh	r3, [r7, #8]
 800357e:	0a1b      	lsrs	r3, r3, #8
 8003580:	b29b      	uxth	r3, r3
 8003582:	b2da      	uxtb	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800358a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358c:	6a39      	ldr	r1, [r7, #32]
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f99c 	bl	80038cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00d      	beq.n	80035b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d107      	bne.n	80035b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e005      	b.n	80035c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035b6:	893b      	ldrh	r3, [r7, #8]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	00010002 	.word	0x00010002

080035d0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80035ea:	4b4b      	ldr	r3, [pc, #300]	; (8003718 <I2C_DMAAbort+0x148>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	08db      	lsrs	r3, r3, #3
 80035f0:	4a4a      	ldr	r2, [pc, #296]	; (800371c <I2C_DMAAbort+0x14c>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	0a1a      	lsrs	r2, r3, #8
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	00da      	lsls	r2, r3, #3
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f043 0220 	orr.w	r2, r3, #32
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003616:	e00a      	b.n	800362e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3b01      	subs	r3, #1
 800361c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800362c:	d0ea      	beq.n	8003604 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363a:	2200      	movs	r2, #0
 800363c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	2200      	movs	r2, #0
 800364c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800365c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2200      	movs	r2, #0
 8003662:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003670:	2200      	movs	r2, #0
 8003672:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	2200      	movs	r2, #0
 8003682:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0201 	bic.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b60      	cmp	r3, #96	; 0x60
 800369e:	d10e      	bne.n	80036be <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	2200      	movs	r2, #0
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80036b6:	6978      	ldr	r0, [r7, #20]
 80036b8:	f7fe fd84 	bl	80021c4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036bc:	e027      	b.n	800370e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036be:	7cfb      	ldrb	r3, [r7, #19]
 80036c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036c4:	2b28      	cmp	r3, #40	; 0x28
 80036c6:	d117      	bne.n	80036f8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2200      	movs	r2, #0
 80036ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2228      	movs	r2, #40	; 0x28
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80036f6:	e007      	b.n	8003708 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003708:	6978      	ldr	r0, [r7, #20]
 800370a:	f7fe fd51 	bl	80021b0 <HAL_I2C_ErrorCallback>
}
 800370e:	bf00      	nop
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20000000 	.word	0x20000000
 800371c:	14f8b589 	.word	0x14f8b589

08003720 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	4613      	mov	r3, r2
 800372e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003730:	e025      	b.n	800377e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003738:	d021      	beq.n	800377e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373a:	f7fd fc65 	bl	8001008 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d302      	bcc.n	8003750 <I2C_WaitOnFlagUntilTimeout+0x30>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d116      	bne.n	800377e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	f043 0220 	orr.w	r2, r3, #32
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e023      	b.n	80037c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	0c1b      	lsrs	r3, r3, #16
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b01      	cmp	r3, #1
 8003786:	d10d      	bne.n	80037a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	43da      	mvns	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4013      	ands	r3, r2
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	bf0c      	ite	eq
 800379a:	2301      	moveq	r3, #1
 800379c:	2300      	movne	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	461a      	mov	r2, r3
 80037a2:	e00c      	b.n	80037be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	43da      	mvns	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4013      	ands	r3, r2
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	bf0c      	ite	eq
 80037b6:	2301      	moveq	r3, #1
 80037b8:	2300      	movne	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d0b6      	beq.n	8003732 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	607a      	str	r2, [r7, #4]
 80037da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037dc:	e051      	b.n	8003882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ec:	d123      	bne.n	8003836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003806:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2220      	movs	r2, #32
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f043 0204 	orr.w	r2, r3, #4
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e046      	b.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383c:	d021      	beq.n	8003882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383e:	f7fd fbe3 	bl	8001008 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	429a      	cmp	r2, r3
 800384c:	d302      	bcc.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d116      	bne.n	8003882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	f043 0220 	orr.w	r2, r3, #32
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e020      	b.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	0c1b      	lsrs	r3, r3, #16
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b01      	cmp	r3, #1
 800388a:	d10c      	bne.n	80038a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	43da      	mvns	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4013      	ands	r3, r2
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	bf14      	ite	ne
 800389e:	2301      	movne	r3, #1
 80038a0:	2300      	moveq	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	e00b      	b.n	80038be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	43da      	mvns	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4013      	ands	r3, r2
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf14      	ite	ne
 80038b8:	2301      	movne	r3, #1
 80038ba:	2300      	moveq	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d18d      	bne.n	80037de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038d8:	e02d      	b.n	8003936 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 f8aa 	bl	8003a34 <I2C_IsAcknowledgeFailed>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e02d      	b.n	8003946 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f0:	d021      	beq.n	8003936 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f2:	f7fd fb89 	bl	8001008 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d302      	bcc.n	8003908 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d116      	bne.n	8003936 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f043 0220 	orr.w	r2, r3, #32
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e007      	b.n	8003946 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003940:	2b80      	cmp	r3, #128	; 0x80
 8003942:	d1ca      	bne.n	80038da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800395a:	e02d      	b.n	80039b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f869 	bl	8003a34 <I2C_IsAcknowledgeFailed>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e02d      	b.n	80039c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003972:	d021      	beq.n	80039b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003974:	f7fd fb48 	bl	8001008 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	429a      	cmp	r2, r3
 8003982:	d302      	bcc.n	800398a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d116      	bne.n	80039b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	f043 0220 	orr.w	r2, r3, #32
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e007      	b.n	80039c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d1ca      	bne.n	800395c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80039dc:	4b13      	ldr	r3, [pc, #76]	; (8003a2c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	08db      	lsrs	r3, r3, #3
 80039e2:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80039e4:	fba2 2303 	umull	r2, r3, r2, r3
 80039e8:	0a1a      	lsrs	r2, r3, #8
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	3b01      	subs	r3, #1
 80039f6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d107      	bne.n	8003a0e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f043 0220 	orr.w	r2, r3, #32
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e008      	b.n	8003a20 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a1c:	d0e9      	beq.n	80039f2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	20000000 	.word	0x20000000
 8003a30:	14f8b589 	.word	0x14f8b589

08003a34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4a:	d11b      	bne.n	8003a84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	f043 0204 	orr.w	r2, r3, #4
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003aa2:	d103      	bne.n	8003aac <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003aaa:	e007      	b.n	8003abc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003ab4:	d102      	bne.n	8003abc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2208      	movs	r2, #8
 8003aba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e267      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d075      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ae6:	4b88      	ldr	r3, [pc, #544]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 030c 	and.w	r3, r3, #12
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d00c      	beq.n	8003b0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003af2:	4b85      	ldr	r3, [pc, #532]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d112      	bne.n	8003b24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003afe:	4b82      	ldr	r3, [pc, #520]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b0a:	d10b      	bne.n	8003b24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0c:	4b7e      	ldr	r3, [pc, #504]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d05b      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x108>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d157      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e242      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b2c:	d106      	bne.n	8003b3c <HAL_RCC_OscConfig+0x74>
 8003b2e:	4b76      	ldr	r3, [pc, #472]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a75      	ldr	r2, [pc, #468]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e01d      	b.n	8003b78 <HAL_RCC_OscConfig+0xb0>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b44:	d10c      	bne.n	8003b60 <HAL_RCC_OscConfig+0x98>
 8003b46:	4b70      	ldr	r3, [pc, #448]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a6f      	ldr	r2, [pc, #444]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	4b6d      	ldr	r3, [pc, #436]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a6c      	ldr	r2, [pc, #432]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	e00b      	b.n	8003b78 <HAL_RCC_OscConfig+0xb0>
 8003b60:	4b69      	ldr	r3, [pc, #420]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a68      	ldr	r2, [pc, #416]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	4b66      	ldr	r3, [pc, #408]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a65      	ldr	r2, [pc, #404]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d013      	beq.n	8003ba8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7fd fa42 	bl	8001008 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b88:	f7fd fa3e 	bl	8001008 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	; 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e207      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9a:	4b5b      	ldr	r3, [pc, #364]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0xc0>
 8003ba6:	e014      	b.n	8003bd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fd fa2e 	bl	8001008 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bb0:	f7fd fa2a 	bl	8001008 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b64      	cmp	r3, #100	; 0x64
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e1f3      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc2:	4b51      	ldr	r3, [pc, #324]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_RCC_OscConfig+0xe8>
 8003bce:	e000      	b.n	8003bd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d063      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bde:	4b4a      	ldr	r3, [pc, #296]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bea:	4b47      	ldr	r3, [pc, #284]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d11c      	bne.n	8003c30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bf6:	4b44      	ldr	r3, [pc, #272]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d116      	bne.n	8003c30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c02:	4b41      	ldr	r3, [pc, #260]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_RCC_OscConfig+0x152>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d001      	beq.n	8003c1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e1c7      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1a:	4b3b      	ldr	r3, [pc, #236]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4937      	ldr	r1, [pc, #220]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2e:	e03a      	b.n	8003ca6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d020      	beq.n	8003c7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c38:	4b34      	ldr	r3, [pc, #208]	; (8003d0c <HAL_RCC_OscConfig+0x244>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3e:	f7fd f9e3 	bl	8001008 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c46:	f7fd f9df 	bl	8001008 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e1a8      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c58:	4b2b      	ldr	r3, [pc, #172]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0f0      	beq.n	8003c46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c64:	4b28      	ldr	r3, [pc, #160]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4925      	ldr	r1, [pc, #148]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	600b      	str	r3, [r1, #0]
 8003c78:	e015      	b.n	8003ca6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c7a:	4b24      	ldr	r3, [pc, #144]	; (8003d0c <HAL_RCC_OscConfig+0x244>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7fd f9c2 	bl	8001008 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c88:	f7fd f9be 	bl	8001008 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e187      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9a:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d036      	beq.n	8003d20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d016      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cba:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <HAL_RCC_OscConfig+0x248>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc0:	f7fd f9a2 	bl	8001008 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cc8:	f7fd f99e 	bl	8001008 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e167      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cda:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x200>
 8003ce6:	e01b      	b.n	8003d20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce8:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <HAL_RCC_OscConfig+0x248>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cee:	f7fd f98b 	bl	8001008 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf4:	e00e      	b.n	8003d14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cf6:	f7fd f987 	bl	8001008 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d907      	bls.n	8003d14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e150      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	42470000 	.word	0x42470000
 8003d10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d14:	4b88      	ldr	r3, [pc, #544]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1ea      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 8097 	beq.w	8003e5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d32:	4b81      	ldr	r3, [pc, #516]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10f      	bne.n	8003d5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	4b7d      	ldr	r3, [pc, #500]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	4a7c      	ldr	r2, [pc, #496]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4e:	4b7a      	ldr	r3, [pc, #488]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5e:	4b77      	ldr	r3, [pc, #476]	; (8003f3c <HAL_RCC_OscConfig+0x474>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d118      	bne.n	8003d9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d6a:	4b74      	ldr	r3, [pc, #464]	; (8003f3c <HAL_RCC_OscConfig+0x474>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a73      	ldr	r2, [pc, #460]	; (8003f3c <HAL_RCC_OscConfig+0x474>)
 8003d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d76:	f7fd f947 	bl	8001008 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7e:	f7fd f943 	bl	8001008 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e10c      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d90:	4b6a      	ldr	r3, [pc, #424]	; (8003f3c <HAL_RCC_OscConfig+0x474>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d106      	bne.n	8003db2 <HAL_RCC_OscConfig+0x2ea>
 8003da4:	4b64      	ldr	r3, [pc, #400]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	4a63      	ldr	r2, [pc, #396]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	6713      	str	r3, [r2, #112]	; 0x70
 8003db0:	e01c      	b.n	8003dec <HAL_RCC_OscConfig+0x324>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b05      	cmp	r3, #5
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x30c>
 8003dba:	4b5f      	ldr	r3, [pc, #380]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	4a5e      	ldr	r2, [pc, #376]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	f043 0304 	orr.w	r3, r3, #4
 8003dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc6:	4b5c      	ldr	r3, [pc, #368]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	4a5b      	ldr	r2, [pc, #364]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd2:	e00b      	b.n	8003dec <HAL_RCC_OscConfig+0x324>
 8003dd4:	4b58      	ldr	r3, [pc, #352]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	4a57      	ldr	r2, [pc, #348]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003dda:	f023 0301 	bic.w	r3, r3, #1
 8003dde:	6713      	str	r3, [r2, #112]	; 0x70
 8003de0:	4b55      	ldr	r3, [pc, #340]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	4a54      	ldr	r2, [pc, #336]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003de6:	f023 0304 	bic.w	r3, r3, #4
 8003dea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d015      	beq.n	8003e20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df4:	f7fd f908 	bl	8001008 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfa:	e00a      	b.n	8003e12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dfc:	f7fd f904 	bl	8001008 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e0cb      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e12:	4b49      	ldr	r3, [pc, #292]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0ee      	beq.n	8003dfc <HAL_RCC_OscConfig+0x334>
 8003e1e:	e014      	b.n	8003e4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e20:	f7fd f8f2 	bl	8001008 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e28:	f7fd f8ee 	bl	8001008 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e0b5      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e3e:	4b3e      	ldr	r3, [pc, #248]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1ee      	bne.n	8003e28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e4a:	7dfb      	ldrb	r3, [r7, #23]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d105      	bne.n	8003e5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e50:	4b39      	ldr	r3, [pc, #228]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	4a38      	ldr	r2, [pc, #224]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 80a1 	beq.w	8003fa8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e66:	4b34      	ldr	r3, [pc, #208]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d05c      	beq.n	8003f2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d141      	bne.n	8003efe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7a:	4b31      	ldr	r3, [pc, #196]	; (8003f40 <HAL_RCC_OscConfig+0x478>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e80:	f7fd f8c2 	bl	8001008 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e88:	f7fd f8be 	bl	8001008 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e087      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9a:	4b27      	ldr	r3, [pc, #156]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69da      	ldr	r2, [r3, #28]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	019b      	lsls	r3, r3, #6
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	085b      	lsrs	r3, r3, #1
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	041b      	lsls	r3, r3, #16
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	061b      	lsls	r3, r3, #24
 8003eca:	491b      	ldr	r1, [pc, #108]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ed0:	4b1b      	ldr	r3, [pc, #108]	; (8003f40 <HAL_RCC_OscConfig+0x478>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed6:	f7fd f897 	bl	8001008 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ede:	f7fd f893 	bl	8001008 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e05c      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef0:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f0      	beq.n	8003ede <HAL_RCC_OscConfig+0x416>
 8003efc:	e054      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efe:	4b10      	ldr	r3, [pc, #64]	; (8003f40 <HAL_RCC_OscConfig+0x478>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f04:	f7fd f880 	bl	8001008 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f0c:	f7fd f87c 	bl	8001008 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e045      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_RCC_OscConfig+0x470>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCC_OscConfig+0x444>
 8003f2a:	e03d      	b.n	8003fa8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d107      	bne.n	8003f44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e038      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	40007000 	.word	0x40007000
 8003f40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f44:	4b1b      	ldr	r3, [pc, #108]	; (8003fb4 <HAL_RCC_OscConfig+0x4ec>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d028      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d121      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d11a      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f74:	4013      	ands	r3, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d111      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	085b      	lsrs	r3, r3, #1
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d107      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d001      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40023800 	.word	0x40023800

08003fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0cc      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fcc:	4b68      	ldr	r3, [pc, #416]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d90c      	bls.n	8003ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fda:	4b65      	ldr	r3, [pc, #404]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe2:	4b63      	ldr	r3, [pc, #396]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0b8      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d020      	beq.n	8004042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800400c:	4b59      	ldr	r3, [pc, #356]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	4a58      	ldr	r2, [pc, #352]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004016:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004024:	4b53      	ldr	r3, [pc, #332]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4a52      	ldr	r2, [pc, #328]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800402e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004030:	4b50      	ldr	r3, [pc, #320]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	494d      	ldr	r1, [pc, #308]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d044      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d107      	bne.n	8004066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004056:	4b47      	ldr	r3, [pc, #284]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d119      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e07f      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d003      	beq.n	8004076 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004072:	2b03      	cmp	r3, #3
 8004074:	d107      	bne.n	8004086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004076:	4b3f      	ldr	r3, [pc, #252]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d109      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e06f      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004086:	4b3b      	ldr	r3, [pc, #236]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e067      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004096:	4b37      	ldr	r3, [pc, #220]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f023 0203 	bic.w	r2, r3, #3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4934      	ldr	r1, [pc, #208]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a8:	f7fc ffae 	bl	8001008 <HAL_GetTick>
 80040ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b0:	f7fc ffaa 	bl	8001008 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e04f      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c6:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 020c 	and.w	r2, r3, #12
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d1eb      	bne.n	80040b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040d8:	4b25      	ldr	r3, [pc, #148]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d20c      	bcs.n	8004100 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e6:	4b22      	ldr	r3, [pc, #136]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b20      	ldr	r3, [pc, #128]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e032      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800410c:	4b19      	ldr	r3, [pc, #100]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4916      	ldr	r1, [pc, #88]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800412a:	4b12      	ldr	r3, [pc, #72]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	490e      	ldr	r1, [pc, #56]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	4313      	orrs	r3, r2
 800413c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800413e:	f000 f821 	bl	8004184 <HAL_RCC_GetSysClockFreq>
 8004142:	4602      	mov	r2, r0
 8004144:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	490a      	ldr	r1, [pc, #40]	; (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 8004150:	5ccb      	ldrb	r3, [r1, r3]
 8004152:	fa22 f303 	lsr.w	r3, r2, r3
 8004156:	4a09      	ldr	r2, [pc, #36]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800415a:	4b09      	ldr	r3, [pc, #36]	; (8004180 <HAL_RCC_ClockConfig+0x1c8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fc ff0e 	bl	8000f80 <HAL_InitTick>

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40023c00 	.word	0x40023c00
 8004174:	40023800 	.word	0x40023800
 8004178:	08006404 	.word	0x08006404
 800417c:	20000000 	.word	0x20000000
 8004180:	20000004 	.word	0x20000004

08004184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004188:	b090      	sub	sp, #64	; 0x40
 800418a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	637b      	str	r3, [r7, #52]	; 0x34
 8004190:	2300      	movs	r3, #0
 8004192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004194:	2300      	movs	r3, #0
 8004196:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800419c:	4b59      	ldr	r3, [pc, #356]	; (8004304 <HAL_RCC_GetSysClockFreq+0x180>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 030c 	and.w	r3, r3, #12
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d00d      	beq.n	80041c4 <HAL_RCC_GetSysClockFreq+0x40>
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	f200 80a1 	bhi.w	80042f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <HAL_RCC_GetSysClockFreq+0x34>
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d003      	beq.n	80041be <HAL_RCC_GetSysClockFreq+0x3a>
 80041b6:	e09b      	b.n	80042f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041b8:	4b53      	ldr	r3, [pc, #332]	; (8004308 <HAL_RCC_GetSysClockFreq+0x184>)
 80041ba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80041bc:	e09b      	b.n	80042f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041be:	4b53      	ldr	r3, [pc, #332]	; (800430c <HAL_RCC_GetSysClockFreq+0x188>)
 80041c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041c2:	e098      	b.n	80042f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041c4:	4b4f      	ldr	r3, [pc, #316]	; (8004304 <HAL_RCC_GetSysClockFreq+0x180>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041cc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ce:	4b4d      	ldr	r3, [pc, #308]	; (8004304 <HAL_RCC_GetSysClockFreq+0x180>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d028      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041da:	4b4a      	ldr	r3, [pc, #296]	; (8004304 <HAL_RCC_GetSysClockFreq+0x180>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	099b      	lsrs	r3, r3, #6
 80041e0:	2200      	movs	r2, #0
 80041e2:	623b      	str	r3, [r7, #32]
 80041e4:	627a      	str	r2, [r7, #36]	; 0x24
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041ec:	2100      	movs	r1, #0
 80041ee:	4b47      	ldr	r3, [pc, #284]	; (800430c <HAL_RCC_GetSysClockFreq+0x188>)
 80041f0:	fb03 f201 	mul.w	r2, r3, r1
 80041f4:	2300      	movs	r3, #0
 80041f6:	fb00 f303 	mul.w	r3, r0, r3
 80041fa:	4413      	add	r3, r2
 80041fc:	4a43      	ldr	r2, [pc, #268]	; (800430c <HAL_RCC_GetSysClockFreq+0x188>)
 80041fe:	fba0 1202 	umull	r1, r2, r0, r2
 8004202:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004204:	460a      	mov	r2, r1
 8004206:	62ba      	str	r2, [r7, #40]	; 0x28
 8004208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800420a:	4413      	add	r3, r2
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800420e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004210:	2200      	movs	r2, #0
 8004212:	61bb      	str	r3, [r7, #24]
 8004214:	61fa      	str	r2, [r7, #28]
 8004216:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800421a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800421e:	f7fc f82f 	bl	8000280 <__aeabi_uldivmod>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4613      	mov	r3, r2
 8004228:	63fb      	str	r3, [r7, #60]	; 0x3c
 800422a:	e053      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800422c:	4b35      	ldr	r3, [pc, #212]	; (8004304 <HAL_RCC_GetSysClockFreq+0x180>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	099b      	lsrs	r3, r3, #6
 8004232:	2200      	movs	r2, #0
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	617a      	str	r2, [r7, #20]
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800423e:	f04f 0b00 	mov.w	fp, #0
 8004242:	4652      	mov	r2, sl
 8004244:	465b      	mov	r3, fp
 8004246:	f04f 0000 	mov.w	r0, #0
 800424a:	f04f 0100 	mov.w	r1, #0
 800424e:	0159      	lsls	r1, r3, #5
 8004250:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004254:	0150      	lsls	r0, r2, #5
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	ebb2 080a 	subs.w	r8, r2, sl
 800425e:	eb63 090b 	sbc.w	r9, r3, fp
 8004262:	f04f 0200 	mov.w	r2, #0
 8004266:	f04f 0300 	mov.w	r3, #0
 800426a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800426e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004272:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004276:	ebb2 0408 	subs.w	r4, r2, r8
 800427a:	eb63 0509 	sbc.w	r5, r3, r9
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	00eb      	lsls	r3, r5, #3
 8004288:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800428c:	00e2      	lsls	r2, r4, #3
 800428e:	4614      	mov	r4, r2
 8004290:	461d      	mov	r5, r3
 8004292:	eb14 030a 	adds.w	r3, r4, sl
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	eb45 030b 	adc.w	r3, r5, fp
 800429c:	607b      	str	r3, [r7, #4]
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042aa:	4629      	mov	r1, r5
 80042ac:	028b      	lsls	r3, r1, #10
 80042ae:	4621      	mov	r1, r4
 80042b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042b4:	4621      	mov	r1, r4
 80042b6:	028a      	lsls	r2, r1, #10
 80042b8:	4610      	mov	r0, r2
 80042ba:	4619      	mov	r1, r3
 80042bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042be:	2200      	movs	r2, #0
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	60fa      	str	r2, [r7, #12]
 80042c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042c8:	f7fb ffda 	bl	8000280 <__aeabi_uldivmod>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4613      	mov	r3, r2
 80042d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042d4:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <HAL_RCC_GetSysClockFreq+0x180>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	0c1b      	lsrs	r3, r3, #16
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	3301      	adds	r3, #1
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80042e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042ee:	e002      	b.n	80042f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042f0:	4b05      	ldr	r3, [pc, #20]	; (8004308 <HAL_RCC_GetSysClockFreq+0x184>)
 80042f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3740      	adds	r7, #64	; 0x40
 80042fc:	46bd      	mov	sp, r7
 80042fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004302:	bf00      	nop
 8004304:	40023800 	.word	0x40023800
 8004308:	00f42400 	.word	0x00f42400
 800430c:	017d7840 	.word	0x017d7840

08004310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004314:	4b03      	ldr	r3, [pc, #12]	; (8004324 <HAL_RCC_GetHCLKFreq+0x14>)
 8004316:	681b      	ldr	r3, [r3, #0]
}
 8004318:	4618      	mov	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	20000000 	.word	0x20000000

08004328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800432c:	f7ff fff0 	bl	8004310 <HAL_RCC_GetHCLKFreq>
 8004330:	4602      	mov	r2, r0
 8004332:	4b05      	ldr	r3, [pc, #20]	; (8004348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	0a9b      	lsrs	r3, r3, #10
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	4903      	ldr	r1, [pc, #12]	; (800434c <HAL_RCC_GetPCLK1Freq+0x24>)
 800433e:	5ccb      	ldrb	r3, [r1, r3]
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40023800 	.word	0x40023800
 800434c:	08006414 	.word	0x08006414

08004350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004354:	f7ff ffdc 	bl	8004310 <HAL_RCC_GetHCLKFreq>
 8004358:	4602      	mov	r2, r0
 800435a:	4b05      	ldr	r3, [pc, #20]	; (8004370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	0b5b      	lsrs	r3, r3, #13
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	4903      	ldr	r1, [pc, #12]	; (8004374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004366:	5ccb      	ldrb	r3, [r1, r3]
 8004368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800436c:	4618      	mov	r0, r3
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40023800 	.word	0x40023800
 8004374:	08006414 	.word	0x08006414

08004378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e041      	b.n	800440e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d106      	bne.n	80043a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fc fc8c 	bl	8000cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3304      	adds	r3, #4
 80043b4:	4619      	mov	r1, r3
 80043b6:	4610      	mov	r0, r2
 80043b8:	f000 f936 	bl	8004628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_TIM_ConfigClockSource+0x1c>
 800442e:	2302      	movs	r3, #2
 8004430:	e0b4      	b.n	800459c <HAL_TIM_ConfigClockSource+0x186>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2202      	movs	r2, #2
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004450:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004458:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446a:	d03e      	beq.n	80044ea <HAL_TIM_ConfigClockSource+0xd4>
 800446c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004470:	f200 8087 	bhi.w	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 8004474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004478:	f000 8086 	beq.w	8004588 <HAL_TIM_ConfigClockSource+0x172>
 800447c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004480:	d87f      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 8004482:	2b70      	cmp	r3, #112	; 0x70
 8004484:	d01a      	beq.n	80044bc <HAL_TIM_ConfigClockSource+0xa6>
 8004486:	2b70      	cmp	r3, #112	; 0x70
 8004488:	d87b      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 800448a:	2b60      	cmp	r3, #96	; 0x60
 800448c:	d050      	beq.n	8004530 <HAL_TIM_ConfigClockSource+0x11a>
 800448e:	2b60      	cmp	r3, #96	; 0x60
 8004490:	d877      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 8004492:	2b50      	cmp	r3, #80	; 0x50
 8004494:	d03c      	beq.n	8004510 <HAL_TIM_ConfigClockSource+0xfa>
 8004496:	2b50      	cmp	r3, #80	; 0x50
 8004498:	d873      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d058      	beq.n	8004550 <HAL_TIM_ConfigClockSource+0x13a>
 800449e:	2b40      	cmp	r3, #64	; 0x40
 80044a0:	d86f      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 80044a2:	2b30      	cmp	r3, #48	; 0x30
 80044a4:	d064      	beq.n	8004570 <HAL_TIM_ConfigClockSource+0x15a>
 80044a6:	2b30      	cmp	r3, #48	; 0x30
 80044a8:	d86b      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 80044aa:	2b20      	cmp	r3, #32
 80044ac:	d060      	beq.n	8004570 <HAL_TIM_ConfigClockSource+0x15a>
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d867      	bhi.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d05c      	beq.n	8004570 <HAL_TIM_ConfigClockSource+0x15a>
 80044b6:	2b10      	cmp	r3, #16
 80044b8:	d05a      	beq.n	8004570 <HAL_TIM_ConfigClockSource+0x15a>
 80044ba:	e062      	b.n	8004582 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	6899      	ldr	r1, [r3, #8]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f000 fa37 	bl	800493e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	609a      	str	r2, [r3, #8]
      break;
 80044e8:	e04f      	b.n	800458a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	6899      	ldr	r1, [r3, #8]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f000 fa20 	bl	800493e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800450c:	609a      	str	r2, [r3, #8]
      break;
 800450e:	e03c      	b.n	800458a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	6859      	ldr	r1, [r3, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	461a      	mov	r2, r3
 800451e:	f000 f994 	bl	800484a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2150      	movs	r1, #80	; 0x50
 8004528:	4618      	mov	r0, r3
 800452a:	f000 f9ed 	bl	8004908 <TIM_ITRx_SetConfig>
      break;
 800452e:	e02c      	b.n	800458a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	6859      	ldr	r1, [r3, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	461a      	mov	r2, r3
 800453e:	f000 f9b3 	bl	80048a8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2160      	movs	r1, #96	; 0x60
 8004548:	4618      	mov	r0, r3
 800454a:	f000 f9dd 	bl	8004908 <TIM_ITRx_SetConfig>
      break;
 800454e:	e01c      	b.n	800458a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6818      	ldr	r0, [r3, #0]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	6859      	ldr	r1, [r3, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	461a      	mov	r2, r3
 800455e:	f000 f974 	bl	800484a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2140      	movs	r1, #64	; 0x40
 8004568:	4618      	mov	r0, r3
 800456a:	f000 f9cd 	bl	8004908 <TIM_ITRx_SetConfig>
      break;
 800456e:	e00c      	b.n	800458a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4619      	mov	r1, r3
 800457a:	4610      	mov	r0, r2
 800457c:	f000 f9c4 	bl	8004908 <TIM_ITRx_SetConfig>
      break;
 8004580:	e003      	b.n	800458a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	73fb      	strb	r3, [r7, #15]
      break;
 8004586:	e000      	b.n	800458a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004588:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800459a:	7bfb      	ldrb	r3, [r7, #15]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_TIM_SlaveConfigSynchro+0x18>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e031      	b.n	8004620 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80045cc:	6839      	ldr	r1, [r7, #0]
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f8aa 	bl	8004728 <TIM_SlaveTimer_SetConfig>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e018      	b.n	8004620 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045fc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800460c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a34      	ldr	r2, [pc, #208]	; (800470c <TIM_Base_SetConfig+0xe4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00f      	beq.n	8004660 <TIM_Base_SetConfig+0x38>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004646:	d00b      	beq.n	8004660 <TIM_Base_SetConfig+0x38>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a31      	ldr	r2, [pc, #196]	; (8004710 <TIM_Base_SetConfig+0xe8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d007      	beq.n	8004660 <TIM_Base_SetConfig+0x38>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a30      	ldr	r2, [pc, #192]	; (8004714 <TIM_Base_SetConfig+0xec>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d003      	beq.n	8004660 <TIM_Base_SetConfig+0x38>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a2f      	ldr	r2, [pc, #188]	; (8004718 <TIM_Base_SetConfig+0xf0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d108      	bne.n	8004672 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a25      	ldr	r2, [pc, #148]	; (800470c <TIM_Base_SetConfig+0xe4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d01b      	beq.n	80046b2 <TIM_Base_SetConfig+0x8a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004680:	d017      	beq.n	80046b2 <TIM_Base_SetConfig+0x8a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a22      	ldr	r2, [pc, #136]	; (8004710 <TIM_Base_SetConfig+0xe8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d013      	beq.n	80046b2 <TIM_Base_SetConfig+0x8a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a21      	ldr	r2, [pc, #132]	; (8004714 <TIM_Base_SetConfig+0xec>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00f      	beq.n	80046b2 <TIM_Base_SetConfig+0x8a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a20      	ldr	r2, [pc, #128]	; (8004718 <TIM_Base_SetConfig+0xf0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00b      	beq.n	80046b2 <TIM_Base_SetConfig+0x8a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a1f      	ldr	r2, [pc, #124]	; (800471c <TIM_Base_SetConfig+0xf4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d007      	beq.n	80046b2 <TIM_Base_SetConfig+0x8a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a1e      	ldr	r2, [pc, #120]	; (8004720 <TIM_Base_SetConfig+0xf8>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d003      	beq.n	80046b2 <TIM_Base_SetConfig+0x8a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a1d      	ldr	r2, [pc, #116]	; (8004724 <TIM_Base_SetConfig+0xfc>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d108      	bne.n	80046c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a08      	ldr	r2, [pc, #32]	; (800470c <TIM_Base_SetConfig+0xe4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d103      	bne.n	80046f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	615a      	str	r2, [r3, #20]
}
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40010000 	.word	0x40010000
 8004710:	40000400 	.word	0x40000400
 8004714:	40000800 	.word	0x40000800
 8004718:	40000c00 	.word	0x40000c00
 800471c:	40014000 	.word	0x40014000
 8004720:	40014400 	.word	0x40014400
 8004724:	40014800 	.word	0x40014800

08004728 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004744:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f023 0307 	bic.w	r3, r3, #7
 8004756:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b70      	cmp	r3, #112	; 0x70
 8004770:	d01a      	beq.n	80047a8 <TIM_SlaveTimer_SetConfig+0x80>
 8004772:	2b70      	cmp	r3, #112	; 0x70
 8004774:	d860      	bhi.n	8004838 <TIM_SlaveTimer_SetConfig+0x110>
 8004776:	2b60      	cmp	r3, #96	; 0x60
 8004778:	d054      	beq.n	8004824 <TIM_SlaveTimer_SetConfig+0xfc>
 800477a:	2b60      	cmp	r3, #96	; 0x60
 800477c:	d85c      	bhi.n	8004838 <TIM_SlaveTimer_SetConfig+0x110>
 800477e:	2b50      	cmp	r3, #80	; 0x50
 8004780:	d046      	beq.n	8004810 <TIM_SlaveTimer_SetConfig+0xe8>
 8004782:	2b50      	cmp	r3, #80	; 0x50
 8004784:	d858      	bhi.n	8004838 <TIM_SlaveTimer_SetConfig+0x110>
 8004786:	2b40      	cmp	r3, #64	; 0x40
 8004788:	d019      	beq.n	80047be <TIM_SlaveTimer_SetConfig+0x96>
 800478a:	2b40      	cmp	r3, #64	; 0x40
 800478c:	d854      	bhi.n	8004838 <TIM_SlaveTimer_SetConfig+0x110>
 800478e:	2b30      	cmp	r3, #48	; 0x30
 8004790:	d055      	beq.n	800483e <TIM_SlaveTimer_SetConfig+0x116>
 8004792:	2b30      	cmp	r3, #48	; 0x30
 8004794:	d850      	bhi.n	8004838 <TIM_SlaveTimer_SetConfig+0x110>
 8004796:	2b20      	cmp	r3, #32
 8004798:	d051      	beq.n	800483e <TIM_SlaveTimer_SetConfig+0x116>
 800479a:	2b20      	cmp	r3, #32
 800479c:	d84c      	bhi.n	8004838 <TIM_SlaveTimer_SetConfig+0x110>
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d04d      	beq.n	800483e <TIM_SlaveTimer_SetConfig+0x116>
 80047a2:	2b10      	cmp	r3, #16
 80047a4:	d04b      	beq.n	800483e <TIM_SlaveTimer_SetConfig+0x116>
 80047a6:	e047      	b.n	8004838 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	68d9      	ldr	r1, [r3, #12]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f000 f8c1 	bl	800493e <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80047bc:	e040      	b.n	8004840 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	d101      	bne.n	80047ca <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e03b      	b.n	8004842 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6a1a      	ldr	r2, [r3, #32]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0201 	bic.w	r2, r2, #1
 80047e0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047f0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	621a      	str	r2, [r3, #32]
      break;
 800480e:	e017      	b.n	8004840 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6818      	ldr	r0, [r3, #0]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	6899      	ldr	r1, [r3, #8]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	461a      	mov	r2, r3
 800481e:	f000 f814 	bl	800484a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004822:	e00d      	b.n	8004840 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	6899      	ldr	r1, [r3, #8]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	461a      	mov	r2, r3
 8004832:	f000 f839 	bl	80048a8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004836:	e003      	b.n	8004840 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	75fb      	strb	r3, [r7, #23]
      break;
 800483c:	e000      	b.n	8004840 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800483e:	bf00      	nop
  }

  return status;
 8004840:	7dfb      	ldrb	r3, [r7, #23]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800484a:	b480      	push	{r7}
 800484c:	b087      	sub	sp, #28
 800484e:	af00      	add	r7, sp, #0
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	f023 0201 	bic.w	r2, r3, #1
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004874:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f023 030a 	bic.w	r3, r3, #10
 8004886:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	4313      	orrs	r3, r2
 800488e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	621a      	str	r2, [r3, #32]
}
 800489c:	bf00      	nop
 800489e:	371c      	adds	r7, #28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	f023 0210 	bic.w	r2, r3, #16
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	031b      	lsls	r3, r3, #12
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	4313      	orrs	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	621a      	str	r2, [r3, #32]
}
 80048fc:	bf00      	nop
 80048fe:	371c      	adds	r7, #28
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4313      	orrs	r3, r2
 8004926:	f043 0307 	orr.w	r3, r3, #7
 800492a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	609a      	str	r2, [r3, #8]
}
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800493e:	b480      	push	{r7}
 8004940:	b087      	sub	sp, #28
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	607a      	str	r2, [r7, #4]
 800494a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004958:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	021a      	lsls	r2, r3, #8
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	431a      	orrs	r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4313      	orrs	r3, r2
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	609a      	str	r2, [r3, #8]
}
 8004972:	bf00      	nop
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
	...

08004980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004994:	2302      	movs	r3, #2
 8004996:	e050      	b.n	8004a3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1c      	ldr	r2, [pc, #112]	; (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d018      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e4:	d013      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a18      	ldr	r2, [pc, #96]	; (8004a4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00e      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a16      	ldr	r2, [pc, #88]	; (8004a50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d009      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a15      	ldr	r2, [pc, #84]	; (8004a54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d004      	beq.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a13      	ldr	r2, [pc, #76]	; (8004a58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d10c      	bne.n	8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	40010000 	.word	0x40010000
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800
 8004a54:	40000c00 	.word	0x40000c00
 8004a58:	40014000 	.word	0x40014000

08004a5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e03f      	b.n	8004aee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fc f950 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2224      	movs	r2, #36	; 0x24
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fd7b 	bl	800559c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ab4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695a      	ldr	r2, [r3, #20]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ac4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ad4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b08a      	sub	sp, #40	; 0x28
 8004afa:	af02      	add	r7, sp, #8
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	603b      	str	r3, [r7, #0]
 8004b02:	4613      	mov	r3, r2
 8004b04:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b20      	cmp	r3, #32
 8004b14:	d17c      	bne.n	8004c10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <HAL_UART_Transmit+0x2c>
 8004b1c:	88fb      	ldrh	r3, [r7, #6]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e075      	b.n	8004c12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_UART_Transmit+0x3e>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e06e      	b.n	8004c12 <HAL_UART_Transmit+0x11c>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2221      	movs	r2, #33	; 0x21
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b4a:	f7fc fa5d 	bl	8001008 <HAL_GetTick>
 8004b4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	88fa      	ldrh	r2, [r7, #6]
 8004b54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	88fa      	ldrh	r2, [r7, #6]
 8004b5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b64:	d108      	bne.n	8004b78 <HAL_UART_Transmit+0x82>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d104      	bne.n	8004b78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	61bb      	str	r3, [r7, #24]
 8004b76:	e003      	b.n	8004b80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b88:	e02a      	b.n	8004be0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2200      	movs	r2, #0
 8004b92:	2180      	movs	r1, #128	; 0x80
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 faf9 	bl	800518c <UART_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e036      	b.n	8004c12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10b      	bne.n	8004bc2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	3302      	adds	r3, #2
 8004bbe:	61bb      	str	r3, [r7, #24]
 8004bc0:	e007      	b.n	8004bd2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	781a      	ldrb	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1cf      	bne.n	8004b8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	2140      	movs	r1, #64	; 0x40
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 fac9 	bl	800518c <UART_WaitOnFlagUntilTimeout>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e006      	b.n	8004c12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e000      	b.n	8004c12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c10:	2302      	movs	r3, #2
  }
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3720      	adds	r7, #32
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b0ba      	sub	sp, #232	; 0xe8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10f      	bne.n	8004c82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_UART_IRQHandler+0x66>
 8004c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fbd3 	bl	8005426 <UART_Receive_IT>
      return;
 8004c80:	e256      	b.n	8005130 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 80de 	beq.w	8004e48 <HAL_UART_IRQHandler+0x22c>
 8004c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d106      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80d1 	beq.w	8004e48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00b      	beq.n	8004cca <HAL_UART_IRQHandler+0xae>
 8004cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d005      	beq.n	8004cca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	f043 0201 	orr.w	r2, r3, #1
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00b      	beq.n	8004cee <HAL_UART_IRQHandler+0xd2>
 8004cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f043 0202 	orr.w	r2, r3, #2
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00b      	beq.n	8004d12 <HAL_UART_IRQHandler+0xf6>
 8004cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d005      	beq.n	8004d12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f043 0204 	orr.w	r2, r3, #4
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d011      	beq.n	8004d42 <HAL_UART_IRQHandler+0x126>
 8004d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d105      	bne.n	8004d36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f043 0208 	orr.w	r2, r3, #8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 81ed 	beq.w	8005126 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d50:	f003 0320 	and.w	r3, r3, #32
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d008      	beq.n	8004d6a <HAL_UART_IRQHandler+0x14e>
 8004d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fb5e 	bl	8005426 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d74:	2b40      	cmp	r3, #64	; 0x40
 8004d76:	bf0c      	ite	eq
 8004d78:	2301      	moveq	r3, #1
 8004d7a:	2300      	movne	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d103      	bne.n	8004d96 <HAL_UART_IRQHandler+0x17a>
 8004d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d04f      	beq.n	8004e36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fa66 	bl	8005268 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da6:	2b40      	cmp	r3, #64	; 0x40
 8004da8:	d141      	bne.n	8004e2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3314      	adds	r3, #20
 8004db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004db8:	e853 3f00 	ldrex	r3, [r3]
 8004dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3314      	adds	r3, #20
 8004dd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004dd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004de2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1d9      	bne.n	8004daa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d013      	beq.n	8004e26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e02:	4a7d      	ldr	r2, [pc, #500]	; (8004ff8 <HAL_UART_IRQHandler+0x3dc>)
 8004e04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fc faad 	bl	800136a <HAL_DMA_Abort_IT>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d016      	beq.n	8004e44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e20:	4610      	mov	r0, r2
 8004e22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e24:	e00e      	b.n	8004e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f99a 	bl	8005160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e2c:	e00a      	b.n	8004e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f996 	bl	8005160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e34:	e006      	b.n	8004e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f992 	bl	8005160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e42:	e170      	b.n	8005126 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e44:	bf00      	nop
    return;
 8004e46:	e16e      	b.n	8005126 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	f040 814a 	bne.w	80050e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e56:	f003 0310 	and.w	r3, r3, #16
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 8143 	beq.w	80050e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 813c 	beq.w	80050e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60bb      	str	r3, [r7, #8]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60bb      	str	r3, [r7, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b40      	cmp	r3, #64	; 0x40
 8004e90:	f040 80b4 	bne.w	8004ffc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ea0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 8140 	beq.w	800512a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	f080 8139 	bcs.w	800512a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ebe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eca:	f000 8088 	beq.w	8004fde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	330c      	adds	r3, #12
 8004ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	330c      	adds	r3, #12
 8004ef6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004efa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1d9      	bne.n	8004ece <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3314      	adds	r3, #20
 8004f20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f24:	e853 3f00 	ldrex	r3, [r3]
 8004f28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f2c:	f023 0301 	bic.w	r3, r3, #1
 8004f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3314      	adds	r3, #20
 8004f3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e1      	bne.n	8004f1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3314      	adds	r3, #20
 8004f5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f60:	e853 3f00 	ldrex	r3, [r3]
 8004f64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3314      	adds	r3, #20
 8004f76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f82:	e841 2300 	strex	r3, r2, [r1]
 8004f86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1e3      	bne.n	8004f56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fae:	f023 0310 	bic.w	r3, r3, #16
 8004fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	330c      	adds	r3, #12
 8004fbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004fc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fc8:	e841 2300 	strex	r3, r2, [r1]
 8004fcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e3      	bne.n	8004f9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fc f956 	bl	800128a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	4619      	mov	r1, r3
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f8c0 	bl	8005174 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ff4:	e099      	b.n	800512a <HAL_UART_IRQHandler+0x50e>
 8004ff6:	bf00      	nop
 8004ff8:	0800532f 	.word	0x0800532f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005004:	b29b      	uxth	r3, r3
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005010:	b29b      	uxth	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 808b 	beq.w	800512e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 8086 	beq.w	800512e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	330c      	adds	r3, #12
 8005028:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	e853 3f00 	ldrex	r3, [r3]
 8005030:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005034:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005038:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	330c      	adds	r3, #12
 8005042:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005046:	647a      	str	r2, [r7, #68]	; 0x44
 8005048:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800504c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e3      	bne.n	8005022 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3314      	adds	r3, #20
 8005060:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	e853 3f00 	ldrex	r3, [r3]
 8005068:	623b      	str	r3, [r7, #32]
   return(result);
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	f023 0301 	bic.w	r3, r3, #1
 8005070:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3314      	adds	r3, #20
 800507a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800507e:	633a      	str	r2, [r7, #48]	; 0x30
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e3      	bne.n	800505a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	330c      	adds	r3, #12
 80050a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	e853 3f00 	ldrex	r3, [r3]
 80050ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0310 	bic.w	r3, r3, #16
 80050b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	330c      	adds	r3, #12
 80050c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80050c4:	61fa      	str	r2, [r7, #28]
 80050c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c8:	69b9      	ldr	r1, [r7, #24]
 80050ca:	69fa      	ldr	r2, [r7, #28]
 80050cc:	e841 2300 	strex	r3, r2, [r1]
 80050d0:	617b      	str	r3, [r7, #20]
   return(result);
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e3      	bne.n	80050a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050dc:	4619      	mov	r1, r3
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f848 	bl	8005174 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050e4:	e023      	b.n	800512e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d009      	beq.n	8005106 <HAL_UART_IRQHandler+0x4ea>
 80050f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f929 	bl	8005356 <UART_Transmit_IT>
    return;
 8005104:	e014      	b.n	8005130 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800510a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00e      	beq.n	8005130 <HAL_UART_IRQHandler+0x514>
 8005112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511a:	2b00      	cmp	r3, #0
 800511c:	d008      	beq.n	8005130 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f969 	bl	80053f6 <UART_EndTransmit_IT>
    return;
 8005124:	e004      	b.n	8005130 <HAL_UART_IRQHandler+0x514>
    return;
 8005126:	bf00      	nop
 8005128:	e002      	b.n	8005130 <HAL_UART_IRQHandler+0x514>
      return;
 800512a:	bf00      	nop
 800512c:	e000      	b.n	8005130 <HAL_UART_IRQHandler+0x514>
      return;
 800512e:	bf00      	nop
  }
}
 8005130:	37e8      	adds	r7, #232	; 0xe8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop

08005138 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	460b      	mov	r3, r1
 800517e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b090      	sub	sp, #64	; 0x40
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	4613      	mov	r3, r2
 800519a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800519c:	e050      	b.n	8005240 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a4:	d04c      	beq.n	8005240 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d007      	beq.n	80051bc <UART_WaitOnFlagUntilTimeout+0x30>
 80051ac:	f7fb ff2c 	bl	8001008 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d241      	bcs.n	8005240 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	330c      	adds	r3, #12
 80051c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	e853 3f00 	ldrex	r3, [r3]
 80051ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	330c      	adds	r3, #12
 80051da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051dc:	637a      	str	r2, [r7, #52]	; 0x34
 80051de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e5      	bne.n	80051bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3314      	adds	r3, #20
 80051f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f023 0301 	bic.w	r3, r3, #1
 8005206:	63bb      	str	r3, [r7, #56]	; 0x38
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3314      	adds	r3, #20
 800520e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005210:	623a      	str	r2, [r7, #32]
 8005212:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	69f9      	ldr	r1, [r7, #28]
 8005216:	6a3a      	ldr	r2, [r7, #32]
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	61bb      	str	r3, [r7, #24]
   return(result);
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e5      	bne.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e00f      	b.n	8005260 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	4013      	ands	r3, r2
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	429a      	cmp	r2, r3
 800524e:	bf0c      	ite	eq
 8005250:	2301      	moveq	r3, #1
 8005252:	2300      	movne	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	461a      	mov	r2, r3
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	429a      	cmp	r2, r3
 800525c:	d09f      	beq.n	800519e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3740      	adds	r7, #64	; 0x40
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005268:	b480      	push	{r7}
 800526a:	b095      	sub	sp, #84	; 0x54
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	330c      	adds	r3, #12
 8005276:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527a:	e853 3f00 	ldrex	r3, [r3]
 800527e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005282:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	330c      	adds	r3, #12
 800528e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005290:	643a      	str	r2, [r7, #64]	; 0x40
 8005292:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005296:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e5      	bne.n	8005270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3314      	adds	r3, #20
 80052aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	f023 0301 	bic.w	r3, r3, #1
 80052ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3314      	adds	r3, #20
 80052c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052cc:	e841 2300 	strex	r3, r2, [r1]
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e5      	bne.n	80052a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d119      	bne.n	8005314 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	330c      	adds	r3, #12
 80052e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	e853 3f00 	ldrex	r3, [r3]
 80052ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f023 0310 	bic.w	r3, r3, #16
 80052f6:	647b      	str	r3, [r7, #68]	; 0x44
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	330c      	adds	r3, #12
 80052fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005300:	61ba      	str	r2, [r7, #24]
 8005302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005304:	6979      	ldr	r1, [r7, #20]
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	e841 2300 	strex	r3, r2, [r1]
 800530c:	613b      	str	r3, [r7, #16]
   return(result);
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1e5      	bne.n	80052e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005322:	bf00      	nop
 8005324:	3754      	adds	r7, #84	; 0x54
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f7ff ff09 	bl	8005160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800534e:	bf00      	nop
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005356:	b480      	push	{r7}
 8005358:	b085      	sub	sp, #20
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b21      	cmp	r3, #33	; 0x21
 8005368:	d13e      	bne.n	80053e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005372:	d114      	bne.n	800539e <UART_Transmit_IT+0x48>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d110      	bne.n	800539e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005390:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	1c9a      	adds	r2, r3, #2
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	621a      	str	r2, [r3, #32]
 800539c:	e008      	b.n	80053b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	1c59      	adds	r1, r3, #1
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6211      	str	r1, [r2, #32]
 80053a8:	781a      	ldrb	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	4619      	mov	r1, r3
 80053be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10f      	bne.n	80053e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053e4:	2300      	movs	r3, #0
 80053e6:	e000      	b.n	80053ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053e8:	2302      	movs	r3, #2
  }
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800540c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff fe8e 	bl	8005138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b08c      	sub	sp, #48	; 0x30
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b22      	cmp	r3, #34	; 0x22
 8005438:	f040 80ab 	bne.w	8005592 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005444:	d117      	bne.n	8005476 <UART_Receive_IT+0x50>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d113      	bne.n	8005476 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800544e:	2300      	movs	r3, #0
 8005450:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005456:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	b29b      	uxth	r3, r3
 8005460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005464:	b29a      	uxth	r2, r3
 8005466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005468:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546e:	1c9a      	adds	r2, r3, #2
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	629a      	str	r2, [r3, #40]	; 0x28
 8005474:	e026      	b.n	80054c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800547c:	2300      	movs	r3, #0
 800547e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005488:	d007      	beq.n	800549a <UART_Receive_IT+0x74>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10a      	bne.n	80054a8 <UART_Receive_IT+0x82>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	e008      	b.n	80054ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	4619      	mov	r1, r3
 80054d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d15a      	bne.n	800558e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0220 	bic.w	r2, r2, #32
 80054e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695a      	ldr	r2, [r3, #20]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0201 	bic.w	r2, r2, #1
 8005506:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005514:	2b01      	cmp	r3, #1
 8005516:	d135      	bne.n	8005584 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	330c      	adds	r3, #12
 8005524:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	613b      	str	r3, [r7, #16]
   return(result);
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f023 0310 	bic.w	r3, r3, #16
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	330c      	adds	r3, #12
 800553c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800553e:	623a      	str	r2, [r7, #32]
 8005540:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	69f9      	ldr	r1, [r7, #28]
 8005544:	6a3a      	ldr	r2, [r7, #32]
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	61bb      	str	r3, [r7, #24]
   return(result);
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e5      	bne.n	800551e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0310 	and.w	r3, r3, #16
 800555c:	2b10      	cmp	r3, #16
 800555e:	d10a      	bne.n	8005576 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800557a:	4619      	mov	r1, r3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff fdf9 	bl	8005174 <HAL_UARTEx_RxEventCallback>
 8005582:	e002      	b.n	800558a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff fde1 	bl	800514c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800558a:	2300      	movs	r3, #0
 800558c:	e002      	b.n	8005594 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	e000      	b.n	8005594 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005592:	2302      	movs	r3, #2
  }
}
 8005594:	4618      	mov	r0, r3
 8005596:	3730      	adds	r7, #48	; 0x30
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800559c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055a0:	b0c0      	sub	sp, #256	; 0x100
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b8:	68d9      	ldr	r1, [r3, #12]
 80055ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	ea40 0301 	orr.w	r3, r0, r1
 80055c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	431a      	orrs	r2, r3
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055f4:	f021 010c 	bic.w	r1, r1, #12
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005602:	430b      	orrs	r3, r1
 8005604:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005616:	6999      	ldr	r1, [r3, #24]
 8005618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	ea40 0301 	orr.w	r3, r0, r1
 8005622:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	4b8f      	ldr	r3, [pc, #572]	; (8005868 <UART_SetConfig+0x2cc>)
 800562c:	429a      	cmp	r2, r3
 800562e:	d005      	beq.n	800563c <UART_SetConfig+0xa0>
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	4b8d      	ldr	r3, [pc, #564]	; (800586c <UART_SetConfig+0x2d0>)
 8005638:	429a      	cmp	r2, r3
 800563a:	d104      	bne.n	8005646 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800563c:	f7fe fe88 	bl	8004350 <HAL_RCC_GetPCLK2Freq>
 8005640:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005644:	e003      	b.n	800564e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005646:	f7fe fe6f 	bl	8004328 <HAL_RCC_GetPCLK1Freq>
 800564a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800564e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005658:	f040 810c 	bne.w	8005874 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800565c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005660:	2200      	movs	r2, #0
 8005662:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005666:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800566a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800566e:	4622      	mov	r2, r4
 8005670:	462b      	mov	r3, r5
 8005672:	1891      	adds	r1, r2, r2
 8005674:	65b9      	str	r1, [r7, #88]	; 0x58
 8005676:	415b      	adcs	r3, r3
 8005678:	65fb      	str	r3, [r7, #92]	; 0x5c
 800567a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800567e:	4621      	mov	r1, r4
 8005680:	eb12 0801 	adds.w	r8, r2, r1
 8005684:	4629      	mov	r1, r5
 8005686:	eb43 0901 	adc.w	r9, r3, r1
 800568a:	f04f 0200 	mov.w	r2, #0
 800568e:	f04f 0300 	mov.w	r3, #0
 8005692:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005696:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800569a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800569e:	4690      	mov	r8, r2
 80056a0:	4699      	mov	r9, r3
 80056a2:	4623      	mov	r3, r4
 80056a4:	eb18 0303 	adds.w	r3, r8, r3
 80056a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056ac:	462b      	mov	r3, r5
 80056ae:	eb49 0303 	adc.w	r3, r9, r3
 80056b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056ca:	460b      	mov	r3, r1
 80056cc:	18db      	adds	r3, r3, r3
 80056ce:	653b      	str	r3, [r7, #80]	; 0x50
 80056d0:	4613      	mov	r3, r2
 80056d2:	eb42 0303 	adc.w	r3, r2, r3
 80056d6:	657b      	str	r3, [r7, #84]	; 0x54
 80056d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056e0:	f7fa fdce 	bl	8000280 <__aeabi_uldivmod>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4b61      	ldr	r3, [pc, #388]	; (8005870 <UART_SetConfig+0x2d4>)
 80056ea:	fba3 2302 	umull	r2, r3, r3, r2
 80056ee:	095b      	lsrs	r3, r3, #5
 80056f0:	011c      	lsls	r4, r3, #4
 80056f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056f6:	2200      	movs	r2, #0
 80056f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005700:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005704:	4642      	mov	r2, r8
 8005706:	464b      	mov	r3, r9
 8005708:	1891      	adds	r1, r2, r2
 800570a:	64b9      	str	r1, [r7, #72]	; 0x48
 800570c:	415b      	adcs	r3, r3
 800570e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005710:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005714:	4641      	mov	r1, r8
 8005716:	eb12 0a01 	adds.w	sl, r2, r1
 800571a:	4649      	mov	r1, r9
 800571c:	eb43 0b01 	adc.w	fp, r3, r1
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	f04f 0300 	mov.w	r3, #0
 8005728:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800572c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005730:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005734:	4692      	mov	sl, r2
 8005736:	469b      	mov	fp, r3
 8005738:	4643      	mov	r3, r8
 800573a:	eb1a 0303 	adds.w	r3, sl, r3
 800573e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005742:	464b      	mov	r3, r9
 8005744:	eb4b 0303 	adc.w	r3, fp, r3
 8005748:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800574c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005758:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800575c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005760:	460b      	mov	r3, r1
 8005762:	18db      	adds	r3, r3, r3
 8005764:	643b      	str	r3, [r7, #64]	; 0x40
 8005766:	4613      	mov	r3, r2
 8005768:	eb42 0303 	adc.w	r3, r2, r3
 800576c:	647b      	str	r3, [r7, #68]	; 0x44
 800576e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005772:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005776:	f7fa fd83 	bl	8000280 <__aeabi_uldivmod>
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	4611      	mov	r1, r2
 8005780:	4b3b      	ldr	r3, [pc, #236]	; (8005870 <UART_SetConfig+0x2d4>)
 8005782:	fba3 2301 	umull	r2, r3, r3, r1
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	2264      	movs	r2, #100	; 0x64
 800578a:	fb02 f303 	mul.w	r3, r2, r3
 800578e:	1acb      	subs	r3, r1, r3
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005796:	4b36      	ldr	r3, [pc, #216]	; (8005870 <UART_SetConfig+0x2d4>)
 8005798:	fba3 2302 	umull	r2, r3, r3, r2
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057a4:	441c      	add	r4, r3
 80057a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057aa:	2200      	movs	r2, #0
 80057ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057b8:	4642      	mov	r2, r8
 80057ba:	464b      	mov	r3, r9
 80057bc:	1891      	adds	r1, r2, r2
 80057be:	63b9      	str	r1, [r7, #56]	; 0x38
 80057c0:	415b      	adcs	r3, r3
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057c8:	4641      	mov	r1, r8
 80057ca:	1851      	adds	r1, r2, r1
 80057cc:	6339      	str	r1, [r7, #48]	; 0x30
 80057ce:	4649      	mov	r1, r9
 80057d0:	414b      	adcs	r3, r1
 80057d2:	637b      	str	r3, [r7, #52]	; 0x34
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057e0:	4659      	mov	r1, fp
 80057e2:	00cb      	lsls	r3, r1, #3
 80057e4:	4651      	mov	r1, sl
 80057e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ea:	4651      	mov	r1, sl
 80057ec:	00ca      	lsls	r2, r1, #3
 80057ee:	4610      	mov	r0, r2
 80057f0:	4619      	mov	r1, r3
 80057f2:	4603      	mov	r3, r0
 80057f4:	4642      	mov	r2, r8
 80057f6:	189b      	adds	r3, r3, r2
 80057f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057fc:	464b      	mov	r3, r9
 80057fe:	460a      	mov	r2, r1
 8005800:	eb42 0303 	adc.w	r3, r2, r3
 8005804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005814:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005818:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800581c:	460b      	mov	r3, r1
 800581e:	18db      	adds	r3, r3, r3
 8005820:	62bb      	str	r3, [r7, #40]	; 0x28
 8005822:	4613      	mov	r3, r2
 8005824:	eb42 0303 	adc.w	r3, r2, r3
 8005828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800582a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800582e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005832:	f7fa fd25 	bl	8000280 <__aeabi_uldivmod>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4b0d      	ldr	r3, [pc, #52]	; (8005870 <UART_SetConfig+0x2d4>)
 800583c:	fba3 1302 	umull	r1, r3, r3, r2
 8005840:	095b      	lsrs	r3, r3, #5
 8005842:	2164      	movs	r1, #100	; 0x64
 8005844:	fb01 f303 	mul.w	r3, r1, r3
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	3332      	adds	r3, #50	; 0x32
 800584e:	4a08      	ldr	r2, [pc, #32]	; (8005870 <UART_SetConfig+0x2d4>)
 8005850:	fba2 2303 	umull	r2, r3, r2, r3
 8005854:	095b      	lsrs	r3, r3, #5
 8005856:	f003 0207 	and.w	r2, r3, #7
 800585a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4422      	add	r2, r4
 8005862:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005864:	e105      	b.n	8005a72 <UART_SetConfig+0x4d6>
 8005866:	bf00      	nop
 8005868:	40011000 	.word	0x40011000
 800586c:	40011400 	.word	0x40011400
 8005870:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005878:	2200      	movs	r2, #0
 800587a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800587e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005882:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005886:	4642      	mov	r2, r8
 8005888:	464b      	mov	r3, r9
 800588a:	1891      	adds	r1, r2, r2
 800588c:	6239      	str	r1, [r7, #32]
 800588e:	415b      	adcs	r3, r3
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
 8005892:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005896:	4641      	mov	r1, r8
 8005898:	1854      	adds	r4, r2, r1
 800589a:	4649      	mov	r1, r9
 800589c:	eb43 0501 	adc.w	r5, r3, r1
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	00eb      	lsls	r3, r5, #3
 80058aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058ae:	00e2      	lsls	r2, r4, #3
 80058b0:	4614      	mov	r4, r2
 80058b2:	461d      	mov	r5, r3
 80058b4:	4643      	mov	r3, r8
 80058b6:	18e3      	adds	r3, r4, r3
 80058b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058bc:	464b      	mov	r3, r9
 80058be:	eb45 0303 	adc.w	r3, r5, r3
 80058c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	f04f 0300 	mov.w	r3, #0
 80058de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058e2:	4629      	mov	r1, r5
 80058e4:	008b      	lsls	r3, r1, #2
 80058e6:	4621      	mov	r1, r4
 80058e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058ec:	4621      	mov	r1, r4
 80058ee:	008a      	lsls	r2, r1, #2
 80058f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058f4:	f7fa fcc4 	bl	8000280 <__aeabi_uldivmod>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4b60      	ldr	r3, [pc, #384]	; (8005a80 <UART_SetConfig+0x4e4>)
 80058fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005902:	095b      	lsrs	r3, r3, #5
 8005904:	011c      	lsls	r4, r3, #4
 8005906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800590a:	2200      	movs	r2, #0
 800590c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005910:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005914:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005918:	4642      	mov	r2, r8
 800591a:	464b      	mov	r3, r9
 800591c:	1891      	adds	r1, r2, r2
 800591e:	61b9      	str	r1, [r7, #24]
 8005920:	415b      	adcs	r3, r3
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005928:	4641      	mov	r1, r8
 800592a:	1851      	adds	r1, r2, r1
 800592c:	6139      	str	r1, [r7, #16]
 800592e:	4649      	mov	r1, r9
 8005930:	414b      	adcs	r3, r1
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005940:	4659      	mov	r1, fp
 8005942:	00cb      	lsls	r3, r1, #3
 8005944:	4651      	mov	r1, sl
 8005946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800594a:	4651      	mov	r1, sl
 800594c:	00ca      	lsls	r2, r1, #3
 800594e:	4610      	mov	r0, r2
 8005950:	4619      	mov	r1, r3
 8005952:	4603      	mov	r3, r0
 8005954:	4642      	mov	r2, r8
 8005956:	189b      	adds	r3, r3, r2
 8005958:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800595c:	464b      	mov	r3, r9
 800595e:	460a      	mov	r2, r1
 8005960:	eb42 0303 	adc.w	r3, r2, r3
 8005964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	67bb      	str	r3, [r7, #120]	; 0x78
 8005972:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	f04f 0300 	mov.w	r3, #0
 800597c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005980:	4649      	mov	r1, r9
 8005982:	008b      	lsls	r3, r1, #2
 8005984:	4641      	mov	r1, r8
 8005986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800598a:	4641      	mov	r1, r8
 800598c:	008a      	lsls	r2, r1, #2
 800598e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005992:	f7fa fc75 	bl	8000280 <__aeabi_uldivmod>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4b39      	ldr	r3, [pc, #228]	; (8005a80 <UART_SetConfig+0x4e4>)
 800599c:	fba3 1302 	umull	r1, r3, r3, r2
 80059a0:	095b      	lsrs	r3, r3, #5
 80059a2:	2164      	movs	r1, #100	; 0x64
 80059a4:	fb01 f303 	mul.w	r3, r1, r3
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	011b      	lsls	r3, r3, #4
 80059ac:	3332      	adds	r3, #50	; 0x32
 80059ae:	4a34      	ldr	r2, [pc, #208]	; (8005a80 <UART_SetConfig+0x4e4>)
 80059b0:	fba2 2303 	umull	r2, r3, r2, r3
 80059b4:	095b      	lsrs	r3, r3, #5
 80059b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059ba:	441c      	add	r4, r3
 80059bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059c0:	2200      	movs	r2, #0
 80059c2:	673b      	str	r3, [r7, #112]	; 0x70
 80059c4:	677a      	str	r2, [r7, #116]	; 0x74
 80059c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059ca:	4642      	mov	r2, r8
 80059cc:	464b      	mov	r3, r9
 80059ce:	1891      	adds	r1, r2, r2
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	415b      	adcs	r3, r3
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059da:	4641      	mov	r1, r8
 80059dc:	1851      	adds	r1, r2, r1
 80059de:	6039      	str	r1, [r7, #0]
 80059e0:	4649      	mov	r1, r9
 80059e2:	414b      	adcs	r3, r1
 80059e4:	607b      	str	r3, [r7, #4]
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	f04f 0300 	mov.w	r3, #0
 80059ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059f2:	4659      	mov	r1, fp
 80059f4:	00cb      	lsls	r3, r1, #3
 80059f6:	4651      	mov	r1, sl
 80059f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059fc:	4651      	mov	r1, sl
 80059fe:	00ca      	lsls	r2, r1, #3
 8005a00:	4610      	mov	r0, r2
 8005a02:	4619      	mov	r1, r3
 8005a04:	4603      	mov	r3, r0
 8005a06:	4642      	mov	r2, r8
 8005a08:	189b      	adds	r3, r3, r2
 8005a0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a0c:	464b      	mov	r3, r9
 8005a0e:	460a      	mov	r2, r1
 8005a10:	eb42 0303 	adc.w	r3, r2, r3
 8005a14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	663b      	str	r3, [r7, #96]	; 0x60
 8005a20:	667a      	str	r2, [r7, #100]	; 0x64
 8005a22:	f04f 0200 	mov.w	r2, #0
 8005a26:	f04f 0300 	mov.w	r3, #0
 8005a2a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a2e:	4649      	mov	r1, r9
 8005a30:	008b      	lsls	r3, r1, #2
 8005a32:	4641      	mov	r1, r8
 8005a34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a38:	4641      	mov	r1, r8
 8005a3a:	008a      	lsls	r2, r1, #2
 8005a3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a40:	f7fa fc1e 	bl	8000280 <__aeabi_uldivmod>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	4b0d      	ldr	r3, [pc, #52]	; (8005a80 <UART_SetConfig+0x4e4>)
 8005a4a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	2164      	movs	r1, #100	; 0x64
 8005a52:	fb01 f303 	mul.w	r3, r1, r3
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	3332      	adds	r3, #50	; 0x32
 8005a5c:	4a08      	ldr	r2, [pc, #32]	; (8005a80 <UART_SetConfig+0x4e4>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	f003 020f 	and.w	r2, r3, #15
 8005a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4422      	add	r2, r4
 8005a70:	609a      	str	r2, [r3, #8]
}
 8005a72:	bf00      	nop
 8005a74:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a7e:	bf00      	nop
 8005a80:	51eb851f 	.word	0x51eb851f

08005a84 <__errno>:
 8005a84:	4b01      	ldr	r3, [pc, #4]	; (8005a8c <__errno+0x8>)
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	2000000c 	.word	0x2000000c

08005a90 <__libc_init_array>:
 8005a90:	b570      	push	{r4, r5, r6, lr}
 8005a92:	4d0d      	ldr	r5, [pc, #52]	; (8005ac8 <__libc_init_array+0x38>)
 8005a94:	4c0d      	ldr	r4, [pc, #52]	; (8005acc <__libc_init_array+0x3c>)
 8005a96:	1b64      	subs	r4, r4, r5
 8005a98:	10a4      	asrs	r4, r4, #2
 8005a9a:	2600      	movs	r6, #0
 8005a9c:	42a6      	cmp	r6, r4
 8005a9e:	d109      	bne.n	8005ab4 <__libc_init_array+0x24>
 8005aa0:	4d0b      	ldr	r5, [pc, #44]	; (8005ad0 <__libc_init_array+0x40>)
 8005aa2:	4c0c      	ldr	r4, [pc, #48]	; (8005ad4 <__libc_init_array+0x44>)
 8005aa4:	f000 fc8e 	bl	80063c4 <_init>
 8005aa8:	1b64      	subs	r4, r4, r5
 8005aaa:	10a4      	asrs	r4, r4, #2
 8005aac:	2600      	movs	r6, #0
 8005aae:	42a6      	cmp	r6, r4
 8005ab0:	d105      	bne.n	8005abe <__libc_init_array+0x2e>
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}
 8005ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab8:	4798      	blx	r3
 8005aba:	3601      	adds	r6, #1
 8005abc:	e7ee      	b.n	8005a9c <__libc_init_array+0xc>
 8005abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac2:	4798      	blx	r3
 8005ac4:	3601      	adds	r6, #1
 8005ac6:	e7f2      	b.n	8005aae <__libc_init_array+0x1e>
 8005ac8:	08006458 	.word	0x08006458
 8005acc:	08006458 	.word	0x08006458
 8005ad0:	08006458 	.word	0x08006458
 8005ad4:	0800645c 	.word	0x0800645c

08005ad8 <memset>:
 8005ad8:	4402      	add	r2, r0
 8005ada:	4603      	mov	r3, r0
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d100      	bne.n	8005ae2 <memset+0xa>
 8005ae0:	4770      	bx	lr
 8005ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ae6:	e7f9      	b.n	8005adc <memset+0x4>

08005ae8 <siprintf>:
 8005ae8:	b40e      	push	{r1, r2, r3}
 8005aea:	b500      	push	{lr}
 8005aec:	b09c      	sub	sp, #112	; 0x70
 8005aee:	ab1d      	add	r3, sp, #116	; 0x74
 8005af0:	9002      	str	r0, [sp, #8]
 8005af2:	9006      	str	r0, [sp, #24]
 8005af4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005af8:	4809      	ldr	r0, [pc, #36]	; (8005b20 <siprintf+0x38>)
 8005afa:	9107      	str	r1, [sp, #28]
 8005afc:	9104      	str	r1, [sp, #16]
 8005afe:	4909      	ldr	r1, [pc, #36]	; (8005b24 <siprintf+0x3c>)
 8005b00:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b04:	9105      	str	r1, [sp, #20]
 8005b06:	6800      	ldr	r0, [r0, #0]
 8005b08:	9301      	str	r3, [sp, #4]
 8005b0a:	a902      	add	r1, sp, #8
 8005b0c:	f000 f868 	bl	8005be0 <_svfiprintf_r>
 8005b10:	9b02      	ldr	r3, [sp, #8]
 8005b12:	2200      	movs	r2, #0
 8005b14:	701a      	strb	r2, [r3, #0]
 8005b16:	b01c      	add	sp, #112	; 0x70
 8005b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b1c:	b003      	add	sp, #12
 8005b1e:	4770      	bx	lr
 8005b20:	2000000c 	.word	0x2000000c
 8005b24:	ffff0208 	.word	0xffff0208

08005b28 <__ssputs_r>:
 8005b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b2c:	688e      	ldr	r6, [r1, #8]
 8005b2e:	429e      	cmp	r6, r3
 8005b30:	4682      	mov	sl, r0
 8005b32:	460c      	mov	r4, r1
 8005b34:	4690      	mov	r8, r2
 8005b36:	461f      	mov	r7, r3
 8005b38:	d838      	bhi.n	8005bac <__ssputs_r+0x84>
 8005b3a:	898a      	ldrh	r2, [r1, #12]
 8005b3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b40:	d032      	beq.n	8005ba8 <__ssputs_r+0x80>
 8005b42:	6825      	ldr	r5, [r4, #0]
 8005b44:	6909      	ldr	r1, [r1, #16]
 8005b46:	eba5 0901 	sub.w	r9, r5, r1
 8005b4a:	6965      	ldr	r5, [r4, #20]
 8005b4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b54:	3301      	adds	r3, #1
 8005b56:	444b      	add	r3, r9
 8005b58:	106d      	asrs	r5, r5, #1
 8005b5a:	429d      	cmp	r5, r3
 8005b5c:	bf38      	it	cc
 8005b5e:	461d      	movcc	r5, r3
 8005b60:	0553      	lsls	r3, r2, #21
 8005b62:	d531      	bpl.n	8005bc8 <__ssputs_r+0xa0>
 8005b64:	4629      	mov	r1, r5
 8005b66:	f000 fb63 	bl	8006230 <_malloc_r>
 8005b6a:	4606      	mov	r6, r0
 8005b6c:	b950      	cbnz	r0, 8005b84 <__ssputs_r+0x5c>
 8005b6e:	230c      	movs	r3, #12
 8005b70:	f8ca 3000 	str.w	r3, [sl]
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b7a:	81a3      	strh	r3, [r4, #12]
 8005b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b84:	6921      	ldr	r1, [r4, #16]
 8005b86:	464a      	mov	r2, r9
 8005b88:	f000 fabe 	bl	8006108 <memcpy>
 8005b8c:	89a3      	ldrh	r3, [r4, #12]
 8005b8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b96:	81a3      	strh	r3, [r4, #12]
 8005b98:	6126      	str	r6, [r4, #16]
 8005b9a:	6165      	str	r5, [r4, #20]
 8005b9c:	444e      	add	r6, r9
 8005b9e:	eba5 0509 	sub.w	r5, r5, r9
 8005ba2:	6026      	str	r6, [r4, #0]
 8005ba4:	60a5      	str	r5, [r4, #8]
 8005ba6:	463e      	mov	r6, r7
 8005ba8:	42be      	cmp	r6, r7
 8005baa:	d900      	bls.n	8005bae <__ssputs_r+0x86>
 8005bac:	463e      	mov	r6, r7
 8005bae:	6820      	ldr	r0, [r4, #0]
 8005bb0:	4632      	mov	r2, r6
 8005bb2:	4641      	mov	r1, r8
 8005bb4:	f000 fab6 	bl	8006124 <memmove>
 8005bb8:	68a3      	ldr	r3, [r4, #8]
 8005bba:	1b9b      	subs	r3, r3, r6
 8005bbc:	60a3      	str	r3, [r4, #8]
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	4433      	add	r3, r6
 8005bc2:	6023      	str	r3, [r4, #0]
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	e7db      	b.n	8005b80 <__ssputs_r+0x58>
 8005bc8:	462a      	mov	r2, r5
 8005bca:	f000 fba5 	bl	8006318 <_realloc_r>
 8005bce:	4606      	mov	r6, r0
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d1e1      	bne.n	8005b98 <__ssputs_r+0x70>
 8005bd4:	6921      	ldr	r1, [r4, #16]
 8005bd6:	4650      	mov	r0, sl
 8005bd8:	f000 fabe 	bl	8006158 <_free_r>
 8005bdc:	e7c7      	b.n	8005b6e <__ssputs_r+0x46>
	...

08005be0 <_svfiprintf_r>:
 8005be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be4:	4698      	mov	r8, r3
 8005be6:	898b      	ldrh	r3, [r1, #12]
 8005be8:	061b      	lsls	r3, r3, #24
 8005bea:	b09d      	sub	sp, #116	; 0x74
 8005bec:	4607      	mov	r7, r0
 8005bee:	460d      	mov	r5, r1
 8005bf0:	4614      	mov	r4, r2
 8005bf2:	d50e      	bpl.n	8005c12 <_svfiprintf_r+0x32>
 8005bf4:	690b      	ldr	r3, [r1, #16]
 8005bf6:	b963      	cbnz	r3, 8005c12 <_svfiprintf_r+0x32>
 8005bf8:	2140      	movs	r1, #64	; 0x40
 8005bfa:	f000 fb19 	bl	8006230 <_malloc_r>
 8005bfe:	6028      	str	r0, [r5, #0]
 8005c00:	6128      	str	r0, [r5, #16]
 8005c02:	b920      	cbnz	r0, 8005c0e <_svfiprintf_r+0x2e>
 8005c04:	230c      	movs	r3, #12
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	f04f 30ff 	mov.w	r0, #4294967295
 8005c0c:	e0d1      	b.n	8005db2 <_svfiprintf_r+0x1d2>
 8005c0e:	2340      	movs	r3, #64	; 0x40
 8005c10:	616b      	str	r3, [r5, #20]
 8005c12:	2300      	movs	r3, #0
 8005c14:	9309      	str	r3, [sp, #36]	; 0x24
 8005c16:	2320      	movs	r3, #32
 8005c18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c20:	2330      	movs	r3, #48	; 0x30
 8005c22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005dcc <_svfiprintf_r+0x1ec>
 8005c26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c2a:	f04f 0901 	mov.w	r9, #1
 8005c2e:	4623      	mov	r3, r4
 8005c30:	469a      	mov	sl, r3
 8005c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c36:	b10a      	cbz	r2, 8005c3c <_svfiprintf_r+0x5c>
 8005c38:	2a25      	cmp	r2, #37	; 0x25
 8005c3a:	d1f9      	bne.n	8005c30 <_svfiprintf_r+0x50>
 8005c3c:	ebba 0b04 	subs.w	fp, sl, r4
 8005c40:	d00b      	beq.n	8005c5a <_svfiprintf_r+0x7a>
 8005c42:	465b      	mov	r3, fp
 8005c44:	4622      	mov	r2, r4
 8005c46:	4629      	mov	r1, r5
 8005c48:	4638      	mov	r0, r7
 8005c4a:	f7ff ff6d 	bl	8005b28 <__ssputs_r>
 8005c4e:	3001      	adds	r0, #1
 8005c50:	f000 80aa 	beq.w	8005da8 <_svfiprintf_r+0x1c8>
 8005c54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c56:	445a      	add	r2, fp
 8005c58:	9209      	str	r2, [sp, #36]	; 0x24
 8005c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 80a2 	beq.w	8005da8 <_svfiprintf_r+0x1c8>
 8005c64:	2300      	movs	r3, #0
 8005c66:	f04f 32ff 	mov.w	r2, #4294967295
 8005c6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c6e:	f10a 0a01 	add.w	sl, sl, #1
 8005c72:	9304      	str	r3, [sp, #16]
 8005c74:	9307      	str	r3, [sp, #28]
 8005c76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c7a:	931a      	str	r3, [sp, #104]	; 0x68
 8005c7c:	4654      	mov	r4, sl
 8005c7e:	2205      	movs	r2, #5
 8005c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c84:	4851      	ldr	r0, [pc, #324]	; (8005dcc <_svfiprintf_r+0x1ec>)
 8005c86:	f7fa faab 	bl	80001e0 <memchr>
 8005c8a:	9a04      	ldr	r2, [sp, #16]
 8005c8c:	b9d8      	cbnz	r0, 8005cc6 <_svfiprintf_r+0xe6>
 8005c8e:	06d0      	lsls	r0, r2, #27
 8005c90:	bf44      	itt	mi
 8005c92:	2320      	movmi	r3, #32
 8005c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c98:	0711      	lsls	r1, r2, #28
 8005c9a:	bf44      	itt	mi
 8005c9c:	232b      	movmi	r3, #43	; 0x2b
 8005c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ca6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ca8:	d015      	beq.n	8005cd6 <_svfiprintf_r+0xf6>
 8005caa:	9a07      	ldr	r2, [sp, #28]
 8005cac:	4654      	mov	r4, sl
 8005cae:	2000      	movs	r0, #0
 8005cb0:	f04f 0c0a 	mov.w	ip, #10
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cba:	3b30      	subs	r3, #48	; 0x30
 8005cbc:	2b09      	cmp	r3, #9
 8005cbe:	d94e      	bls.n	8005d5e <_svfiprintf_r+0x17e>
 8005cc0:	b1b0      	cbz	r0, 8005cf0 <_svfiprintf_r+0x110>
 8005cc2:	9207      	str	r2, [sp, #28]
 8005cc4:	e014      	b.n	8005cf0 <_svfiprintf_r+0x110>
 8005cc6:	eba0 0308 	sub.w	r3, r0, r8
 8005cca:	fa09 f303 	lsl.w	r3, r9, r3
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	9304      	str	r3, [sp, #16]
 8005cd2:	46a2      	mov	sl, r4
 8005cd4:	e7d2      	b.n	8005c7c <_svfiprintf_r+0x9c>
 8005cd6:	9b03      	ldr	r3, [sp, #12]
 8005cd8:	1d19      	adds	r1, r3, #4
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	9103      	str	r1, [sp, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	bfbb      	ittet	lt
 8005ce2:	425b      	neglt	r3, r3
 8005ce4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ce8:	9307      	strge	r3, [sp, #28]
 8005cea:	9307      	strlt	r3, [sp, #28]
 8005cec:	bfb8      	it	lt
 8005cee:	9204      	strlt	r2, [sp, #16]
 8005cf0:	7823      	ldrb	r3, [r4, #0]
 8005cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8005cf4:	d10c      	bne.n	8005d10 <_svfiprintf_r+0x130>
 8005cf6:	7863      	ldrb	r3, [r4, #1]
 8005cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8005cfa:	d135      	bne.n	8005d68 <_svfiprintf_r+0x188>
 8005cfc:	9b03      	ldr	r3, [sp, #12]
 8005cfe:	1d1a      	adds	r2, r3, #4
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	9203      	str	r2, [sp, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	bfb8      	it	lt
 8005d08:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d0c:	3402      	adds	r4, #2
 8005d0e:	9305      	str	r3, [sp, #20]
 8005d10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ddc <_svfiprintf_r+0x1fc>
 8005d14:	7821      	ldrb	r1, [r4, #0]
 8005d16:	2203      	movs	r2, #3
 8005d18:	4650      	mov	r0, sl
 8005d1a:	f7fa fa61 	bl	80001e0 <memchr>
 8005d1e:	b140      	cbz	r0, 8005d32 <_svfiprintf_r+0x152>
 8005d20:	2340      	movs	r3, #64	; 0x40
 8005d22:	eba0 000a 	sub.w	r0, r0, sl
 8005d26:	fa03 f000 	lsl.w	r0, r3, r0
 8005d2a:	9b04      	ldr	r3, [sp, #16]
 8005d2c:	4303      	orrs	r3, r0
 8005d2e:	3401      	adds	r4, #1
 8005d30:	9304      	str	r3, [sp, #16]
 8005d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d36:	4826      	ldr	r0, [pc, #152]	; (8005dd0 <_svfiprintf_r+0x1f0>)
 8005d38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d3c:	2206      	movs	r2, #6
 8005d3e:	f7fa fa4f 	bl	80001e0 <memchr>
 8005d42:	2800      	cmp	r0, #0
 8005d44:	d038      	beq.n	8005db8 <_svfiprintf_r+0x1d8>
 8005d46:	4b23      	ldr	r3, [pc, #140]	; (8005dd4 <_svfiprintf_r+0x1f4>)
 8005d48:	bb1b      	cbnz	r3, 8005d92 <_svfiprintf_r+0x1b2>
 8005d4a:	9b03      	ldr	r3, [sp, #12]
 8005d4c:	3307      	adds	r3, #7
 8005d4e:	f023 0307 	bic.w	r3, r3, #7
 8005d52:	3308      	adds	r3, #8
 8005d54:	9303      	str	r3, [sp, #12]
 8005d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d58:	4433      	add	r3, r6
 8005d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d5c:	e767      	b.n	8005c2e <_svfiprintf_r+0x4e>
 8005d5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d62:	460c      	mov	r4, r1
 8005d64:	2001      	movs	r0, #1
 8005d66:	e7a5      	b.n	8005cb4 <_svfiprintf_r+0xd4>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	3401      	adds	r4, #1
 8005d6c:	9305      	str	r3, [sp, #20]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	f04f 0c0a 	mov.w	ip, #10
 8005d74:	4620      	mov	r0, r4
 8005d76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d7a:	3a30      	subs	r2, #48	; 0x30
 8005d7c:	2a09      	cmp	r2, #9
 8005d7e:	d903      	bls.n	8005d88 <_svfiprintf_r+0x1a8>
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0c5      	beq.n	8005d10 <_svfiprintf_r+0x130>
 8005d84:	9105      	str	r1, [sp, #20]
 8005d86:	e7c3      	b.n	8005d10 <_svfiprintf_r+0x130>
 8005d88:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e7f0      	b.n	8005d74 <_svfiprintf_r+0x194>
 8005d92:	ab03      	add	r3, sp, #12
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	462a      	mov	r2, r5
 8005d98:	4b0f      	ldr	r3, [pc, #60]	; (8005dd8 <_svfiprintf_r+0x1f8>)
 8005d9a:	a904      	add	r1, sp, #16
 8005d9c:	4638      	mov	r0, r7
 8005d9e:	f3af 8000 	nop.w
 8005da2:	1c42      	adds	r2, r0, #1
 8005da4:	4606      	mov	r6, r0
 8005da6:	d1d6      	bne.n	8005d56 <_svfiprintf_r+0x176>
 8005da8:	89ab      	ldrh	r3, [r5, #12]
 8005daa:	065b      	lsls	r3, r3, #25
 8005dac:	f53f af2c 	bmi.w	8005c08 <_svfiprintf_r+0x28>
 8005db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005db2:	b01d      	add	sp, #116	; 0x74
 8005db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db8:	ab03      	add	r3, sp, #12
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	462a      	mov	r2, r5
 8005dbe:	4b06      	ldr	r3, [pc, #24]	; (8005dd8 <_svfiprintf_r+0x1f8>)
 8005dc0:	a904      	add	r1, sp, #16
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	f000 f87a 	bl	8005ebc <_printf_i>
 8005dc8:	e7eb      	b.n	8005da2 <_svfiprintf_r+0x1c2>
 8005dca:	bf00      	nop
 8005dcc:	0800641c 	.word	0x0800641c
 8005dd0:	08006426 	.word	0x08006426
 8005dd4:	00000000 	.word	0x00000000
 8005dd8:	08005b29 	.word	0x08005b29
 8005ddc:	08006422 	.word	0x08006422

08005de0 <_printf_common>:
 8005de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005de4:	4616      	mov	r6, r2
 8005de6:	4699      	mov	r9, r3
 8005de8:	688a      	ldr	r2, [r1, #8]
 8005dea:	690b      	ldr	r3, [r1, #16]
 8005dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005df0:	4293      	cmp	r3, r2
 8005df2:	bfb8      	it	lt
 8005df4:	4613      	movlt	r3, r2
 8005df6:	6033      	str	r3, [r6, #0]
 8005df8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dfc:	4607      	mov	r7, r0
 8005dfe:	460c      	mov	r4, r1
 8005e00:	b10a      	cbz	r2, 8005e06 <_printf_common+0x26>
 8005e02:	3301      	adds	r3, #1
 8005e04:	6033      	str	r3, [r6, #0]
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	0699      	lsls	r1, r3, #26
 8005e0a:	bf42      	ittt	mi
 8005e0c:	6833      	ldrmi	r3, [r6, #0]
 8005e0e:	3302      	addmi	r3, #2
 8005e10:	6033      	strmi	r3, [r6, #0]
 8005e12:	6825      	ldr	r5, [r4, #0]
 8005e14:	f015 0506 	ands.w	r5, r5, #6
 8005e18:	d106      	bne.n	8005e28 <_printf_common+0x48>
 8005e1a:	f104 0a19 	add.w	sl, r4, #25
 8005e1e:	68e3      	ldr	r3, [r4, #12]
 8005e20:	6832      	ldr	r2, [r6, #0]
 8005e22:	1a9b      	subs	r3, r3, r2
 8005e24:	42ab      	cmp	r3, r5
 8005e26:	dc26      	bgt.n	8005e76 <_printf_common+0x96>
 8005e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e2c:	1e13      	subs	r3, r2, #0
 8005e2e:	6822      	ldr	r2, [r4, #0]
 8005e30:	bf18      	it	ne
 8005e32:	2301      	movne	r3, #1
 8005e34:	0692      	lsls	r2, r2, #26
 8005e36:	d42b      	bmi.n	8005e90 <_printf_common+0xb0>
 8005e38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	4638      	mov	r0, r7
 8005e40:	47c0      	blx	r8
 8005e42:	3001      	adds	r0, #1
 8005e44:	d01e      	beq.n	8005e84 <_printf_common+0xa4>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	68e5      	ldr	r5, [r4, #12]
 8005e4a:	6832      	ldr	r2, [r6, #0]
 8005e4c:	f003 0306 	and.w	r3, r3, #6
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	bf08      	it	eq
 8005e54:	1aad      	subeq	r5, r5, r2
 8005e56:	68a3      	ldr	r3, [r4, #8]
 8005e58:	6922      	ldr	r2, [r4, #16]
 8005e5a:	bf0c      	ite	eq
 8005e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e60:	2500      	movne	r5, #0
 8005e62:	4293      	cmp	r3, r2
 8005e64:	bfc4      	itt	gt
 8005e66:	1a9b      	subgt	r3, r3, r2
 8005e68:	18ed      	addgt	r5, r5, r3
 8005e6a:	2600      	movs	r6, #0
 8005e6c:	341a      	adds	r4, #26
 8005e6e:	42b5      	cmp	r5, r6
 8005e70:	d11a      	bne.n	8005ea8 <_printf_common+0xc8>
 8005e72:	2000      	movs	r0, #0
 8005e74:	e008      	b.n	8005e88 <_printf_common+0xa8>
 8005e76:	2301      	movs	r3, #1
 8005e78:	4652      	mov	r2, sl
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	47c0      	blx	r8
 8005e80:	3001      	adds	r0, #1
 8005e82:	d103      	bne.n	8005e8c <_printf_common+0xac>
 8005e84:	f04f 30ff 	mov.w	r0, #4294967295
 8005e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8c:	3501      	adds	r5, #1
 8005e8e:	e7c6      	b.n	8005e1e <_printf_common+0x3e>
 8005e90:	18e1      	adds	r1, r4, r3
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	2030      	movs	r0, #48	; 0x30
 8005e96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e9a:	4422      	add	r2, r4
 8005e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ea4:	3302      	adds	r3, #2
 8005ea6:	e7c7      	b.n	8005e38 <_printf_common+0x58>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	4622      	mov	r2, r4
 8005eac:	4649      	mov	r1, r9
 8005eae:	4638      	mov	r0, r7
 8005eb0:	47c0      	blx	r8
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	d0e6      	beq.n	8005e84 <_printf_common+0xa4>
 8005eb6:	3601      	adds	r6, #1
 8005eb8:	e7d9      	b.n	8005e6e <_printf_common+0x8e>
	...

08005ebc <_printf_i>:
 8005ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec0:	7e0f      	ldrb	r7, [r1, #24]
 8005ec2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ec4:	2f78      	cmp	r7, #120	; 0x78
 8005ec6:	4691      	mov	r9, r2
 8005ec8:	4680      	mov	r8, r0
 8005eca:	460c      	mov	r4, r1
 8005ecc:	469a      	mov	sl, r3
 8005ece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ed2:	d807      	bhi.n	8005ee4 <_printf_i+0x28>
 8005ed4:	2f62      	cmp	r7, #98	; 0x62
 8005ed6:	d80a      	bhi.n	8005eee <_printf_i+0x32>
 8005ed8:	2f00      	cmp	r7, #0
 8005eda:	f000 80d8 	beq.w	800608e <_printf_i+0x1d2>
 8005ede:	2f58      	cmp	r7, #88	; 0x58
 8005ee0:	f000 80a3 	beq.w	800602a <_printf_i+0x16e>
 8005ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005eec:	e03a      	b.n	8005f64 <_printf_i+0xa8>
 8005eee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ef2:	2b15      	cmp	r3, #21
 8005ef4:	d8f6      	bhi.n	8005ee4 <_printf_i+0x28>
 8005ef6:	a101      	add	r1, pc, #4	; (adr r1, 8005efc <_printf_i+0x40>)
 8005ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005efc:	08005f55 	.word	0x08005f55
 8005f00:	08005f69 	.word	0x08005f69
 8005f04:	08005ee5 	.word	0x08005ee5
 8005f08:	08005ee5 	.word	0x08005ee5
 8005f0c:	08005ee5 	.word	0x08005ee5
 8005f10:	08005ee5 	.word	0x08005ee5
 8005f14:	08005f69 	.word	0x08005f69
 8005f18:	08005ee5 	.word	0x08005ee5
 8005f1c:	08005ee5 	.word	0x08005ee5
 8005f20:	08005ee5 	.word	0x08005ee5
 8005f24:	08005ee5 	.word	0x08005ee5
 8005f28:	08006075 	.word	0x08006075
 8005f2c:	08005f99 	.word	0x08005f99
 8005f30:	08006057 	.word	0x08006057
 8005f34:	08005ee5 	.word	0x08005ee5
 8005f38:	08005ee5 	.word	0x08005ee5
 8005f3c:	08006097 	.word	0x08006097
 8005f40:	08005ee5 	.word	0x08005ee5
 8005f44:	08005f99 	.word	0x08005f99
 8005f48:	08005ee5 	.word	0x08005ee5
 8005f4c:	08005ee5 	.word	0x08005ee5
 8005f50:	0800605f 	.word	0x0800605f
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	1d1a      	adds	r2, r3, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	602a      	str	r2, [r5, #0]
 8005f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f64:	2301      	movs	r3, #1
 8005f66:	e0a3      	b.n	80060b0 <_printf_i+0x1f4>
 8005f68:	6820      	ldr	r0, [r4, #0]
 8005f6a:	6829      	ldr	r1, [r5, #0]
 8005f6c:	0606      	lsls	r6, r0, #24
 8005f6e:	f101 0304 	add.w	r3, r1, #4
 8005f72:	d50a      	bpl.n	8005f8a <_printf_i+0xce>
 8005f74:	680e      	ldr	r6, [r1, #0]
 8005f76:	602b      	str	r3, [r5, #0]
 8005f78:	2e00      	cmp	r6, #0
 8005f7a:	da03      	bge.n	8005f84 <_printf_i+0xc8>
 8005f7c:	232d      	movs	r3, #45	; 0x2d
 8005f7e:	4276      	negs	r6, r6
 8005f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f84:	485e      	ldr	r0, [pc, #376]	; (8006100 <_printf_i+0x244>)
 8005f86:	230a      	movs	r3, #10
 8005f88:	e019      	b.n	8005fbe <_printf_i+0x102>
 8005f8a:	680e      	ldr	r6, [r1, #0]
 8005f8c:	602b      	str	r3, [r5, #0]
 8005f8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f92:	bf18      	it	ne
 8005f94:	b236      	sxthne	r6, r6
 8005f96:	e7ef      	b.n	8005f78 <_printf_i+0xbc>
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	6820      	ldr	r0, [r4, #0]
 8005f9c:	1d19      	adds	r1, r3, #4
 8005f9e:	6029      	str	r1, [r5, #0]
 8005fa0:	0601      	lsls	r1, r0, #24
 8005fa2:	d501      	bpl.n	8005fa8 <_printf_i+0xec>
 8005fa4:	681e      	ldr	r6, [r3, #0]
 8005fa6:	e002      	b.n	8005fae <_printf_i+0xf2>
 8005fa8:	0646      	lsls	r6, r0, #25
 8005faa:	d5fb      	bpl.n	8005fa4 <_printf_i+0xe8>
 8005fac:	881e      	ldrh	r6, [r3, #0]
 8005fae:	4854      	ldr	r0, [pc, #336]	; (8006100 <_printf_i+0x244>)
 8005fb0:	2f6f      	cmp	r7, #111	; 0x6f
 8005fb2:	bf0c      	ite	eq
 8005fb4:	2308      	moveq	r3, #8
 8005fb6:	230a      	movne	r3, #10
 8005fb8:	2100      	movs	r1, #0
 8005fba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fbe:	6865      	ldr	r5, [r4, #4]
 8005fc0:	60a5      	str	r5, [r4, #8]
 8005fc2:	2d00      	cmp	r5, #0
 8005fc4:	bfa2      	ittt	ge
 8005fc6:	6821      	ldrge	r1, [r4, #0]
 8005fc8:	f021 0104 	bicge.w	r1, r1, #4
 8005fcc:	6021      	strge	r1, [r4, #0]
 8005fce:	b90e      	cbnz	r6, 8005fd4 <_printf_i+0x118>
 8005fd0:	2d00      	cmp	r5, #0
 8005fd2:	d04d      	beq.n	8006070 <_printf_i+0x1b4>
 8005fd4:	4615      	mov	r5, r2
 8005fd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fda:	fb03 6711 	mls	r7, r3, r1, r6
 8005fde:	5dc7      	ldrb	r7, [r0, r7]
 8005fe0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fe4:	4637      	mov	r7, r6
 8005fe6:	42bb      	cmp	r3, r7
 8005fe8:	460e      	mov	r6, r1
 8005fea:	d9f4      	bls.n	8005fd6 <_printf_i+0x11a>
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d10b      	bne.n	8006008 <_printf_i+0x14c>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	07de      	lsls	r6, r3, #31
 8005ff4:	d508      	bpl.n	8006008 <_printf_i+0x14c>
 8005ff6:	6923      	ldr	r3, [r4, #16]
 8005ff8:	6861      	ldr	r1, [r4, #4]
 8005ffa:	4299      	cmp	r1, r3
 8005ffc:	bfde      	ittt	le
 8005ffe:	2330      	movle	r3, #48	; 0x30
 8006000:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006004:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006008:	1b52      	subs	r2, r2, r5
 800600a:	6122      	str	r2, [r4, #16]
 800600c:	f8cd a000 	str.w	sl, [sp]
 8006010:	464b      	mov	r3, r9
 8006012:	aa03      	add	r2, sp, #12
 8006014:	4621      	mov	r1, r4
 8006016:	4640      	mov	r0, r8
 8006018:	f7ff fee2 	bl	8005de0 <_printf_common>
 800601c:	3001      	adds	r0, #1
 800601e:	d14c      	bne.n	80060ba <_printf_i+0x1fe>
 8006020:	f04f 30ff 	mov.w	r0, #4294967295
 8006024:	b004      	add	sp, #16
 8006026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800602a:	4835      	ldr	r0, [pc, #212]	; (8006100 <_printf_i+0x244>)
 800602c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006030:	6829      	ldr	r1, [r5, #0]
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	f851 6b04 	ldr.w	r6, [r1], #4
 8006038:	6029      	str	r1, [r5, #0]
 800603a:	061d      	lsls	r5, r3, #24
 800603c:	d514      	bpl.n	8006068 <_printf_i+0x1ac>
 800603e:	07df      	lsls	r7, r3, #31
 8006040:	bf44      	itt	mi
 8006042:	f043 0320 	orrmi.w	r3, r3, #32
 8006046:	6023      	strmi	r3, [r4, #0]
 8006048:	b91e      	cbnz	r6, 8006052 <_printf_i+0x196>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	f023 0320 	bic.w	r3, r3, #32
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	2310      	movs	r3, #16
 8006054:	e7b0      	b.n	8005fb8 <_printf_i+0xfc>
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	f043 0320 	orr.w	r3, r3, #32
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	2378      	movs	r3, #120	; 0x78
 8006060:	4828      	ldr	r0, [pc, #160]	; (8006104 <_printf_i+0x248>)
 8006062:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006066:	e7e3      	b.n	8006030 <_printf_i+0x174>
 8006068:	0659      	lsls	r1, r3, #25
 800606a:	bf48      	it	mi
 800606c:	b2b6      	uxthmi	r6, r6
 800606e:	e7e6      	b.n	800603e <_printf_i+0x182>
 8006070:	4615      	mov	r5, r2
 8006072:	e7bb      	b.n	8005fec <_printf_i+0x130>
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	6826      	ldr	r6, [r4, #0]
 8006078:	6961      	ldr	r1, [r4, #20]
 800607a:	1d18      	adds	r0, r3, #4
 800607c:	6028      	str	r0, [r5, #0]
 800607e:	0635      	lsls	r5, r6, #24
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	d501      	bpl.n	8006088 <_printf_i+0x1cc>
 8006084:	6019      	str	r1, [r3, #0]
 8006086:	e002      	b.n	800608e <_printf_i+0x1d2>
 8006088:	0670      	lsls	r0, r6, #25
 800608a:	d5fb      	bpl.n	8006084 <_printf_i+0x1c8>
 800608c:	8019      	strh	r1, [r3, #0]
 800608e:	2300      	movs	r3, #0
 8006090:	6123      	str	r3, [r4, #16]
 8006092:	4615      	mov	r5, r2
 8006094:	e7ba      	b.n	800600c <_printf_i+0x150>
 8006096:	682b      	ldr	r3, [r5, #0]
 8006098:	1d1a      	adds	r2, r3, #4
 800609a:	602a      	str	r2, [r5, #0]
 800609c:	681d      	ldr	r5, [r3, #0]
 800609e:	6862      	ldr	r2, [r4, #4]
 80060a0:	2100      	movs	r1, #0
 80060a2:	4628      	mov	r0, r5
 80060a4:	f7fa f89c 	bl	80001e0 <memchr>
 80060a8:	b108      	cbz	r0, 80060ae <_printf_i+0x1f2>
 80060aa:	1b40      	subs	r0, r0, r5
 80060ac:	6060      	str	r0, [r4, #4]
 80060ae:	6863      	ldr	r3, [r4, #4]
 80060b0:	6123      	str	r3, [r4, #16]
 80060b2:	2300      	movs	r3, #0
 80060b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b8:	e7a8      	b.n	800600c <_printf_i+0x150>
 80060ba:	6923      	ldr	r3, [r4, #16]
 80060bc:	462a      	mov	r2, r5
 80060be:	4649      	mov	r1, r9
 80060c0:	4640      	mov	r0, r8
 80060c2:	47d0      	blx	sl
 80060c4:	3001      	adds	r0, #1
 80060c6:	d0ab      	beq.n	8006020 <_printf_i+0x164>
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	079b      	lsls	r3, r3, #30
 80060cc:	d413      	bmi.n	80060f6 <_printf_i+0x23a>
 80060ce:	68e0      	ldr	r0, [r4, #12]
 80060d0:	9b03      	ldr	r3, [sp, #12]
 80060d2:	4298      	cmp	r0, r3
 80060d4:	bfb8      	it	lt
 80060d6:	4618      	movlt	r0, r3
 80060d8:	e7a4      	b.n	8006024 <_printf_i+0x168>
 80060da:	2301      	movs	r3, #1
 80060dc:	4632      	mov	r2, r6
 80060de:	4649      	mov	r1, r9
 80060e0:	4640      	mov	r0, r8
 80060e2:	47d0      	blx	sl
 80060e4:	3001      	adds	r0, #1
 80060e6:	d09b      	beq.n	8006020 <_printf_i+0x164>
 80060e8:	3501      	adds	r5, #1
 80060ea:	68e3      	ldr	r3, [r4, #12]
 80060ec:	9903      	ldr	r1, [sp, #12]
 80060ee:	1a5b      	subs	r3, r3, r1
 80060f0:	42ab      	cmp	r3, r5
 80060f2:	dcf2      	bgt.n	80060da <_printf_i+0x21e>
 80060f4:	e7eb      	b.n	80060ce <_printf_i+0x212>
 80060f6:	2500      	movs	r5, #0
 80060f8:	f104 0619 	add.w	r6, r4, #25
 80060fc:	e7f5      	b.n	80060ea <_printf_i+0x22e>
 80060fe:	bf00      	nop
 8006100:	0800642d 	.word	0x0800642d
 8006104:	0800643e 	.word	0x0800643e

08006108 <memcpy>:
 8006108:	440a      	add	r2, r1
 800610a:	4291      	cmp	r1, r2
 800610c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006110:	d100      	bne.n	8006114 <memcpy+0xc>
 8006112:	4770      	bx	lr
 8006114:	b510      	push	{r4, lr}
 8006116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800611a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800611e:	4291      	cmp	r1, r2
 8006120:	d1f9      	bne.n	8006116 <memcpy+0xe>
 8006122:	bd10      	pop	{r4, pc}

08006124 <memmove>:
 8006124:	4288      	cmp	r0, r1
 8006126:	b510      	push	{r4, lr}
 8006128:	eb01 0402 	add.w	r4, r1, r2
 800612c:	d902      	bls.n	8006134 <memmove+0x10>
 800612e:	4284      	cmp	r4, r0
 8006130:	4623      	mov	r3, r4
 8006132:	d807      	bhi.n	8006144 <memmove+0x20>
 8006134:	1e43      	subs	r3, r0, #1
 8006136:	42a1      	cmp	r1, r4
 8006138:	d008      	beq.n	800614c <memmove+0x28>
 800613a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800613e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006142:	e7f8      	b.n	8006136 <memmove+0x12>
 8006144:	4402      	add	r2, r0
 8006146:	4601      	mov	r1, r0
 8006148:	428a      	cmp	r2, r1
 800614a:	d100      	bne.n	800614e <memmove+0x2a>
 800614c:	bd10      	pop	{r4, pc}
 800614e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006156:	e7f7      	b.n	8006148 <memmove+0x24>

08006158 <_free_r>:
 8006158:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800615a:	2900      	cmp	r1, #0
 800615c:	d044      	beq.n	80061e8 <_free_r+0x90>
 800615e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006162:	9001      	str	r0, [sp, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	f1a1 0404 	sub.w	r4, r1, #4
 800616a:	bfb8      	it	lt
 800616c:	18e4      	addlt	r4, r4, r3
 800616e:	f000 f913 	bl	8006398 <__malloc_lock>
 8006172:	4a1e      	ldr	r2, [pc, #120]	; (80061ec <_free_r+0x94>)
 8006174:	9801      	ldr	r0, [sp, #4]
 8006176:	6813      	ldr	r3, [r2, #0]
 8006178:	b933      	cbnz	r3, 8006188 <_free_r+0x30>
 800617a:	6063      	str	r3, [r4, #4]
 800617c:	6014      	str	r4, [r2, #0]
 800617e:	b003      	add	sp, #12
 8006180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006184:	f000 b90e 	b.w	80063a4 <__malloc_unlock>
 8006188:	42a3      	cmp	r3, r4
 800618a:	d908      	bls.n	800619e <_free_r+0x46>
 800618c:	6825      	ldr	r5, [r4, #0]
 800618e:	1961      	adds	r1, r4, r5
 8006190:	428b      	cmp	r3, r1
 8006192:	bf01      	itttt	eq
 8006194:	6819      	ldreq	r1, [r3, #0]
 8006196:	685b      	ldreq	r3, [r3, #4]
 8006198:	1949      	addeq	r1, r1, r5
 800619a:	6021      	streq	r1, [r4, #0]
 800619c:	e7ed      	b.n	800617a <_free_r+0x22>
 800619e:	461a      	mov	r2, r3
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	b10b      	cbz	r3, 80061a8 <_free_r+0x50>
 80061a4:	42a3      	cmp	r3, r4
 80061a6:	d9fa      	bls.n	800619e <_free_r+0x46>
 80061a8:	6811      	ldr	r1, [r2, #0]
 80061aa:	1855      	adds	r5, r2, r1
 80061ac:	42a5      	cmp	r5, r4
 80061ae:	d10b      	bne.n	80061c8 <_free_r+0x70>
 80061b0:	6824      	ldr	r4, [r4, #0]
 80061b2:	4421      	add	r1, r4
 80061b4:	1854      	adds	r4, r2, r1
 80061b6:	42a3      	cmp	r3, r4
 80061b8:	6011      	str	r1, [r2, #0]
 80061ba:	d1e0      	bne.n	800617e <_free_r+0x26>
 80061bc:	681c      	ldr	r4, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	6053      	str	r3, [r2, #4]
 80061c2:	4421      	add	r1, r4
 80061c4:	6011      	str	r1, [r2, #0]
 80061c6:	e7da      	b.n	800617e <_free_r+0x26>
 80061c8:	d902      	bls.n	80061d0 <_free_r+0x78>
 80061ca:	230c      	movs	r3, #12
 80061cc:	6003      	str	r3, [r0, #0]
 80061ce:	e7d6      	b.n	800617e <_free_r+0x26>
 80061d0:	6825      	ldr	r5, [r4, #0]
 80061d2:	1961      	adds	r1, r4, r5
 80061d4:	428b      	cmp	r3, r1
 80061d6:	bf04      	itt	eq
 80061d8:	6819      	ldreq	r1, [r3, #0]
 80061da:	685b      	ldreq	r3, [r3, #4]
 80061dc:	6063      	str	r3, [r4, #4]
 80061de:	bf04      	itt	eq
 80061e0:	1949      	addeq	r1, r1, r5
 80061e2:	6021      	streq	r1, [r4, #0]
 80061e4:	6054      	str	r4, [r2, #4]
 80061e6:	e7ca      	b.n	800617e <_free_r+0x26>
 80061e8:	b003      	add	sp, #12
 80061ea:	bd30      	pop	{r4, r5, pc}
 80061ec:	20000254 	.word	0x20000254

080061f0 <sbrk_aligned>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	4e0e      	ldr	r6, [pc, #56]	; (800622c <sbrk_aligned+0x3c>)
 80061f4:	460c      	mov	r4, r1
 80061f6:	6831      	ldr	r1, [r6, #0]
 80061f8:	4605      	mov	r5, r0
 80061fa:	b911      	cbnz	r1, 8006202 <sbrk_aligned+0x12>
 80061fc:	f000 f8bc 	bl	8006378 <_sbrk_r>
 8006200:	6030      	str	r0, [r6, #0]
 8006202:	4621      	mov	r1, r4
 8006204:	4628      	mov	r0, r5
 8006206:	f000 f8b7 	bl	8006378 <_sbrk_r>
 800620a:	1c43      	adds	r3, r0, #1
 800620c:	d00a      	beq.n	8006224 <sbrk_aligned+0x34>
 800620e:	1cc4      	adds	r4, r0, #3
 8006210:	f024 0403 	bic.w	r4, r4, #3
 8006214:	42a0      	cmp	r0, r4
 8006216:	d007      	beq.n	8006228 <sbrk_aligned+0x38>
 8006218:	1a21      	subs	r1, r4, r0
 800621a:	4628      	mov	r0, r5
 800621c:	f000 f8ac 	bl	8006378 <_sbrk_r>
 8006220:	3001      	adds	r0, #1
 8006222:	d101      	bne.n	8006228 <sbrk_aligned+0x38>
 8006224:	f04f 34ff 	mov.w	r4, #4294967295
 8006228:	4620      	mov	r0, r4
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	20000258 	.word	0x20000258

08006230 <_malloc_r>:
 8006230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006234:	1ccd      	adds	r5, r1, #3
 8006236:	f025 0503 	bic.w	r5, r5, #3
 800623a:	3508      	adds	r5, #8
 800623c:	2d0c      	cmp	r5, #12
 800623e:	bf38      	it	cc
 8006240:	250c      	movcc	r5, #12
 8006242:	2d00      	cmp	r5, #0
 8006244:	4607      	mov	r7, r0
 8006246:	db01      	blt.n	800624c <_malloc_r+0x1c>
 8006248:	42a9      	cmp	r1, r5
 800624a:	d905      	bls.n	8006258 <_malloc_r+0x28>
 800624c:	230c      	movs	r3, #12
 800624e:	603b      	str	r3, [r7, #0]
 8006250:	2600      	movs	r6, #0
 8006252:	4630      	mov	r0, r6
 8006254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006258:	4e2e      	ldr	r6, [pc, #184]	; (8006314 <_malloc_r+0xe4>)
 800625a:	f000 f89d 	bl	8006398 <__malloc_lock>
 800625e:	6833      	ldr	r3, [r6, #0]
 8006260:	461c      	mov	r4, r3
 8006262:	bb34      	cbnz	r4, 80062b2 <_malloc_r+0x82>
 8006264:	4629      	mov	r1, r5
 8006266:	4638      	mov	r0, r7
 8006268:	f7ff ffc2 	bl	80061f0 <sbrk_aligned>
 800626c:	1c43      	adds	r3, r0, #1
 800626e:	4604      	mov	r4, r0
 8006270:	d14d      	bne.n	800630e <_malloc_r+0xde>
 8006272:	6834      	ldr	r4, [r6, #0]
 8006274:	4626      	mov	r6, r4
 8006276:	2e00      	cmp	r6, #0
 8006278:	d140      	bne.n	80062fc <_malloc_r+0xcc>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	4631      	mov	r1, r6
 800627e:	4638      	mov	r0, r7
 8006280:	eb04 0803 	add.w	r8, r4, r3
 8006284:	f000 f878 	bl	8006378 <_sbrk_r>
 8006288:	4580      	cmp	r8, r0
 800628a:	d13a      	bne.n	8006302 <_malloc_r+0xd2>
 800628c:	6821      	ldr	r1, [r4, #0]
 800628e:	3503      	adds	r5, #3
 8006290:	1a6d      	subs	r5, r5, r1
 8006292:	f025 0503 	bic.w	r5, r5, #3
 8006296:	3508      	adds	r5, #8
 8006298:	2d0c      	cmp	r5, #12
 800629a:	bf38      	it	cc
 800629c:	250c      	movcc	r5, #12
 800629e:	4629      	mov	r1, r5
 80062a0:	4638      	mov	r0, r7
 80062a2:	f7ff ffa5 	bl	80061f0 <sbrk_aligned>
 80062a6:	3001      	adds	r0, #1
 80062a8:	d02b      	beq.n	8006302 <_malloc_r+0xd2>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	442b      	add	r3, r5
 80062ae:	6023      	str	r3, [r4, #0]
 80062b0:	e00e      	b.n	80062d0 <_malloc_r+0xa0>
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	1b52      	subs	r2, r2, r5
 80062b6:	d41e      	bmi.n	80062f6 <_malloc_r+0xc6>
 80062b8:	2a0b      	cmp	r2, #11
 80062ba:	d916      	bls.n	80062ea <_malloc_r+0xba>
 80062bc:	1961      	adds	r1, r4, r5
 80062be:	42a3      	cmp	r3, r4
 80062c0:	6025      	str	r5, [r4, #0]
 80062c2:	bf18      	it	ne
 80062c4:	6059      	strne	r1, [r3, #4]
 80062c6:	6863      	ldr	r3, [r4, #4]
 80062c8:	bf08      	it	eq
 80062ca:	6031      	streq	r1, [r6, #0]
 80062cc:	5162      	str	r2, [r4, r5]
 80062ce:	604b      	str	r3, [r1, #4]
 80062d0:	4638      	mov	r0, r7
 80062d2:	f104 060b 	add.w	r6, r4, #11
 80062d6:	f000 f865 	bl	80063a4 <__malloc_unlock>
 80062da:	f026 0607 	bic.w	r6, r6, #7
 80062de:	1d23      	adds	r3, r4, #4
 80062e0:	1af2      	subs	r2, r6, r3
 80062e2:	d0b6      	beq.n	8006252 <_malloc_r+0x22>
 80062e4:	1b9b      	subs	r3, r3, r6
 80062e6:	50a3      	str	r3, [r4, r2]
 80062e8:	e7b3      	b.n	8006252 <_malloc_r+0x22>
 80062ea:	6862      	ldr	r2, [r4, #4]
 80062ec:	42a3      	cmp	r3, r4
 80062ee:	bf0c      	ite	eq
 80062f0:	6032      	streq	r2, [r6, #0]
 80062f2:	605a      	strne	r2, [r3, #4]
 80062f4:	e7ec      	b.n	80062d0 <_malloc_r+0xa0>
 80062f6:	4623      	mov	r3, r4
 80062f8:	6864      	ldr	r4, [r4, #4]
 80062fa:	e7b2      	b.n	8006262 <_malloc_r+0x32>
 80062fc:	4634      	mov	r4, r6
 80062fe:	6876      	ldr	r6, [r6, #4]
 8006300:	e7b9      	b.n	8006276 <_malloc_r+0x46>
 8006302:	230c      	movs	r3, #12
 8006304:	603b      	str	r3, [r7, #0]
 8006306:	4638      	mov	r0, r7
 8006308:	f000 f84c 	bl	80063a4 <__malloc_unlock>
 800630c:	e7a1      	b.n	8006252 <_malloc_r+0x22>
 800630e:	6025      	str	r5, [r4, #0]
 8006310:	e7de      	b.n	80062d0 <_malloc_r+0xa0>
 8006312:	bf00      	nop
 8006314:	20000254 	.word	0x20000254

08006318 <_realloc_r>:
 8006318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800631c:	4680      	mov	r8, r0
 800631e:	4614      	mov	r4, r2
 8006320:	460e      	mov	r6, r1
 8006322:	b921      	cbnz	r1, 800632e <_realloc_r+0x16>
 8006324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006328:	4611      	mov	r1, r2
 800632a:	f7ff bf81 	b.w	8006230 <_malloc_r>
 800632e:	b92a      	cbnz	r2, 800633c <_realloc_r+0x24>
 8006330:	f7ff ff12 	bl	8006158 <_free_r>
 8006334:	4625      	mov	r5, r4
 8006336:	4628      	mov	r0, r5
 8006338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800633c:	f000 f838 	bl	80063b0 <_malloc_usable_size_r>
 8006340:	4284      	cmp	r4, r0
 8006342:	4607      	mov	r7, r0
 8006344:	d802      	bhi.n	800634c <_realloc_r+0x34>
 8006346:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800634a:	d812      	bhi.n	8006372 <_realloc_r+0x5a>
 800634c:	4621      	mov	r1, r4
 800634e:	4640      	mov	r0, r8
 8006350:	f7ff ff6e 	bl	8006230 <_malloc_r>
 8006354:	4605      	mov	r5, r0
 8006356:	2800      	cmp	r0, #0
 8006358:	d0ed      	beq.n	8006336 <_realloc_r+0x1e>
 800635a:	42bc      	cmp	r4, r7
 800635c:	4622      	mov	r2, r4
 800635e:	4631      	mov	r1, r6
 8006360:	bf28      	it	cs
 8006362:	463a      	movcs	r2, r7
 8006364:	f7ff fed0 	bl	8006108 <memcpy>
 8006368:	4631      	mov	r1, r6
 800636a:	4640      	mov	r0, r8
 800636c:	f7ff fef4 	bl	8006158 <_free_r>
 8006370:	e7e1      	b.n	8006336 <_realloc_r+0x1e>
 8006372:	4635      	mov	r5, r6
 8006374:	e7df      	b.n	8006336 <_realloc_r+0x1e>
	...

08006378 <_sbrk_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4d06      	ldr	r5, [pc, #24]	; (8006394 <_sbrk_r+0x1c>)
 800637c:	2300      	movs	r3, #0
 800637e:	4604      	mov	r4, r0
 8006380:	4608      	mov	r0, r1
 8006382:	602b      	str	r3, [r5, #0]
 8006384:	f7fa fd68 	bl	8000e58 <_sbrk>
 8006388:	1c43      	adds	r3, r0, #1
 800638a:	d102      	bne.n	8006392 <_sbrk_r+0x1a>
 800638c:	682b      	ldr	r3, [r5, #0]
 800638e:	b103      	cbz	r3, 8006392 <_sbrk_r+0x1a>
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	bd38      	pop	{r3, r4, r5, pc}
 8006394:	2000025c 	.word	0x2000025c

08006398 <__malloc_lock>:
 8006398:	4801      	ldr	r0, [pc, #4]	; (80063a0 <__malloc_lock+0x8>)
 800639a:	f000 b811 	b.w	80063c0 <__retarget_lock_acquire_recursive>
 800639e:	bf00      	nop
 80063a0:	20000260 	.word	0x20000260

080063a4 <__malloc_unlock>:
 80063a4:	4801      	ldr	r0, [pc, #4]	; (80063ac <__malloc_unlock+0x8>)
 80063a6:	f000 b80c 	b.w	80063c2 <__retarget_lock_release_recursive>
 80063aa:	bf00      	nop
 80063ac:	20000260 	.word	0x20000260

080063b0 <_malloc_usable_size_r>:
 80063b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063b4:	1f18      	subs	r0, r3, #4
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	bfbc      	itt	lt
 80063ba:	580b      	ldrlt	r3, [r1, r0]
 80063bc:	18c0      	addlt	r0, r0, r3
 80063be:	4770      	bx	lr

080063c0 <__retarget_lock_acquire_recursive>:
 80063c0:	4770      	bx	lr

080063c2 <__retarget_lock_release_recursive>:
 80063c2:	4770      	bx	lr

080063c4 <_init>:
 80063c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c6:	bf00      	nop
 80063c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ca:	bc08      	pop	{r3}
 80063cc:	469e      	mov	lr, r3
 80063ce:	4770      	bx	lr

080063d0 <_fini>:
 80063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d2:	bf00      	nop
 80063d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d6:	bc08      	pop	{r3}
 80063d8:	469e      	mov	lr, r3
 80063da:	4770      	bx	lr
